// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/menu"
	"base-server/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MenuUpdate) SetUpdateTime(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetPid sets the "pid" field.
func (mu *MenuUpdate) SetPid(i int64) *MenuUpdate {
	mu.mutation.ResetPid()
	mu.mutation.SetPid(i)
	return mu
}

// AddPid adds i to the "pid" field.
func (mu *MenuUpdate) AddPid(i int64) *MenuUpdate {
	mu.mutation.AddPid(i)
	return mu
}

// SetType sets the "type" field.
func (mu *MenuUpdate) SetType(i int8) *MenuUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(i)
	return mu
}

// AddType adds i to the "type" field.
func (mu *MenuUpdate) AddType(i int8) *MenuUpdate {
	mu.mutation.AddType(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MenuUpdate) SetStatus(b bool) *MenuUpdate {
	mu.mutation.SetStatus(b)
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MenuUpdate) SetTitle(s string) *MenuUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetOrder sets the "order" field.
func (mu *MenuUpdate) SetOrder(i int32) *MenuUpdate {
	mu.mutation.ResetOrder()
	mu.mutation.SetOrder(i)
	return mu
}

// AddOrder adds i to the "order" field.
func (mu *MenuUpdate) AddOrder(i int32) *MenuUpdate {
	mu.mutation.AddOrder(i)
	return mu
}

// SetPath sets the "path" field.
func (mu *MenuUpdate) SetPath(s string) *MenuUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetComponent sets the "component" field.
func (mu *MenuUpdate) SetComponent(s string) *MenuUpdate {
	mu.mutation.SetComponent(s)
	return mu
}

// SetRedirect sets the "redirect" field.
func (mu *MenuUpdate) SetRedirect(s string) *MenuUpdate {
	mu.mutation.SetRedirect(s)
	return mu
}

// SetLink sets the "link" field.
func (mu *MenuUpdate) SetLink(s string) *MenuUpdate {
	mu.mutation.SetLink(s)
	return mu
}

// SetIframeSrc sets the "iframeSrc" field.
func (mu *MenuUpdate) SetIframeSrc(s string) *MenuUpdate {
	mu.mutation.SetIframeSrc(s)
	return mu
}

// SetIgnoreAuth sets the "ignore_auth" field.
func (mu *MenuUpdate) SetIgnoreAuth(b bool) *MenuUpdate {
	mu.mutation.SetIgnoreAuth(b)
	return mu
}

// SetKeepalive sets the "keepalive" field.
func (mu *MenuUpdate) SetKeepalive(b bool) *MenuUpdate {
	mu.mutation.SetKeepalive(b)
	return mu
}

// SetPermission sets the "permission" field.
func (mu *MenuUpdate) SetPermission(s string) *MenuUpdate {
	mu.mutation.SetPermission(s)
	return mu
}

// SetAffixTab sets the "affix_tab" field.
func (mu *MenuUpdate) SetAffixTab(b bool) *MenuUpdate {
	mu.mutation.SetAffixTab(b)
	return mu
}

// SetHideInBreadcrumb sets the "hideInBreadcrumb" field.
func (mu *MenuUpdate) SetHideInBreadcrumb(b bool) *MenuUpdate {
	mu.mutation.SetHideInBreadcrumb(b)
	return mu
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := menu.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Pid(); ok {
		_spec.SetField(menu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedPid(); ok {
		_spec.AddField(menu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := mu.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedOrder(); ok {
		_spec.AddField(menu.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if value, ok := mu.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if value, ok := mu.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
	}
	if value, ok := mu.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
	}
	if value, ok := mu.mutation.IgnoreAuth(); ok {
		_spec.SetField(menu.FieldIgnoreAuth, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Keepalive(); ok {
		_spec.SetField(menu.FieldKeepalive, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Permission(); ok {
		_spec.SetField(menu.FieldPermission, field.TypeString, value)
	}
	if value, ok := mu.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
	}
	if value, ok := mu.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MenuUpdateOne) SetUpdateTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetPid sets the "pid" field.
func (muo *MenuUpdateOne) SetPid(i int64) *MenuUpdateOne {
	muo.mutation.ResetPid()
	muo.mutation.SetPid(i)
	return muo
}

// AddPid adds i to the "pid" field.
func (muo *MenuUpdateOne) AddPid(i int64) *MenuUpdateOne {
	muo.mutation.AddPid(i)
	return muo
}

// SetType sets the "type" field.
func (muo *MenuUpdateOne) SetType(i int8) *MenuUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(i)
	return muo
}

// AddType adds i to the "type" field.
func (muo *MenuUpdateOne) AddType(i int8) *MenuUpdateOne {
	muo.mutation.AddType(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MenuUpdateOne) SetStatus(b bool) *MenuUpdateOne {
	muo.mutation.SetStatus(b)
	return muo
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetTitle sets the "title" field.
func (muo *MenuUpdateOne) SetTitle(s string) *MenuUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetOrder sets the "order" field.
func (muo *MenuUpdateOne) SetOrder(i int32) *MenuUpdateOne {
	muo.mutation.ResetOrder()
	muo.mutation.SetOrder(i)
	return muo
}

// AddOrder adds i to the "order" field.
func (muo *MenuUpdateOne) AddOrder(i int32) *MenuUpdateOne {
	muo.mutation.AddOrder(i)
	return muo
}

// SetPath sets the "path" field.
func (muo *MenuUpdateOne) SetPath(s string) *MenuUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetComponent sets the "component" field.
func (muo *MenuUpdateOne) SetComponent(s string) *MenuUpdateOne {
	muo.mutation.SetComponent(s)
	return muo
}

// SetRedirect sets the "redirect" field.
func (muo *MenuUpdateOne) SetRedirect(s string) *MenuUpdateOne {
	muo.mutation.SetRedirect(s)
	return muo
}

// SetLink sets the "link" field.
func (muo *MenuUpdateOne) SetLink(s string) *MenuUpdateOne {
	muo.mutation.SetLink(s)
	return muo
}

// SetIframeSrc sets the "iframeSrc" field.
func (muo *MenuUpdateOne) SetIframeSrc(s string) *MenuUpdateOne {
	muo.mutation.SetIframeSrc(s)
	return muo
}

// SetIgnoreAuth sets the "ignore_auth" field.
func (muo *MenuUpdateOne) SetIgnoreAuth(b bool) *MenuUpdateOne {
	muo.mutation.SetIgnoreAuth(b)
	return muo
}

// SetKeepalive sets the "keepalive" field.
func (muo *MenuUpdateOne) SetKeepalive(b bool) *MenuUpdateOne {
	muo.mutation.SetKeepalive(b)
	return muo
}

// SetPermission sets the "permission" field.
func (muo *MenuUpdateOne) SetPermission(s string) *MenuUpdateOne {
	muo.mutation.SetPermission(s)
	return muo
}

// SetAffixTab sets the "affix_tab" field.
func (muo *MenuUpdateOne) SetAffixTab(b bool) *MenuUpdateOne {
	muo.mutation.SetAffixTab(b)
	return muo
}

// SetHideInBreadcrumb sets the "hideInBreadcrumb" field.
func (muo *MenuUpdateOne) SetHideInBreadcrumb(b bool) *MenuUpdateOne {
	muo.mutation.SetHideInBreadcrumb(b)
	return muo
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := menu.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Pid(); ok {
		_spec.SetField(menu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedPid(); ok {
		_spec.AddField(menu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := muo.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedOrder(); ok {
		_spec.AddField(menu.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if value, ok := muo.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if value, ok := muo.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
	}
	if value, ok := muo.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
	}
	if value, ok := muo.mutation.IgnoreAuth(); ok {
		_spec.SetField(menu.FieldIgnoreAuth, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Keepalive(); ok {
		_spec.SetField(menu.FieldKeepalive, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Permission(); ok {
		_spec.SetField(menu.FieldPermission, field.TypeString, value)
	}
	if value, ok := muo.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
	}
	if value, ok := muo.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
