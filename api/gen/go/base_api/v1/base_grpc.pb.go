// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.1
// source: base_api/v1/base.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Base_Login_FullMethodName            = "/api.base_api.v1.Base/Login"
	Base_GetUserInfo_FullMethodName      = "/api.base_api.v1.Base/GetUserInfo"
	Base_GetAccessCodes_FullMethodName   = "/api.base_api.v1.Base/GetAccessCodes"
	Base_Logout_FullMethodName           = "/api.base_api.v1.Base/Logout"
	Base_GetMenuList_FullMethodName      = "/api.base_api.v1.Base/GetMenuList"
	Base_RefreshToken_FullMethodName     = "/api.base_api.v1.Base/RefreshToken"
	Base_ReLoadPolicy_FullMethodName     = "/api.base_api.v1.Base/ReLoadPolicy"
	Base_GetUserList_FullMethodName      = "/api.base_api.v1.Base/GetUserList"
	Base_AddUser_FullMethodName          = "/api.base_api.v1.Base/AddUser"
	Base_UpdateUser_FullMethodName       = "/api.base_api.v1.Base/UpdateUser"
	Base_DelUser_FullMethodName          = "/api.base_api.v1.Base/DelUser"
	Base_IsUserExist_FullMethodName      = "/api.base_api.v1.Base/IsUserExist"
	Base_GetSysMenuList_FullMethodName   = "/api.base_api.v1.Base/GetSysMenuList"
	Base_IsMenuNameExists_FullMethodName = "/api.base_api.v1.Base/IsMenuNameExists"
	Base_IsMenuPathExists_FullMethodName = "/api.base_api.v1.Base/IsMenuPathExists"
	Base_CreateMenu_FullMethodName       = "/api.base_api.v1.Base/CreateMenu"
	Base_UpdateMenu_FullMethodName       = "/api.base_api.v1.Base/UpdateMenu"
	Base_DeleteMenu_FullMethodName       = "/api.base_api.v1.Base/DeleteMenu"
	Base_GetDeptList_FullMethodName      = "/api.base_api.v1.Base/GetDeptList"
	Base_AddDept_FullMethodName          = "/api.base_api.v1.Base/AddDept"
	Base_UpdateDept_FullMethodName       = "/api.base_api.v1.Base/UpdateDept"
	Base_DelDept_FullMethodName          = "/api.base_api.v1.Base/DelDept"
	Base_GetRoleList_FullMethodName      = "/api.base_api.v1.Base/GetRoleList"
	Base_AddRole_FullMethodName          = "/api.base_api.v1.Base/AddRole"
	Base_UpdateRole_FullMethodName       = "/api.base_api.v1.Base/UpdateRole"
	Base_DelRole_FullMethodName          = "/api.base_api.v1.Base/DelRole"
	Base_SetRoleStatus_FullMethodName    = "/api.base_api.v1.Base/SetRoleStatus"
	Base_ChangePassword_FullMethodName   = "/api.base_api.v1.Base/ChangePassword"
	Base_GetWalkRoute_FullMethodName     = "/api.base_api.v1.Base/GetWalkRoute"
)

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	// 用户登陆
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInfoReply, error)
	// 获取权限code
	GetAccessCodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAccessCodesReply, error)
	// 注销登陆 (仅靠jwt无法实现退出功能)(未实现，主要靠前端删凭证)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取路由菜单列表
	//
	//	rpc GetMenuList (google.protobuf.Empty) returns (GetMenuListReply) {
	GetMenuList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSysMenuListReply, error)
	// 使用refreshToken换取accessToken
	RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginReply, error)
	// ////////////////////////////////////////////////// (重新加载casbin权限数据)
	ReLoadPolicy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取账户列表
	GetUserList(ctx context.Context, in *GetUserParams, opts ...grpc.CallOption) (*GetUserListReply, error)
	// 新增用户
	AddUser(ctx context.Context, in *UserListItem, opts ...grpc.CallOption) (*UserListItem, error)
	// 更新用户
	UpdateUser(ctx context.Context, in *UserListItem, opts ...grpc.CallOption) (*UserListItem, error)
	// 删除用户
	DelUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 检查用户是否存在
	IsUserExist(ctx context.Context, in *IsUserExistsRequest, opts ...grpc.CallOption) (*IsUserExistsReply, error)
	// /////////////////////////////////////////////////// 系统菜单管理
	// 获取菜单列表
	GetSysMenuList(ctx context.Context, in *MenuParams, opts ...grpc.CallOption) (*GetSysMenuListReply, error)
	// 菜单名称是否存在
	IsMenuNameExists(ctx context.Context, in *IsMenuNameExistsRequest, opts ...grpc.CallOption) (*IsMenuNameExistsReply, error)
	// 路由地址是否存在
	IsMenuPathExists(ctx context.Context, in *IsMenuPathExistsRequest, opts ...grpc.CallOption) (*IsMenuPathExistsReply, error)
	// 创建菜单
	CreateMenu(ctx context.Context, in *SysMenuListItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新菜单
	UpdateMenu(ctx context.Context, in *SysMenuListItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取部门列表
	GetDeptList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeptListReply, error)
	// 新增部门
	AddDept(ctx context.Context, in *DeptListItem, opts ...grpc.CallOption) (*DeptListItem, error)
	// 修改部门
	UpdateDept(ctx context.Context, in *DeptListItem, opts ...grpc.CallOption) (*DeptListItem, error)
	// 删除部门
	DelDept(ctx context.Context, in *DeleteDept, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取角色列表
	GetRoleList(ctx context.Context, in *RolePageParams, opts ...grpc.CallOption) (*GetRoleListByPageReply, error)
	// 新增角色
	AddRole(ctx context.Context, in *RoleListItem, opts ...grpc.CallOption) (*RoleListItem, error)
	// 修改角色
	UpdateRole(ctx context.Context, in *RoleListItem, opts ...grpc.CallOption) (*RoleListItem, error)
	// 删除角色
	DelRole(ctx context.Context, in *DeleteRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置角色状态 (未使用)
	SetRoleStatus(ctx context.Context, in *SetRoleStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 改密码
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// /////////////////////////////////////////////////
	// 获取系统所有 api
	GetWalkRoute(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWalkRouteReply, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Base_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoReply)
	err := c.cc.Invoke(ctx, Base_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetAccessCodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAccessCodesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccessCodesReply)
	err := c.cc.Invoke(ctx, Base_GetAccessCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetMenuList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSysMenuListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysMenuListReply)
	err := c.cc.Invoke(ctx, Base_GetMenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Base_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) ReLoadPolicy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_ReLoadPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetUserList(ctx context.Context, in *GetUserParams, opts ...grpc.CallOption) (*GetUserListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListReply)
	err := c.cc.Invoke(ctx, Base_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) AddUser(ctx context.Context, in *UserListItem, opts ...grpc.CallOption) (*UserListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListItem)
	err := c.cc.Invoke(ctx, Base_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) UpdateUser(ctx context.Context, in *UserListItem, opts ...grpc.CallOption) (*UserListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListItem)
	err := c.cc.Invoke(ctx, Base_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) DelUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_DelUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) IsUserExist(ctx context.Context, in *IsUserExistsRequest, opts ...grpc.CallOption) (*IsUserExistsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUserExistsReply)
	err := c.cc.Invoke(ctx, Base_IsUserExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetSysMenuList(ctx context.Context, in *MenuParams, opts ...grpc.CallOption) (*GetSysMenuListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysMenuListReply)
	err := c.cc.Invoke(ctx, Base_GetSysMenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) IsMenuNameExists(ctx context.Context, in *IsMenuNameExistsRequest, opts ...grpc.CallOption) (*IsMenuNameExistsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMenuNameExistsReply)
	err := c.cc.Invoke(ctx, Base_IsMenuNameExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) IsMenuPathExists(ctx context.Context, in *IsMenuPathExistsRequest, opts ...grpc.CallOption) (*IsMenuPathExistsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMenuPathExistsReply)
	err := c.cc.Invoke(ctx, Base_IsMenuPathExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) CreateMenu(ctx context.Context, in *SysMenuListItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_CreateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) UpdateMenu(ctx context.Context, in *SysMenuListItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_UpdateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_DeleteMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetDeptList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeptListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeptListReply)
	err := c.cc.Invoke(ctx, Base_GetDeptList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) AddDept(ctx context.Context, in *DeptListItem, opts ...grpc.CallOption) (*DeptListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeptListItem)
	err := c.cc.Invoke(ctx, Base_AddDept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) UpdateDept(ctx context.Context, in *DeptListItem, opts ...grpc.CallOption) (*DeptListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeptListItem)
	err := c.cc.Invoke(ctx, Base_UpdateDept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) DelDept(ctx context.Context, in *DeleteDept, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_DelDept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetRoleList(ctx context.Context, in *RolePageParams, opts ...grpc.CallOption) (*GetRoleListByPageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleListByPageReply)
	err := c.cc.Invoke(ctx, Base_GetRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) AddRole(ctx context.Context, in *RoleListItem, opts ...grpc.CallOption) (*RoleListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleListItem)
	err := c.cc.Invoke(ctx, Base_AddRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) UpdateRole(ctx context.Context, in *RoleListItem, opts ...grpc.CallOption) (*RoleListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleListItem)
	err := c.cc.Invoke(ctx, Base_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) DelRole(ctx context.Context, in *DeleteRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_DelRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) SetRoleStatus(ctx context.Context, in *SetRoleStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_SetRoleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Base_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetWalkRoute(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWalkRouteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalkRouteReply)
	err := c.cc.Invoke(ctx, Base_GetWalkRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility.
type BaseServer interface {
	// 用户登陆
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// 获取用户信息
	GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error)
	// 获取权限code
	GetAccessCodes(context.Context, *emptypb.Empty) (*GetAccessCodesReply, error)
	// 注销登陆 (仅靠jwt无法实现退出功能)(未实现，主要靠前端删凭证)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 获取路由菜单列表
	//
	//	rpc GetMenuList (google.protobuf.Empty) returns (GetMenuListReply) {
	GetMenuList(context.Context, *emptypb.Empty) (*GetSysMenuListReply, error)
	// 使用refreshToken换取accessToken
	RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error)
	// ////////////////////////////////////////////////// (重新加载casbin权限数据)
	ReLoadPolicy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 获取账户列表
	GetUserList(context.Context, *GetUserParams) (*GetUserListReply, error)
	// 新增用户
	AddUser(context.Context, *UserListItem) (*UserListItem, error)
	// 更新用户
	UpdateUser(context.Context, *UserListItem) (*UserListItem, error)
	// 删除用户
	DelUser(context.Context, *DeleteUser) (*emptypb.Empty, error)
	// 检查用户是否存在
	IsUserExist(context.Context, *IsUserExistsRequest) (*IsUserExistsReply, error)
	// /////////////////////////////////////////////////// 系统菜单管理
	// 获取菜单列表
	GetSysMenuList(context.Context, *MenuParams) (*GetSysMenuListReply, error)
	// 菜单名称是否存在
	IsMenuNameExists(context.Context, *IsMenuNameExistsRequest) (*IsMenuNameExistsReply, error)
	// 路由地址是否存在
	IsMenuPathExists(context.Context, *IsMenuPathExistsRequest) (*IsMenuPathExistsReply, error)
	// 创建菜单
	CreateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error)
	// 更新菜单
	UpdateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error)
	// 删除菜单
	DeleteMenu(context.Context, *DeleteMenuRequest) (*emptypb.Empty, error)
	// 获取部门列表
	GetDeptList(context.Context, *emptypb.Empty) (*GetDeptListReply, error)
	// 新增部门
	AddDept(context.Context, *DeptListItem) (*DeptListItem, error)
	// 修改部门
	UpdateDept(context.Context, *DeptListItem) (*DeptListItem, error)
	// 删除部门
	DelDept(context.Context, *DeleteDept) (*emptypb.Empty, error)
	// 获取角色列表
	GetRoleList(context.Context, *RolePageParams) (*GetRoleListByPageReply, error)
	// 新增角色
	AddRole(context.Context, *RoleListItem) (*RoleListItem, error)
	// 修改角色
	UpdateRole(context.Context, *RoleListItem) (*RoleListItem, error)
	// 删除角色
	DelRole(context.Context, *DeleteRole) (*emptypb.Empty, error)
	// 设置角色状态 (未使用)
	SetRoleStatus(context.Context, *SetRoleStatusRequest) (*emptypb.Empty, error)
	// 改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	// /////////////////////////////////////////////////
	// 获取系统所有 api
	GetWalkRoute(context.Context, *emptypb.Empty) (*GetWalkRouteReply, error)
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseServer struct{}

func (UnimplementedBaseServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBaseServer) GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedBaseServer) GetAccessCodes(context.Context, *emptypb.Empty) (*GetAccessCodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessCodes not implemented")
}
func (UnimplementedBaseServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedBaseServer) GetMenuList(context.Context, *emptypb.Empty) (*GetSysMenuListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuList not implemented")
}
func (UnimplementedBaseServer) RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedBaseServer) ReLoadPolicy(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReLoadPolicy not implemented")
}
func (UnimplementedBaseServer) GetUserList(context.Context, *GetUserParams) (*GetUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedBaseServer) AddUser(context.Context, *UserListItem) (*UserListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedBaseServer) UpdateUser(context.Context, *UserListItem) (*UserListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBaseServer) DelUser(context.Context, *DeleteUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedBaseServer) IsUserExist(context.Context, *IsUserExistsRequest) (*IsUserExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserExist not implemented")
}
func (UnimplementedBaseServer) GetSysMenuList(context.Context, *MenuParams) (*GetSysMenuListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysMenuList not implemented")
}
func (UnimplementedBaseServer) IsMenuNameExists(context.Context, *IsMenuNameExistsRequest) (*IsMenuNameExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMenuNameExists not implemented")
}
func (UnimplementedBaseServer) IsMenuPathExists(context.Context, *IsMenuPathExistsRequest) (*IsMenuPathExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMenuPathExists not implemented")
}
func (UnimplementedBaseServer) CreateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedBaseServer) UpdateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedBaseServer) DeleteMenu(context.Context, *DeleteMenuRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedBaseServer) GetDeptList(context.Context, *emptypb.Empty) (*GetDeptListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeptList not implemented")
}
func (UnimplementedBaseServer) AddDept(context.Context, *DeptListItem) (*DeptListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDept not implemented")
}
func (UnimplementedBaseServer) UpdateDept(context.Context, *DeptListItem) (*DeptListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedBaseServer) DelDept(context.Context, *DeleteDept) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDept not implemented")
}
func (UnimplementedBaseServer) GetRoleList(context.Context, *RolePageParams) (*GetRoleListByPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedBaseServer) AddRole(context.Context, *RoleListItem) (*RoleListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedBaseServer) UpdateRole(context.Context, *RoleListItem) (*RoleListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedBaseServer) DelRole(context.Context, *DeleteRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedBaseServer) SetRoleStatus(context.Context, *SetRoleStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleStatus not implemented")
}
func (UnimplementedBaseServer) ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedBaseServer) GetWalkRoute(context.Context, *emptypb.Empty) (*GetWalkRouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalkRoute not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}
func (UnimplementedBaseServer) testEmbeddedByValue()              {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	// If the following call pancis, it indicates UnimplementedBaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetAccessCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetAccessCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetAccessCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetAccessCodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetMenuList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).RefreshToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_ReLoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).ReLoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_ReLoadPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).ReLoadPolicy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetUserList(ctx, req.(*GetUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).AddUser(ctx, req.(*UserListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).UpdateUser(ctx, req.(*UserListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_DelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).DelUser(ctx, req.(*DeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_IsUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).IsUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_IsUserExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).IsUserExist(ctx, req.(*IsUserExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetSysMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetSysMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetSysMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetSysMenuList(ctx, req.(*MenuParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_IsMenuNameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMenuNameExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).IsMenuNameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_IsMenuNameExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).IsMenuNameExists(ctx, req.(*IsMenuNameExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_IsMenuPathExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMenuPathExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).IsMenuPathExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_IsMenuPathExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).IsMenuPathExists(ctx, req.(*IsMenuPathExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).CreateMenu(ctx, req.(*SysMenuListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).UpdateMenu(ctx, req.(*SysMenuListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).DeleteMenu(ctx, req.(*DeleteMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetDeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetDeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetDeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetDeptList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_AddDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).AddDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_AddDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).AddDept(ctx, req.(*DeptListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).UpdateDept(ctx, req.(*DeptListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_DelDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).DelDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_DelDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).DelDept(ctx, req.(*DeleteDept))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetRoleList(ctx, req.(*RolePageParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).AddRole(ctx, req.(*RoleListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).UpdateRole(ctx, req.(*RoleListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_DelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).DelRole(ctx, req.(*DeleteRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_SetRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).SetRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_SetRoleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).SetRoleStatus(ctx, req.(*SetRoleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetWalkRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetWalkRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetWalkRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetWalkRoute(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.base_api.v1.Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Base_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Base_GetUserInfo_Handler,
		},
		{
			MethodName: "GetAccessCodes",
			Handler:    _Base_GetAccessCodes_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Base_Logout_Handler,
		},
		{
			MethodName: "GetMenuList",
			Handler:    _Base_GetMenuList_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Base_RefreshToken_Handler,
		},
		{
			MethodName: "ReLoadPolicy",
			Handler:    _Base_ReLoadPolicy_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Base_GetUserList_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Base_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Base_UpdateUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _Base_DelUser_Handler,
		},
		{
			MethodName: "IsUserExist",
			Handler:    _Base_IsUserExist_Handler,
		},
		{
			MethodName: "GetSysMenuList",
			Handler:    _Base_GetSysMenuList_Handler,
		},
		{
			MethodName: "IsMenuNameExists",
			Handler:    _Base_IsMenuNameExists_Handler,
		},
		{
			MethodName: "IsMenuPathExists",
			Handler:    _Base_IsMenuPathExists_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Base_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Base_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Base_DeleteMenu_Handler,
		},
		{
			MethodName: "GetDeptList",
			Handler:    _Base_GetDeptList_Handler,
		},
		{
			MethodName: "AddDept",
			Handler:    _Base_AddDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _Base_UpdateDept_Handler,
		},
		{
			MethodName: "DelDept",
			Handler:    _Base_DelDept_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _Base_GetRoleList_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _Base_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Base_UpdateRole_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _Base_DelRole_Handler,
		},
		{
			MethodName: "SetRoleStatus",
			Handler:    _Base_SetRoleStatus_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Base_ChangePassword_Handler,
		},
		{
			MethodName: "GetWalkRoute",
			Handler:    _Base_GetWalkRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base_api/v1/base.proto",
}
