// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/apiresources"
	"base-server/internal/data/ent/role"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiResourcesCreate is the builder for creating a ApiResources entity.
type ApiResourcesCreate struct {
	config
	mutation *ApiResourcesMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (arc *ApiResourcesCreate) SetCreateTime(t time.Time) *ApiResourcesCreate {
	arc.mutation.SetCreateTime(t)
	return arc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (arc *ApiResourcesCreate) SetNillableCreateTime(t *time.Time) *ApiResourcesCreate {
	if t != nil {
		arc.SetCreateTime(*t)
	}
	return arc
}

// SetUpdateTime sets the "update_time" field.
func (arc *ApiResourcesCreate) SetUpdateTime(t time.Time) *ApiResourcesCreate {
	arc.mutation.SetUpdateTime(t)
	return arc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (arc *ApiResourcesCreate) SetNillableUpdateTime(t *time.Time) *ApiResourcesCreate {
	if t != nil {
		arc.SetUpdateTime(*t)
	}
	return arc
}

// SetDescription sets the "description" field.
func (arc *ApiResourcesCreate) SetDescription(s string) *ApiResourcesCreate {
	arc.mutation.SetDescription(s)
	return arc
}

// SetPath sets the "path" field.
func (arc *ApiResourcesCreate) SetPath(s string) *ApiResourcesCreate {
	arc.mutation.SetPath(s)
	return arc
}

// SetMethod sets the "method" field.
func (arc *ApiResourcesCreate) SetMethod(s string) *ApiResourcesCreate {
	arc.mutation.SetMethod(s)
	return arc
}

// SetModule sets the "module" field.
func (arc *ApiResourcesCreate) SetModule(s string) *ApiResourcesCreate {
	arc.mutation.SetModule(s)
	return arc
}

// SetModuleDescription sets the "module_description" field.
func (arc *ApiResourcesCreate) SetModuleDescription(s string) *ApiResourcesCreate {
	arc.mutation.SetModuleDescription(s)
	return arc
}

// SetResourcesGroup sets the "resources_group" field.
func (arc *ApiResourcesCreate) SetResourcesGroup(s string) *ApiResourcesCreate {
	arc.mutation.SetResourcesGroup(s)
	return arc
}

// SetID sets the "id" field.
func (arc *ApiResourcesCreate) SetID(s string) *ApiResourcesCreate {
	arc.mutation.SetID(s)
	return arc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arc *ApiResourcesCreate) SetNillableID(s *string) *ApiResourcesCreate {
	if s != nil {
		arc.SetID(*s)
	}
	return arc
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (arc *ApiResourcesCreate) AddRoleIDs(ids ...int64) *ApiResourcesCreate {
	arc.mutation.AddRoleIDs(ids...)
	return arc
}

// AddRoles adds the "roles" edges to the Role entity.
func (arc *ApiResourcesCreate) AddRoles(r ...*Role) *ApiResourcesCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return arc.AddRoleIDs(ids...)
}

// Mutation returns the ApiResourcesMutation object of the builder.
func (arc *ApiResourcesCreate) Mutation() *ApiResourcesMutation {
	return arc.mutation
}

// Save creates the ApiResources in the database.
func (arc *ApiResourcesCreate) Save(ctx context.Context) (*ApiResources, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *ApiResourcesCreate) SaveX(ctx context.Context) *ApiResources {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *ApiResourcesCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *ApiResourcesCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *ApiResourcesCreate) defaults() {
	if _, ok := arc.mutation.CreateTime(); !ok {
		v := apiresources.DefaultCreateTime()
		arc.mutation.SetCreateTime(v)
	}
	if _, ok := arc.mutation.UpdateTime(); !ok {
		v := apiresources.DefaultUpdateTime()
		arc.mutation.SetUpdateTime(v)
	}
	if _, ok := arc.mutation.ID(); !ok {
		v := apiresources.DefaultID()
		arc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *ApiResourcesCreate) check() error {
	if _, ok := arc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ApiResources.create_time"`)}
	}
	if _, ok := arc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ApiResources.update_time"`)}
	}
	if _, ok := arc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ApiResources.description"`)}
	}
	if _, ok := arc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "ApiResources.path"`)}
	}
	if _, ok := arc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "ApiResources.method"`)}
	}
	if _, ok := arc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "ApiResources.module"`)}
	}
	if _, ok := arc.mutation.ModuleDescription(); !ok {
		return &ValidationError{Name: "module_description", err: errors.New(`ent: missing required field "ApiResources.module_description"`)}
	}
	if _, ok := arc.mutation.ResourcesGroup(); !ok {
		return &ValidationError{Name: "resources_group", err: errors.New(`ent: missing required field "ApiResources.resources_group"`)}
	}
	return nil
}

func (arc *ApiResourcesCreate) sqlSave(ctx context.Context) (*ApiResources, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ApiResources.ID type: %T", _spec.ID.Value)
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *ApiResourcesCreate) createSpec() (*ApiResources, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiResources{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(apiresources.Table, sqlgraph.NewFieldSpec(apiresources.FieldID, field.TypeString))
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arc.mutation.CreateTime(); ok {
		_spec.SetField(apiresources.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := arc.mutation.UpdateTime(); ok {
		_spec.SetField(apiresources.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := arc.mutation.Description(); ok {
		_spec.SetField(apiresources.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := arc.mutation.Path(); ok {
		_spec.SetField(apiresources.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := arc.mutation.Method(); ok {
		_spec.SetField(apiresources.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := arc.mutation.Module(); ok {
		_spec.SetField(apiresources.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := arc.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresources.FieldModuleDescription, field.TypeString, value)
		_node.ModuleDescription = value
	}
	if value, ok := arc.mutation.ResourcesGroup(); ok {
		_spec.SetField(apiresources.FieldResourcesGroup, field.TypeString, value)
		_node.ResourcesGroup = value
	}
	if nodes := arc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApiResourcesCreateBulk is the builder for creating many ApiResources entities in bulk.
type ApiResourcesCreateBulk struct {
	config
	err      error
	builders []*ApiResourcesCreate
}

// Save creates the ApiResources entities in the database.
func (arcb *ApiResourcesCreateBulk) Save(ctx context.Context) ([]*ApiResources, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*ApiResources, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiResourcesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *ApiResourcesCreateBulk) SaveX(ctx context.Context) []*ApiResources {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *ApiResourcesCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *ApiResourcesCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
