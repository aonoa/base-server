// Code generated by ent, DO NOT EDIT.

package rule

import (
	"base-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdateTime, v))
}

// Ptype applies equality check predicate on the "ptype" field. It's identical to PtypeEQ.
func Ptype(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldPtype, v))
}

// V0 applies equality check predicate on the "v0" field. It's identical to V0EQ.
func V0(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV0, v))
}

// V1 applies equality check predicate on the "v1" field. It's identical to V1EQ.
func V1(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV1, v))
}

// V2 applies equality check predicate on the "v2" field. It's identical to V2EQ.
func V2(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV2, v))
}

// V3 applies equality check predicate on the "v3" field. It's identical to V3EQ.
func V3(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV3, v))
}

// V4 applies equality check predicate on the "v4" field. It's identical to V4EQ.
func V4(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV4, v))
}

// V5 applies equality check predicate on the "v5" field. It's identical to V5EQ.
func V5(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV5, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldUpdateTime, v))
}

// PtypeEQ applies the EQ predicate on the "ptype" field.
func PtypeEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldPtype, v))
}

// PtypeNEQ applies the NEQ predicate on the "ptype" field.
func PtypeNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldPtype, v))
}

// PtypeIn applies the In predicate on the "ptype" field.
func PtypeIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldPtype, vs...))
}

// PtypeNotIn applies the NotIn predicate on the "ptype" field.
func PtypeNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldPtype, vs...))
}

// PtypeGT applies the GT predicate on the "ptype" field.
func PtypeGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldPtype, v))
}

// PtypeGTE applies the GTE predicate on the "ptype" field.
func PtypeGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldPtype, v))
}

// PtypeLT applies the LT predicate on the "ptype" field.
func PtypeLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldPtype, v))
}

// PtypeLTE applies the LTE predicate on the "ptype" field.
func PtypeLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldPtype, v))
}

// PtypeContains applies the Contains predicate on the "ptype" field.
func PtypeContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldPtype, v))
}

// PtypeHasPrefix applies the HasPrefix predicate on the "ptype" field.
func PtypeHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldPtype, v))
}

// PtypeHasSuffix applies the HasSuffix predicate on the "ptype" field.
func PtypeHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldPtype, v))
}

// PtypeEqualFold applies the EqualFold predicate on the "ptype" field.
func PtypeEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldPtype, v))
}

// PtypeContainsFold applies the ContainsFold predicate on the "ptype" field.
func PtypeContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldPtype, v))
}

// V0EQ applies the EQ predicate on the "v0" field.
func V0EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV0, v))
}

// V0NEQ applies the NEQ predicate on the "v0" field.
func V0NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV0, v))
}

// V0In applies the In predicate on the "v0" field.
func V0In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV0, vs...))
}

// V0NotIn applies the NotIn predicate on the "v0" field.
func V0NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV0, vs...))
}

// V0GT applies the GT predicate on the "v0" field.
func V0GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV0, v))
}

// V0GTE applies the GTE predicate on the "v0" field.
func V0GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV0, v))
}

// V0LT applies the LT predicate on the "v0" field.
func V0LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV0, v))
}

// V0LTE applies the LTE predicate on the "v0" field.
func V0LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV0, v))
}

// V0Contains applies the Contains predicate on the "v0" field.
func V0Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV0, v))
}

// V0HasPrefix applies the HasPrefix predicate on the "v0" field.
func V0HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV0, v))
}

// V0HasSuffix applies the HasSuffix predicate on the "v0" field.
func V0HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV0, v))
}

// V0EqualFold applies the EqualFold predicate on the "v0" field.
func V0EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV0, v))
}

// V0ContainsFold applies the ContainsFold predicate on the "v0" field.
func V0ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV0, v))
}

// V1EQ applies the EQ predicate on the "v1" field.
func V1EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV1, v))
}

// V1NEQ applies the NEQ predicate on the "v1" field.
func V1NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV1, v))
}

// V1In applies the In predicate on the "v1" field.
func V1In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV1, vs...))
}

// V1NotIn applies the NotIn predicate on the "v1" field.
func V1NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV1, vs...))
}

// V1GT applies the GT predicate on the "v1" field.
func V1GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV1, v))
}

// V1GTE applies the GTE predicate on the "v1" field.
func V1GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV1, v))
}

// V1LT applies the LT predicate on the "v1" field.
func V1LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV1, v))
}

// V1LTE applies the LTE predicate on the "v1" field.
func V1LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV1, v))
}

// V1Contains applies the Contains predicate on the "v1" field.
func V1Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV1, v))
}

// V1HasPrefix applies the HasPrefix predicate on the "v1" field.
func V1HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV1, v))
}

// V1HasSuffix applies the HasSuffix predicate on the "v1" field.
func V1HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV1, v))
}

// V1EqualFold applies the EqualFold predicate on the "v1" field.
func V1EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV1, v))
}

// V1ContainsFold applies the ContainsFold predicate on the "v1" field.
func V1ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV1, v))
}

// V2EQ applies the EQ predicate on the "v2" field.
func V2EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV2, v))
}

// V2NEQ applies the NEQ predicate on the "v2" field.
func V2NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV2, v))
}

// V2In applies the In predicate on the "v2" field.
func V2In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV2, vs...))
}

// V2NotIn applies the NotIn predicate on the "v2" field.
func V2NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV2, vs...))
}

// V2GT applies the GT predicate on the "v2" field.
func V2GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV2, v))
}

// V2GTE applies the GTE predicate on the "v2" field.
func V2GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV2, v))
}

// V2LT applies the LT predicate on the "v2" field.
func V2LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV2, v))
}

// V2LTE applies the LTE predicate on the "v2" field.
func V2LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV2, v))
}

// V2Contains applies the Contains predicate on the "v2" field.
func V2Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV2, v))
}

// V2HasPrefix applies the HasPrefix predicate on the "v2" field.
func V2HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV2, v))
}

// V2HasSuffix applies the HasSuffix predicate on the "v2" field.
func V2HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV2, v))
}

// V2EqualFold applies the EqualFold predicate on the "v2" field.
func V2EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV2, v))
}

// V2ContainsFold applies the ContainsFold predicate on the "v2" field.
func V2ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV2, v))
}

// V3EQ applies the EQ predicate on the "v3" field.
func V3EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV3, v))
}

// V3NEQ applies the NEQ predicate on the "v3" field.
func V3NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV3, v))
}

// V3In applies the In predicate on the "v3" field.
func V3In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV3, vs...))
}

// V3NotIn applies the NotIn predicate on the "v3" field.
func V3NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV3, vs...))
}

// V3GT applies the GT predicate on the "v3" field.
func V3GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV3, v))
}

// V3GTE applies the GTE predicate on the "v3" field.
func V3GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV3, v))
}

// V3LT applies the LT predicate on the "v3" field.
func V3LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV3, v))
}

// V3LTE applies the LTE predicate on the "v3" field.
func V3LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV3, v))
}

// V3Contains applies the Contains predicate on the "v3" field.
func V3Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV3, v))
}

// V3HasPrefix applies the HasPrefix predicate on the "v3" field.
func V3HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV3, v))
}

// V3HasSuffix applies the HasSuffix predicate on the "v3" field.
func V3HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV3, v))
}

// V3EqualFold applies the EqualFold predicate on the "v3" field.
func V3EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV3, v))
}

// V3ContainsFold applies the ContainsFold predicate on the "v3" field.
func V3ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV3, v))
}

// V4EQ applies the EQ predicate on the "v4" field.
func V4EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV4, v))
}

// V4NEQ applies the NEQ predicate on the "v4" field.
func V4NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV4, v))
}

// V4In applies the In predicate on the "v4" field.
func V4In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV4, vs...))
}

// V4NotIn applies the NotIn predicate on the "v4" field.
func V4NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV4, vs...))
}

// V4GT applies the GT predicate on the "v4" field.
func V4GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV4, v))
}

// V4GTE applies the GTE predicate on the "v4" field.
func V4GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV4, v))
}

// V4LT applies the LT predicate on the "v4" field.
func V4LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV4, v))
}

// V4LTE applies the LTE predicate on the "v4" field.
func V4LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV4, v))
}

// V4Contains applies the Contains predicate on the "v4" field.
func V4Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV4, v))
}

// V4HasPrefix applies the HasPrefix predicate on the "v4" field.
func V4HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV4, v))
}

// V4HasSuffix applies the HasSuffix predicate on the "v4" field.
func V4HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV4, v))
}

// V4EqualFold applies the EqualFold predicate on the "v4" field.
func V4EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV4, v))
}

// V4ContainsFold applies the ContainsFold predicate on the "v4" field.
func V4ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV4, v))
}

// V5EQ applies the EQ predicate on the "v5" field.
func V5EQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldV5, v))
}

// V5NEQ applies the NEQ predicate on the "v5" field.
func V5NEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldV5, v))
}

// V5In applies the In predicate on the "v5" field.
func V5In(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldV5, vs...))
}

// V5NotIn applies the NotIn predicate on the "v5" field.
func V5NotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldV5, vs...))
}

// V5GT applies the GT predicate on the "v5" field.
func V5GT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldV5, v))
}

// V5GTE applies the GTE predicate on the "v5" field.
func V5GTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldV5, v))
}

// V5LT applies the LT predicate on the "v5" field.
func V5LT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldV5, v))
}

// V5LTE applies the LTE predicate on the "v5" field.
func V5LTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldV5, v))
}

// V5Contains applies the Contains predicate on the "v5" field.
func V5Contains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldV5, v))
}

// V5HasPrefix applies the HasPrefix predicate on the "v5" field.
func V5HasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldV5, v))
}

// V5HasSuffix applies the HasSuffix predicate on the "v5" field.
func V5HasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldV5, v))
}

// V5EqualFold applies the EqualFold predicate on the "v5" field.
func V5EqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldV5, v))
}

// V5ContainsFold applies the ContainsFold predicate on the "v5" field.
func V5ContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldV5, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.NotPredicates(p))
}
