// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/apiresources"
	"base-server/internal/data/ent/dept"
	"base-server/internal/data/ent/menu"
	"base-server/internal/data/ent/predicate"
	"base-server/internal/data/ent/resource"
	"base-server/internal/data/ent/role"
	"base-server/internal/data/ent/syslogrecord"
	"base-server/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApiResources = "ApiResources"
	TypeDept         = "Dept"
	TypeMenu         = "Menu"
	TypeResource     = "Resource"
	TypeRole         = "Role"
	TypeSysLogRecord = "SysLogRecord"
	TypeUser         = "User"
)

// ApiResourcesMutation represents an operation that mutates the ApiResources nodes in the graph.
type ApiResourcesMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	create_time        *time.Time
	update_time        *time.Time
	description        *string
	_path              *string
	method             *string
	module             *string
	module_description *string
	resources_group    *string
	clearedFields      map[string]struct{}
	roles              map[int64]struct{}
	removedroles       map[int64]struct{}
	clearedroles       bool
	done               bool
	oldValue           func(context.Context) (*ApiResources, error)
	predicates         []predicate.ApiResources
}

var _ ent.Mutation = (*ApiResourcesMutation)(nil)

// apiresourcesOption allows management of the mutation configuration using functional options.
type apiresourcesOption func(*ApiResourcesMutation)

// newApiResourcesMutation creates new mutation for the ApiResources entity.
func newApiResourcesMutation(c config, op Op, opts ...apiresourcesOption) *ApiResourcesMutation {
	m := &ApiResourcesMutation{
		config:        c,
		op:            op,
		typ:           TypeApiResources,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApiResourcesID sets the ID field of the mutation.
func withApiResourcesID(id string) apiresourcesOption {
	return func(m *ApiResourcesMutation) {
		var (
			err   error
			once  sync.Once
			value *ApiResources
		)
		m.oldValue = func(ctx context.Context) (*ApiResources, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApiResources.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApiResources sets the old ApiResources of the mutation.
func withApiResources(node *ApiResources) apiresourcesOption {
	return func(m *ApiResourcesMutation) {
		m.oldValue = func(context.Context) (*ApiResources, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApiResourcesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApiResourcesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApiResources entities.
func (m *ApiResourcesMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApiResourcesMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApiResourcesMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApiResources.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ApiResourcesMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ApiResourcesMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ApiResourcesMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ApiResourcesMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ApiResourcesMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ApiResourcesMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDescription sets the "description" field.
func (m *ApiResourcesMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ApiResourcesMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ApiResourcesMutation) ResetDescription() {
	m.description = nil
}

// SetPath sets the "path" field.
func (m *ApiResourcesMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ApiResourcesMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ApiResourcesMutation) ResetPath() {
	m._path = nil
}

// SetMethod sets the "method" field.
func (m *ApiResourcesMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *ApiResourcesMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *ApiResourcesMutation) ResetMethod() {
	m.method = nil
}

// SetModule sets the "module" field.
func (m *ApiResourcesMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *ApiResourcesMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ResetModule resets all changes to the "module" field.
func (m *ApiResourcesMutation) ResetModule() {
	m.module = nil
}

// SetModuleDescription sets the "module_description" field.
func (m *ApiResourcesMutation) SetModuleDescription(s string) {
	m.module_description = &s
}

// ModuleDescription returns the value of the "module_description" field in the mutation.
func (m *ApiResourcesMutation) ModuleDescription() (r string, exists bool) {
	v := m.module_description
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleDescription returns the old "module_description" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldModuleDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleDescription: %w", err)
	}
	return oldValue.ModuleDescription, nil
}

// ResetModuleDescription resets all changes to the "module_description" field.
func (m *ApiResourcesMutation) ResetModuleDescription() {
	m.module_description = nil
}

// SetResourcesGroup sets the "resources_group" field.
func (m *ApiResourcesMutation) SetResourcesGroup(s string) {
	m.resources_group = &s
}

// ResourcesGroup returns the value of the "resources_group" field in the mutation.
func (m *ApiResourcesMutation) ResourcesGroup() (r string, exists bool) {
	v := m.resources_group
	if v == nil {
		return
	}
	return *v, true
}

// OldResourcesGroup returns the old "resources_group" field's value of the ApiResources entity.
// If the ApiResources object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiResourcesMutation) OldResourcesGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourcesGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourcesGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourcesGroup: %w", err)
	}
	return oldValue.ResourcesGroup, nil
}

// ResetResourcesGroup resets all changes to the "resources_group" field.
func (m *ApiResourcesMutation) ResetResourcesGroup() {
	m.resources_group = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *ApiResourcesMutation) AddRoleIDs(ids ...int64) {
	if m.roles == nil {
		m.roles = make(map[int64]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *ApiResourcesMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *ApiResourcesMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *ApiResourcesMutation) RemoveRoleIDs(ids ...int64) {
	if m.removedroles == nil {
		m.removedroles = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *ApiResourcesMutation) RemovedRolesIDs() (ids []int64) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *ApiResourcesMutation) RolesIDs() (ids []int64) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *ApiResourcesMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the ApiResourcesMutation builder.
func (m *ApiResourcesMutation) Where(ps ...predicate.ApiResources) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApiResourcesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApiResourcesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApiResources, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApiResourcesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApiResourcesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApiResources).
func (m *ApiResourcesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApiResourcesMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, apiresources.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, apiresources.FieldUpdateTime)
	}
	if m.description != nil {
		fields = append(fields, apiresources.FieldDescription)
	}
	if m._path != nil {
		fields = append(fields, apiresources.FieldPath)
	}
	if m.method != nil {
		fields = append(fields, apiresources.FieldMethod)
	}
	if m.module != nil {
		fields = append(fields, apiresources.FieldModule)
	}
	if m.module_description != nil {
		fields = append(fields, apiresources.FieldModuleDescription)
	}
	if m.resources_group != nil {
		fields = append(fields, apiresources.FieldResourcesGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApiResourcesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apiresources.FieldCreateTime:
		return m.CreateTime()
	case apiresources.FieldUpdateTime:
		return m.UpdateTime()
	case apiresources.FieldDescription:
		return m.Description()
	case apiresources.FieldPath:
		return m.Path()
	case apiresources.FieldMethod:
		return m.Method()
	case apiresources.FieldModule:
		return m.Module()
	case apiresources.FieldModuleDescription:
		return m.ModuleDescription()
	case apiresources.FieldResourcesGroup:
		return m.ResourcesGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApiResourcesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apiresources.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case apiresources.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case apiresources.FieldDescription:
		return m.OldDescription(ctx)
	case apiresources.FieldPath:
		return m.OldPath(ctx)
	case apiresources.FieldMethod:
		return m.OldMethod(ctx)
	case apiresources.FieldModule:
		return m.OldModule(ctx)
	case apiresources.FieldModuleDescription:
		return m.OldModuleDescription(ctx)
	case apiresources.FieldResourcesGroup:
		return m.OldResourcesGroup(ctx)
	}
	return nil, fmt.Errorf("unknown ApiResources field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiResourcesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apiresources.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case apiresources.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case apiresources.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case apiresources.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case apiresources.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case apiresources.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case apiresources.FieldModuleDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleDescription(v)
		return nil
	case apiresources.FieldResourcesGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourcesGroup(v)
		return nil
	}
	return fmt.Errorf("unknown ApiResources field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApiResourcesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApiResourcesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiResourcesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApiResources numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApiResourcesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApiResourcesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApiResourcesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApiResources nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApiResourcesMutation) ResetField(name string) error {
	switch name {
	case apiresources.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case apiresources.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case apiresources.FieldDescription:
		m.ResetDescription()
		return nil
	case apiresources.FieldPath:
		m.ResetPath()
		return nil
	case apiresources.FieldMethod:
		m.ResetMethod()
		return nil
	case apiresources.FieldModule:
		m.ResetModule()
		return nil
	case apiresources.FieldModuleDescription:
		m.ResetModuleDescription()
		return nil
	case apiresources.FieldResourcesGroup:
		m.ResetResourcesGroup()
		return nil
	}
	return fmt.Errorf("unknown ApiResources field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApiResourcesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, apiresources.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApiResourcesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apiresources.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApiResourcesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, apiresources.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApiResourcesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case apiresources.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApiResourcesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, apiresources.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApiResourcesMutation) EdgeCleared(name string) bool {
	switch name {
	case apiresources.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApiResourcesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ApiResources unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApiResourcesMutation) ResetEdge(name string) error {
	switch name {
	case apiresources.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown ApiResources edge %s", name)
}

// DeptMutation represents an operation that mutates the Dept nodes in the graph.
type DeptMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	sort            *int32
	addsort         *int32
	status          *bool
	desc            *string
	extension       *string
	dom             *int64
	adddom          *int64
	clearedFields   map[string]struct{}
	users           map[uuid.UUID]struct{}
	removedusers    map[uuid.UUID]struct{}
	clearedusers    bool
	roles           *int64
	clearedroles    bool
	parent          *int64
	clearedparent   bool
	children        map[int64]struct{}
	removedchildren map[int64]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Dept, error)
	predicates      []predicate.Dept
}

var _ ent.Mutation = (*DeptMutation)(nil)

// deptOption allows management of the mutation configuration using functional options.
type deptOption func(*DeptMutation)

// newDeptMutation creates new mutation for the Dept entity.
func newDeptMutation(c config, op Op, opts ...deptOption) *DeptMutation {
	m := &DeptMutation{
		config:        c,
		op:            op,
		typ:           TypeDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeptID sets the ID field of the mutation.
func withDeptID(id int64) deptOption {
	return func(m *DeptMutation) {
		var (
			err   error
			once  sync.Once
			value *Dept
		)
		m.oldValue = func(ctx context.Context) (*Dept, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDept sets the old Dept of the mutation.
func withDept(node *Dept) deptOption {
	return func(m *DeptMutation) {
		m.oldValue = func(context.Context) (*Dept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dept entities.
func (m *DeptMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeptMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeptMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dept.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DeptMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DeptMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DeptMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DeptMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DeptMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DeptMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *DeptMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeptMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DeptMutation) ResetName() {
	m.name = nil
}

// SetSort sets the "sort" field.
func (m *DeptMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *DeptMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *DeptMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *DeptMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *DeptMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetStatus sets the "status" field.
func (m *DeptMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *DeptMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DeptMutation) ResetStatus() {
	m.status = nil
}

// SetDesc sets the "desc" field.
func (m *DeptMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *DeptMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *DeptMutation) ResetDesc() {
	m.desc = nil
}

// SetExtension sets the "extension" field.
func (m *DeptMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *DeptMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *DeptMutation) ResetExtension() {
	m.extension = nil
}

// SetDom sets the "dom" field.
func (m *DeptMutation) SetDom(i int64) {
	m.dom = &i
	m.adddom = nil
}

// Dom returns the value of the "dom" field in the mutation.
func (m *DeptMutation) Dom() (r int64, exists bool) {
	v := m.dom
	if v == nil {
		return
	}
	return *v, true
}

// OldDom returns the old "dom" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldDom(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDom: %w", err)
	}
	return oldValue.Dom, nil
}

// AddDom adds i to the "dom" field.
func (m *DeptMutation) AddDom(i int64) {
	if m.adddom != nil {
		*m.adddom += i
	} else {
		m.adddom = &i
	}
}

// AddedDom returns the value that was added to the "dom" field in this mutation.
func (m *DeptMutation) AddedDom() (r int64, exists bool) {
	v := m.adddom
	if v == nil {
		return
	}
	return *v, true
}

// ResetDom resets all changes to the "dom" field.
func (m *DeptMutation) ResetDom() {
	m.dom = nil
	m.adddom = nil
}

// SetPid sets the "pid" field.
func (m *DeptMutation) SetPid(i int64) {
	m.parent = &i
}

// Pid returns the value of the "pid" field in the mutation.
func (m *DeptMutation) Pid() (r int64, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldPid returns the old "pid" field's value of the Dept entity.
// If the Dept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeptMutation) OldPid(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPid: %w", err)
	}
	return oldValue.Pid, nil
}

// ClearPid clears the value of the "pid" field.
func (m *DeptMutation) ClearPid() {
	m.parent = nil
	m.clearedFields[dept.FieldPid] = struct{}{}
}

// PidCleared returns if the "pid" field was cleared in this mutation.
func (m *DeptMutation) PidCleared() bool {
	_, ok := m.clearedFields[dept.FieldPid]
	return ok
}

// ResetPid resets all changes to the "pid" field.
func (m *DeptMutation) ResetPid() {
	m.parent = nil
	delete(m.clearedFields, dept.FieldPid)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *DeptMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *DeptMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *DeptMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *DeptMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *DeptMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *DeptMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *DeptMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetRolesID sets the "roles" edge to the Role entity by id.
func (m *DeptMutation) SetRolesID(id int64) {
	m.roles = &id
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *DeptMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *DeptMutation) RolesCleared() bool {
	return m.clearedroles
}

// RolesID returns the "roles" edge ID in the mutation.
func (m *DeptMutation) RolesID() (id int64, exists bool) {
	if m.roles != nil {
		return *m.roles, true
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RolesID instead. It exists only for internal usage by the builders.
func (m *DeptMutation) RolesIDs() (ids []int64) {
	if id := m.roles; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *DeptMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
}

// SetParentID sets the "parent" edge to the Dept entity by id.
func (m *DeptMutation) SetParentID(id int64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Dept entity.
func (m *DeptMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[dept.FieldPid] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Dept entity was cleared.
func (m *DeptMutation) ParentCleared() bool {
	return m.PidCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *DeptMutation) ParentID() (id int64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *DeptMutation) ParentIDs() (ids []int64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *DeptMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Dept entity by ids.
func (m *DeptMutation) AddChildIDs(ids ...int64) {
	if m.children == nil {
		m.children = make(map[int64]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Dept entity.
func (m *DeptMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Dept entity was cleared.
func (m *DeptMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Dept entity by IDs.
func (m *DeptMutation) RemoveChildIDs(ids ...int64) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Dept entity.
func (m *DeptMutation) RemovedChildrenIDs() (ids []int64) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *DeptMutation) ChildrenIDs() (ids []int64) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *DeptMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the DeptMutation builder.
func (m *DeptMutation) Where(ps ...predicate.Dept) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dept, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dept).
func (m *DeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeptMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, dept.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, dept.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, dept.FieldName)
	}
	if m.sort != nil {
		fields = append(fields, dept.FieldSort)
	}
	if m.status != nil {
		fields = append(fields, dept.FieldStatus)
	}
	if m.desc != nil {
		fields = append(fields, dept.FieldDesc)
	}
	if m.extension != nil {
		fields = append(fields, dept.FieldExtension)
	}
	if m.dom != nil {
		fields = append(fields, dept.FieldDom)
	}
	if m.parent != nil {
		fields = append(fields, dept.FieldPid)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dept.FieldCreateTime:
		return m.CreateTime()
	case dept.FieldUpdateTime:
		return m.UpdateTime()
	case dept.FieldName:
		return m.Name()
	case dept.FieldSort:
		return m.Sort()
	case dept.FieldStatus:
		return m.Status()
	case dept.FieldDesc:
		return m.Desc()
	case dept.FieldExtension:
		return m.Extension()
	case dept.FieldDom:
		return m.Dom()
	case dept.FieldPid:
		return m.Pid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dept.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case dept.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case dept.FieldName:
		return m.OldName(ctx)
	case dept.FieldSort:
		return m.OldSort(ctx)
	case dept.FieldStatus:
		return m.OldStatus(ctx)
	case dept.FieldDesc:
		return m.OldDesc(ctx)
	case dept.FieldExtension:
		return m.OldExtension(ctx)
	case dept.FieldDom:
		return m.OldDom(ctx)
	case dept.FieldPid:
		return m.OldPid(ctx)
	}
	return nil, fmt.Errorf("unknown Dept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dept.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case dept.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case dept.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case dept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case dept.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case dept.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case dept.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case dept.FieldDom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDom(v)
		return nil
	case dept.FieldPid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPid(v)
		return nil
	}
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeptMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, dept.FieldSort)
	}
	if m.adddom != nil {
		fields = append(fields, dept.FieldDom)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dept.FieldSort:
		return m.AddedSort()
	case dept.FieldDom:
		return m.AddedDom()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case dept.FieldDom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDom(v)
		return nil
	}
	return fmt.Errorf("unknown Dept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dept.FieldPid) {
		fields = append(fields, dept.FieldPid)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeptMutation) ClearField(name string) error {
	switch name {
	case dept.FieldPid:
		m.ClearPid()
		return nil
	}
	return fmt.Errorf("unknown Dept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeptMutation) ResetField(name string) error {
	switch name {
	case dept.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case dept.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case dept.FieldName:
		m.ResetName()
		return nil
	case dept.FieldSort:
		m.ResetSort()
		return nil
	case dept.FieldStatus:
		m.ResetStatus()
		return nil
	case dept.FieldDesc:
		m.ResetDesc()
		return nil
	case dept.FieldExtension:
		m.ResetExtension()
		return nil
	case dept.FieldDom:
		m.ResetDom()
		return nil
	case dept.FieldPid:
		m.ResetPid()
		return nil
	}
	return fmt.Errorf("unknown Dept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.users != nil {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.roles != nil {
		edges = append(edges, dept.EdgeRoles)
	}
	if m.parent != nil {
		edges = append(edges, dept.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, dept.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case dept.EdgeRoles:
		if id := m.roles; id != nil {
			return []ent.Value{*id}
		}
	case dept.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case dept.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedusers != nil {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.removedchildren != nil {
		edges = append(edges, dept.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case dept.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedusers {
		edges = append(edges, dept.EdgeUsers)
	}
	if m.clearedroles {
		edges = append(edges, dept.EdgeRoles)
	}
	if m.clearedparent {
		edges = append(edges, dept.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, dept.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeptMutation) EdgeCleared(name string) bool {
	switch name {
	case dept.EdgeUsers:
		return m.clearedusers
	case dept.EdgeRoles:
		return m.clearedroles
	case dept.EdgeParent:
		return m.clearedparent
	case dept.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeptMutation) ClearEdge(name string) error {
	switch name {
	case dept.EdgeRoles:
		m.ClearRoles()
		return nil
	case dept.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Dept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeptMutation) ResetEdge(name string) error {
	switch name {
	case dept.EdgeUsers:
		m.ResetUsers()
		return nil
	case dept.EdgeRoles:
		m.ResetRoles()
		return nil
	case dept.EdgeParent:
		m.ResetParent()
		return nil
	case dept.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Dept edge %s", name)
}

// MenuMutation represents an operation that mutates the Menu nodes in the graph.
type MenuMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	create_time              *time.Time
	update_time              *time.Time
	pid                      *int64
	addpid                   *int64
	_type                    *string
	status                   *bool
	_path                    *string
	redirect                 *string
	alias                    *string
	name                     *string
	component                *string
	icon                     *string
	title                    *string
	_order                   *int32
	add_order                *int32
	openInNewWindow          *bool
	noBasicLayout            *bool
	menuVisibleWithForbidden *bool
	link                     *string
	iframeSrc                *string
	activeIcon               *string
	activePath               *string
	maxNumOfOpenTab          *int16
	addmaxNumOfOpenTab       *int16
	keepalive                *bool
	ignoreAccess             *bool
	authority                *string
	affixTab                 *bool
	affixTabOrder            *int16
	addaffixTabOrder         *int16
	hideInMenu               *bool
	hideInTab                *bool
	hideInBreadcrumb         *bool
	hideChildrenInMenu       *bool
	fullPathKey              *bool
	badge                    *string
	badgeType                *string
	badgeVariants            *string
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*Menu, error)
	predicates               []predicate.Menu
}

var _ ent.Mutation = (*MenuMutation)(nil)

// menuOption allows management of the mutation configuration using functional options.
type menuOption func(*MenuMutation)

// newMenuMutation creates new mutation for the Menu entity.
func newMenuMutation(c config, op Op, opts ...menuOption) *MenuMutation {
	m := &MenuMutation{
		config:        c,
		op:            op,
		typ:           TypeMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuID sets the ID field of the mutation.
func withMenuID(id int64) menuOption {
	return func(m *MenuMutation) {
		var (
			err   error
			once  sync.Once
			value *Menu
		)
		m.oldValue = func(ctx context.Context) (*Menu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Menu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenu sets the old Menu of the mutation.
func withMenu(node *Menu) menuOption {
	return func(m *MenuMutation) {
		m.oldValue = func(context.Context) (*Menu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Menu entities.
func (m *MenuMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MenuMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MenuMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Menu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *MenuMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MenuMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MenuMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MenuMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MenuMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MenuMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPid sets the "pid" field.
func (m *MenuMutation) SetPid(i int64) {
	m.pid = &i
	m.addpid = nil
}

// Pid returns the value of the "pid" field in the mutation.
func (m *MenuMutation) Pid() (r int64, exists bool) {
	v := m.pid
	if v == nil {
		return
	}
	return *v, true
}

// OldPid returns the old "pid" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldPid(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPid: %w", err)
	}
	return oldValue.Pid, nil
}

// AddPid adds i to the "pid" field.
func (m *MenuMutation) AddPid(i int64) {
	if m.addpid != nil {
		*m.addpid += i
	} else {
		m.addpid = &i
	}
}

// AddedPid returns the value that was added to the "pid" field in this mutation.
func (m *MenuMutation) AddedPid() (r int64, exists bool) {
	v := m.addpid
	if v == nil {
		return
	}
	return *v, true
}

// ResetPid resets all changes to the "pid" field.
func (m *MenuMutation) ResetPid() {
	m.pid = nil
	m.addpid = nil
}

// SetType sets the "type" field.
func (m *MenuMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MenuMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MenuMutation) ResetType() {
	m._type = nil
}

// SetStatus sets the "status" field.
func (m *MenuMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *MenuMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MenuMutation) ResetStatus() {
	m.status = nil
}

// SetPath sets the "path" field.
func (m *MenuMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *MenuMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *MenuMutation) ResetPath() {
	m._path = nil
}

// SetRedirect sets the "redirect" field.
func (m *MenuMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the value of the "redirect" field in the mutation.
func (m *MenuMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirect returns the old "redirect" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldRedirect(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirect: %w", err)
	}
	return oldValue.Redirect, nil
}

// ResetRedirect resets all changes to the "redirect" field.
func (m *MenuMutation) ResetRedirect() {
	m.redirect = nil
}

// SetAlias sets the "alias" field.
func (m *MenuMutation) SetAlias(s string) {
	m.alias = &s
}

// Alias returns the value of the "alias" field in the mutation.
func (m *MenuMutation) Alias() (r string, exists bool) {
	v := m.alias
	if v == nil {
		return
	}
	return *v, true
}

// OldAlias returns the old "alias" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldAlias(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlias is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlias requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlias: %w", err)
	}
	return oldValue.Alias, nil
}

// ResetAlias resets all changes to the "alias" field.
func (m *MenuMutation) ResetAlias() {
	m.alias = nil
}

// SetName sets the "name" field.
func (m *MenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MenuMutation) ResetName() {
	m.name = nil
}

// SetComponent sets the "component" field.
func (m *MenuMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *MenuMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ResetComponent resets all changes to the "component" field.
func (m *MenuMutation) ResetComponent() {
	m.component = nil
}

// SetIcon sets the "icon" field.
func (m *MenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *MenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *MenuMutation) ResetIcon() {
	m.icon = nil
}

// SetTitle sets the "title" field.
func (m *MenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MenuMutation) ResetTitle() {
	m.title = nil
}

// SetOrder sets the "order" field.
func (m *MenuMutation) SetOrder(i int32) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *MenuMutation) Order() (r int32, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldOrder(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *MenuMutation) AddOrder(i int32) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *MenuMutation) AddedOrder() (r int32, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *MenuMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetOpenInNewWindow sets the "openInNewWindow" field.
func (m *MenuMutation) SetOpenInNewWindow(b bool) {
	m.openInNewWindow = &b
}

// OpenInNewWindow returns the value of the "openInNewWindow" field in the mutation.
func (m *MenuMutation) OpenInNewWindow() (r bool, exists bool) {
	v := m.openInNewWindow
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenInNewWindow returns the old "openInNewWindow" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldOpenInNewWindow(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpenInNewWindow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpenInNewWindow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenInNewWindow: %w", err)
	}
	return oldValue.OpenInNewWindow, nil
}

// ResetOpenInNewWindow resets all changes to the "openInNewWindow" field.
func (m *MenuMutation) ResetOpenInNewWindow() {
	m.openInNewWindow = nil
}

// SetNoBasicLayout sets the "noBasicLayout" field.
func (m *MenuMutation) SetNoBasicLayout(b bool) {
	m.noBasicLayout = &b
}

// NoBasicLayout returns the value of the "noBasicLayout" field in the mutation.
func (m *MenuMutation) NoBasicLayout() (r bool, exists bool) {
	v := m.noBasicLayout
	if v == nil {
		return
	}
	return *v, true
}

// OldNoBasicLayout returns the old "noBasicLayout" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldNoBasicLayout(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNoBasicLayout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNoBasicLayout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoBasicLayout: %w", err)
	}
	return oldValue.NoBasicLayout, nil
}

// ResetNoBasicLayout resets all changes to the "noBasicLayout" field.
func (m *MenuMutation) ResetNoBasicLayout() {
	m.noBasicLayout = nil
}

// SetMenuVisibleWithForbidden sets the "menuVisibleWithForbidden" field.
func (m *MenuMutation) SetMenuVisibleWithForbidden(b bool) {
	m.menuVisibleWithForbidden = &b
}

// MenuVisibleWithForbidden returns the value of the "menuVisibleWithForbidden" field in the mutation.
func (m *MenuMutation) MenuVisibleWithForbidden() (r bool, exists bool) {
	v := m.menuVisibleWithForbidden
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuVisibleWithForbidden returns the old "menuVisibleWithForbidden" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldMenuVisibleWithForbidden(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuVisibleWithForbidden is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuVisibleWithForbidden requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuVisibleWithForbidden: %w", err)
	}
	return oldValue.MenuVisibleWithForbidden, nil
}

// ResetMenuVisibleWithForbidden resets all changes to the "menuVisibleWithForbidden" field.
func (m *MenuMutation) ResetMenuVisibleWithForbidden() {
	m.menuVisibleWithForbidden = nil
}

// SetLink sets the "link" field.
func (m *MenuMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *MenuMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *MenuMutation) ResetLink() {
	m.link = nil
}

// SetIframeSrc sets the "iframeSrc" field.
func (m *MenuMutation) SetIframeSrc(s string) {
	m.iframeSrc = &s
}

// IframeSrc returns the value of the "iframeSrc" field in the mutation.
func (m *MenuMutation) IframeSrc() (r string, exists bool) {
	v := m.iframeSrc
	if v == nil {
		return
	}
	return *v, true
}

// OldIframeSrc returns the old "iframeSrc" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIframeSrc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIframeSrc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIframeSrc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIframeSrc: %w", err)
	}
	return oldValue.IframeSrc, nil
}

// ResetIframeSrc resets all changes to the "iframeSrc" field.
func (m *MenuMutation) ResetIframeSrc() {
	m.iframeSrc = nil
}

// SetActiveIcon sets the "activeIcon" field.
func (m *MenuMutation) SetActiveIcon(s string) {
	m.activeIcon = &s
}

// ActiveIcon returns the value of the "activeIcon" field in the mutation.
func (m *MenuMutation) ActiveIcon() (r string, exists bool) {
	v := m.activeIcon
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveIcon returns the old "activeIcon" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldActiveIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveIcon: %w", err)
	}
	return oldValue.ActiveIcon, nil
}

// ResetActiveIcon resets all changes to the "activeIcon" field.
func (m *MenuMutation) ResetActiveIcon() {
	m.activeIcon = nil
}

// SetActivePath sets the "activePath" field.
func (m *MenuMutation) SetActivePath(s string) {
	m.activePath = &s
}

// ActivePath returns the value of the "activePath" field in the mutation.
func (m *MenuMutation) ActivePath() (r string, exists bool) {
	v := m.activePath
	if v == nil {
		return
	}
	return *v, true
}

// OldActivePath returns the old "activePath" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldActivePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivePath: %w", err)
	}
	return oldValue.ActivePath, nil
}

// ResetActivePath resets all changes to the "activePath" field.
func (m *MenuMutation) ResetActivePath() {
	m.activePath = nil
}

// SetMaxNumOfOpenTab sets the "maxNumOfOpenTab" field.
func (m *MenuMutation) SetMaxNumOfOpenTab(i int16) {
	m.maxNumOfOpenTab = &i
	m.addmaxNumOfOpenTab = nil
}

// MaxNumOfOpenTab returns the value of the "maxNumOfOpenTab" field in the mutation.
func (m *MenuMutation) MaxNumOfOpenTab() (r int16, exists bool) {
	v := m.maxNumOfOpenTab
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxNumOfOpenTab returns the old "maxNumOfOpenTab" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldMaxNumOfOpenTab(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxNumOfOpenTab is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxNumOfOpenTab requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxNumOfOpenTab: %w", err)
	}
	return oldValue.MaxNumOfOpenTab, nil
}

// AddMaxNumOfOpenTab adds i to the "maxNumOfOpenTab" field.
func (m *MenuMutation) AddMaxNumOfOpenTab(i int16) {
	if m.addmaxNumOfOpenTab != nil {
		*m.addmaxNumOfOpenTab += i
	} else {
		m.addmaxNumOfOpenTab = &i
	}
}

// AddedMaxNumOfOpenTab returns the value that was added to the "maxNumOfOpenTab" field in this mutation.
func (m *MenuMutation) AddedMaxNumOfOpenTab() (r int16, exists bool) {
	v := m.addmaxNumOfOpenTab
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxNumOfOpenTab resets all changes to the "maxNumOfOpenTab" field.
func (m *MenuMutation) ResetMaxNumOfOpenTab() {
	m.maxNumOfOpenTab = nil
	m.addmaxNumOfOpenTab = nil
}

// SetKeepalive sets the "keepalive" field.
func (m *MenuMutation) SetKeepalive(b bool) {
	m.keepalive = &b
}

// Keepalive returns the value of the "keepalive" field in the mutation.
func (m *MenuMutation) Keepalive() (r bool, exists bool) {
	v := m.keepalive
	if v == nil {
		return
	}
	return *v, true
}

// OldKeepalive returns the old "keepalive" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldKeepalive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeepalive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeepalive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeepalive: %w", err)
	}
	return oldValue.Keepalive, nil
}

// ResetKeepalive resets all changes to the "keepalive" field.
func (m *MenuMutation) ResetKeepalive() {
	m.keepalive = nil
}

// SetIgnoreAccess sets the "ignoreAccess" field.
func (m *MenuMutation) SetIgnoreAccess(b bool) {
	m.ignoreAccess = &b
}

// IgnoreAccess returns the value of the "ignoreAccess" field in the mutation.
func (m *MenuMutation) IgnoreAccess() (r bool, exists bool) {
	v := m.ignoreAccess
	if v == nil {
		return
	}
	return *v, true
}

// OldIgnoreAccess returns the old "ignoreAccess" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIgnoreAccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIgnoreAccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIgnoreAccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIgnoreAccess: %w", err)
	}
	return oldValue.IgnoreAccess, nil
}

// ResetIgnoreAccess resets all changes to the "ignoreAccess" field.
func (m *MenuMutation) ResetIgnoreAccess() {
	m.ignoreAccess = nil
}

// SetAuthority sets the "authority" field.
func (m *MenuMutation) SetAuthority(s string) {
	m.authority = &s
}

// Authority returns the value of the "authority" field in the mutation.
func (m *MenuMutation) Authority() (r string, exists bool) {
	v := m.authority
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthority returns the old "authority" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldAuthority(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthority: %w", err)
	}
	return oldValue.Authority, nil
}

// ResetAuthority resets all changes to the "authority" field.
func (m *MenuMutation) ResetAuthority() {
	m.authority = nil
}

// SetAffixTab sets the "affixTab" field.
func (m *MenuMutation) SetAffixTab(b bool) {
	m.affixTab = &b
}

// AffixTab returns the value of the "affixTab" field in the mutation.
func (m *MenuMutation) AffixTab() (r bool, exists bool) {
	v := m.affixTab
	if v == nil {
		return
	}
	return *v, true
}

// OldAffixTab returns the old "affixTab" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldAffixTab(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAffixTab is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAffixTab requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAffixTab: %w", err)
	}
	return oldValue.AffixTab, nil
}

// ResetAffixTab resets all changes to the "affixTab" field.
func (m *MenuMutation) ResetAffixTab() {
	m.affixTab = nil
}

// SetAffixTabOrder sets the "affixTabOrder" field.
func (m *MenuMutation) SetAffixTabOrder(i int16) {
	m.affixTabOrder = &i
	m.addaffixTabOrder = nil
}

// AffixTabOrder returns the value of the "affixTabOrder" field in the mutation.
func (m *MenuMutation) AffixTabOrder() (r int16, exists bool) {
	v := m.affixTabOrder
	if v == nil {
		return
	}
	return *v, true
}

// OldAffixTabOrder returns the old "affixTabOrder" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldAffixTabOrder(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAffixTabOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAffixTabOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAffixTabOrder: %w", err)
	}
	return oldValue.AffixTabOrder, nil
}

// AddAffixTabOrder adds i to the "affixTabOrder" field.
func (m *MenuMutation) AddAffixTabOrder(i int16) {
	if m.addaffixTabOrder != nil {
		*m.addaffixTabOrder += i
	} else {
		m.addaffixTabOrder = &i
	}
}

// AddedAffixTabOrder returns the value that was added to the "affixTabOrder" field in this mutation.
func (m *MenuMutation) AddedAffixTabOrder() (r int16, exists bool) {
	v := m.addaffixTabOrder
	if v == nil {
		return
	}
	return *v, true
}

// ResetAffixTabOrder resets all changes to the "affixTabOrder" field.
func (m *MenuMutation) ResetAffixTabOrder() {
	m.affixTabOrder = nil
	m.addaffixTabOrder = nil
}

// SetHideInMenu sets the "hideInMenu" field.
func (m *MenuMutation) SetHideInMenu(b bool) {
	m.hideInMenu = &b
}

// HideInMenu returns the value of the "hideInMenu" field in the mutation.
func (m *MenuMutation) HideInMenu() (r bool, exists bool) {
	v := m.hideInMenu
	if v == nil {
		return
	}
	return *v, true
}

// OldHideInMenu returns the old "hideInMenu" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldHideInMenu(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHideInMenu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHideInMenu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHideInMenu: %w", err)
	}
	return oldValue.HideInMenu, nil
}

// ResetHideInMenu resets all changes to the "hideInMenu" field.
func (m *MenuMutation) ResetHideInMenu() {
	m.hideInMenu = nil
}

// SetHideInTab sets the "hideInTab" field.
func (m *MenuMutation) SetHideInTab(b bool) {
	m.hideInTab = &b
}

// HideInTab returns the value of the "hideInTab" field in the mutation.
func (m *MenuMutation) HideInTab() (r bool, exists bool) {
	v := m.hideInTab
	if v == nil {
		return
	}
	return *v, true
}

// OldHideInTab returns the old "hideInTab" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldHideInTab(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHideInTab is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHideInTab requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHideInTab: %w", err)
	}
	return oldValue.HideInTab, nil
}

// ResetHideInTab resets all changes to the "hideInTab" field.
func (m *MenuMutation) ResetHideInTab() {
	m.hideInTab = nil
}

// SetHideInBreadcrumb sets the "hideInBreadcrumb" field.
func (m *MenuMutation) SetHideInBreadcrumb(b bool) {
	m.hideInBreadcrumb = &b
}

// HideInBreadcrumb returns the value of the "hideInBreadcrumb" field in the mutation.
func (m *MenuMutation) HideInBreadcrumb() (r bool, exists bool) {
	v := m.hideInBreadcrumb
	if v == nil {
		return
	}
	return *v, true
}

// OldHideInBreadcrumb returns the old "hideInBreadcrumb" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldHideInBreadcrumb(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHideInBreadcrumb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHideInBreadcrumb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHideInBreadcrumb: %w", err)
	}
	return oldValue.HideInBreadcrumb, nil
}

// ResetHideInBreadcrumb resets all changes to the "hideInBreadcrumb" field.
func (m *MenuMutation) ResetHideInBreadcrumb() {
	m.hideInBreadcrumb = nil
}

// SetHideChildrenInMenu sets the "hideChildrenInMenu" field.
func (m *MenuMutation) SetHideChildrenInMenu(b bool) {
	m.hideChildrenInMenu = &b
}

// HideChildrenInMenu returns the value of the "hideChildrenInMenu" field in the mutation.
func (m *MenuMutation) HideChildrenInMenu() (r bool, exists bool) {
	v := m.hideChildrenInMenu
	if v == nil {
		return
	}
	return *v, true
}

// OldHideChildrenInMenu returns the old "hideChildrenInMenu" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldHideChildrenInMenu(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHideChildrenInMenu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHideChildrenInMenu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHideChildrenInMenu: %w", err)
	}
	return oldValue.HideChildrenInMenu, nil
}

// ResetHideChildrenInMenu resets all changes to the "hideChildrenInMenu" field.
func (m *MenuMutation) ResetHideChildrenInMenu() {
	m.hideChildrenInMenu = nil
}

// SetFullPathKey sets the "fullPathKey" field.
func (m *MenuMutation) SetFullPathKey(b bool) {
	m.fullPathKey = &b
}

// FullPathKey returns the value of the "fullPathKey" field in the mutation.
func (m *MenuMutation) FullPathKey() (r bool, exists bool) {
	v := m.fullPathKey
	if v == nil {
		return
	}
	return *v, true
}

// OldFullPathKey returns the old "fullPathKey" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldFullPathKey(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullPathKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullPathKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullPathKey: %w", err)
	}
	return oldValue.FullPathKey, nil
}

// ResetFullPathKey resets all changes to the "fullPathKey" field.
func (m *MenuMutation) ResetFullPathKey() {
	m.fullPathKey = nil
}

// SetBadge sets the "badge" field.
func (m *MenuMutation) SetBadge(s string) {
	m.badge = &s
}

// Badge returns the value of the "badge" field in the mutation.
func (m *MenuMutation) Badge() (r string, exists bool) {
	v := m.badge
	if v == nil {
		return
	}
	return *v, true
}

// OldBadge returns the old "badge" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldBadge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadge: %w", err)
	}
	return oldValue.Badge, nil
}

// ResetBadge resets all changes to the "badge" field.
func (m *MenuMutation) ResetBadge() {
	m.badge = nil
}

// SetBadgeType sets the "badgeType" field.
func (m *MenuMutation) SetBadgeType(s string) {
	m.badgeType = &s
}

// BadgeType returns the value of the "badgeType" field in the mutation.
func (m *MenuMutation) BadgeType() (r string, exists bool) {
	v := m.badgeType
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeType returns the old "badgeType" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldBadgeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeType: %w", err)
	}
	return oldValue.BadgeType, nil
}

// ResetBadgeType resets all changes to the "badgeType" field.
func (m *MenuMutation) ResetBadgeType() {
	m.badgeType = nil
}

// SetBadgeVariants sets the "badgeVariants" field.
func (m *MenuMutation) SetBadgeVariants(s string) {
	m.badgeVariants = &s
}

// BadgeVariants returns the value of the "badgeVariants" field in the mutation.
func (m *MenuMutation) BadgeVariants() (r string, exists bool) {
	v := m.badgeVariants
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeVariants returns the old "badgeVariants" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldBadgeVariants(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeVariants is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeVariants requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeVariants: %w", err)
	}
	return oldValue.BadgeVariants, nil
}

// ResetBadgeVariants resets all changes to the "badgeVariants" field.
func (m *MenuMutation) ResetBadgeVariants() {
	m.badgeVariants = nil
}

// Where appends a list predicates to the MenuMutation builder.
func (m *MenuMutation) Where(ps ...predicate.Menu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Menu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Menu).
func (m *MenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuMutation) Fields() []string {
	fields := make([]string, 0, 34)
	if m.create_time != nil {
		fields = append(fields, menu.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, menu.FieldUpdateTime)
	}
	if m.pid != nil {
		fields = append(fields, menu.FieldPid)
	}
	if m._type != nil {
		fields = append(fields, menu.FieldType)
	}
	if m.status != nil {
		fields = append(fields, menu.FieldStatus)
	}
	if m._path != nil {
		fields = append(fields, menu.FieldPath)
	}
	if m.redirect != nil {
		fields = append(fields, menu.FieldRedirect)
	}
	if m.alias != nil {
		fields = append(fields, menu.FieldAlias)
	}
	if m.name != nil {
		fields = append(fields, menu.FieldName)
	}
	if m.component != nil {
		fields = append(fields, menu.FieldComponent)
	}
	if m.icon != nil {
		fields = append(fields, menu.FieldIcon)
	}
	if m.title != nil {
		fields = append(fields, menu.FieldTitle)
	}
	if m._order != nil {
		fields = append(fields, menu.FieldOrder)
	}
	if m.openInNewWindow != nil {
		fields = append(fields, menu.FieldOpenInNewWindow)
	}
	if m.noBasicLayout != nil {
		fields = append(fields, menu.FieldNoBasicLayout)
	}
	if m.menuVisibleWithForbidden != nil {
		fields = append(fields, menu.FieldMenuVisibleWithForbidden)
	}
	if m.link != nil {
		fields = append(fields, menu.FieldLink)
	}
	if m.iframeSrc != nil {
		fields = append(fields, menu.FieldIframeSrc)
	}
	if m.activeIcon != nil {
		fields = append(fields, menu.FieldActiveIcon)
	}
	if m.activePath != nil {
		fields = append(fields, menu.FieldActivePath)
	}
	if m.maxNumOfOpenTab != nil {
		fields = append(fields, menu.FieldMaxNumOfOpenTab)
	}
	if m.keepalive != nil {
		fields = append(fields, menu.FieldKeepalive)
	}
	if m.ignoreAccess != nil {
		fields = append(fields, menu.FieldIgnoreAccess)
	}
	if m.authority != nil {
		fields = append(fields, menu.FieldAuthority)
	}
	if m.affixTab != nil {
		fields = append(fields, menu.FieldAffixTab)
	}
	if m.affixTabOrder != nil {
		fields = append(fields, menu.FieldAffixTabOrder)
	}
	if m.hideInMenu != nil {
		fields = append(fields, menu.FieldHideInMenu)
	}
	if m.hideInTab != nil {
		fields = append(fields, menu.FieldHideInTab)
	}
	if m.hideInBreadcrumb != nil {
		fields = append(fields, menu.FieldHideInBreadcrumb)
	}
	if m.hideChildrenInMenu != nil {
		fields = append(fields, menu.FieldHideChildrenInMenu)
	}
	if m.fullPathKey != nil {
		fields = append(fields, menu.FieldFullPathKey)
	}
	if m.badge != nil {
		fields = append(fields, menu.FieldBadge)
	}
	if m.badgeType != nil {
		fields = append(fields, menu.FieldBadgeType)
	}
	if m.badgeVariants != nil {
		fields = append(fields, menu.FieldBadgeVariants)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldCreateTime:
		return m.CreateTime()
	case menu.FieldUpdateTime:
		return m.UpdateTime()
	case menu.FieldPid:
		return m.Pid()
	case menu.FieldType:
		return m.GetType()
	case menu.FieldStatus:
		return m.Status()
	case menu.FieldPath:
		return m.Path()
	case menu.FieldRedirect:
		return m.Redirect()
	case menu.FieldAlias:
		return m.Alias()
	case menu.FieldName:
		return m.Name()
	case menu.FieldComponent:
		return m.Component()
	case menu.FieldIcon:
		return m.Icon()
	case menu.FieldTitle:
		return m.Title()
	case menu.FieldOrder:
		return m.Order()
	case menu.FieldOpenInNewWindow:
		return m.OpenInNewWindow()
	case menu.FieldNoBasicLayout:
		return m.NoBasicLayout()
	case menu.FieldMenuVisibleWithForbidden:
		return m.MenuVisibleWithForbidden()
	case menu.FieldLink:
		return m.Link()
	case menu.FieldIframeSrc:
		return m.IframeSrc()
	case menu.FieldActiveIcon:
		return m.ActiveIcon()
	case menu.FieldActivePath:
		return m.ActivePath()
	case menu.FieldMaxNumOfOpenTab:
		return m.MaxNumOfOpenTab()
	case menu.FieldKeepalive:
		return m.Keepalive()
	case menu.FieldIgnoreAccess:
		return m.IgnoreAccess()
	case menu.FieldAuthority:
		return m.Authority()
	case menu.FieldAffixTab:
		return m.AffixTab()
	case menu.FieldAffixTabOrder:
		return m.AffixTabOrder()
	case menu.FieldHideInMenu:
		return m.HideInMenu()
	case menu.FieldHideInTab:
		return m.HideInTab()
	case menu.FieldHideInBreadcrumb:
		return m.HideInBreadcrumb()
	case menu.FieldHideChildrenInMenu:
		return m.HideChildrenInMenu()
	case menu.FieldFullPathKey:
		return m.FullPathKey()
	case menu.FieldBadge:
		return m.Badge()
	case menu.FieldBadgeType:
		return m.BadgeType()
	case menu.FieldBadgeVariants:
		return m.BadgeVariants()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menu.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case menu.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case menu.FieldPid:
		return m.OldPid(ctx)
	case menu.FieldType:
		return m.OldType(ctx)
	case menu.FieldStatus:
		return m.OldStatus(ctx)
	case menu.FieldPath:
		return m.OldPath(ctx)
	case menu.FieldRedirect:
		return m.OldRedirect(ctx)
	case menu.FieldAlias:
		return m.OldAlias(ctx)
	case menu.FieldName:
		return m.OldName(ctx)
	case menu.FieldComponent:
		return m.OldComponent(ctx)
	case menu.FieldIcon:
		return m.OldIcon(ctx)
	case menu.FieldTitle:
		return m.OldTitle(ctx)
	case menu.FieldOrder:
		return m.OldOrder(ctx)
	case menu.FieldOpenInNewWindow:
		return m.OldOpenInNewWindow(ctx)
	case menu.FieldNoBasicLayout:
		return m.OldNoBasicLayout(ctx)
	case menu.FieldMenuVisibleWithForbidden:
		return m.OldMenuVisibleWithForbidden(ctx)
	case menu.FieldLink:
		return m.OldLink(ctx)
	case menu.FieldIframeSrc:
		return m.OldIframeSrc(ctx)
	case menu.FieldActiveIcon:
		return m.OldActiveIcon(ctx)
	case menu.FieldActivePath:
		return m.OldActivePath(ctx)
	case menu.FieldMaxNumOfOpenTab:
		return m.OldMaxNumOfOpenTab(ctx)
	case menu.FieldKeepalive:
		return m.OldKeepalive(ctx)
	case menu.FieldIgnoreAccess:
		return m.OldIgnoreAccess(ctx)
	case menu.FieldAuthority:
		return m.OldAuthority(ctx)
	case menu.FieldAffixTab:
		return m.OldAffixTab(ctx)
	case menu.FieldAffixTabOrder:
		return m.OldAffixTabOrder(ctx)
	case menu.FieldHideInMenu:
		return m.OldHideInMenu(ctx)
	case menu.FieldHideInTab:
		return m.OldHideInTab(ctx)
	case menu.FieldHideInBreadcrumb:
		return m.OldHideInBreadcrumb(ctx)
	case menu.FieldHideChildrenInMenu:
		return m.OldHideChildrenInMenu(ctx)
	case menu.FieldFullPathKey:
		return m.OldFullPathKey(ctx)
	case menu.FieldBadge:
		return m.OldBadge(ctx)
	case menu.FieldBadgeType:
		return m.OldBadgeType(ctx)
	case menu.FieldBadgeVariants:
		return m.OldBadgeVariants(ctx)
	}
	return nil, fmt.Errorf("unknown Menu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menu.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case menu.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case menu.FieldPid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPid(v)
		return nil
	case menu.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case menu.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case menu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case menu.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case menu.FieldAlias:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlias(v)
		return nil
	case menu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menu.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case menu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case menu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case menu.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case menu.FieldOpenInNewWindow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenInNewWindow(v)
		return nil
	case menu.FieldNoBasicLayout:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoBasicLayout(v)
		return nil
	case menu.FieldMenuVisibleWithForbidden:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuVisibleWithForbidden(v)
		return nil
	case menu.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case menu.FieldIframeSrc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIframeSrc(v)
		return nil
	case menu.FieldActiveIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveIcon(v)
		return nil
	case menu.FieldActivePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivePath(v)
		return nil
	case menu.FieldMaxNumOfOpenTab:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxNumOfOpenTab(v)
		return nil
	case menu.FieldKeepalive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeepalive(v)
		return nil
	case menu.FieldIgnoreAccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIgnoreAccess(v)
		return nil
	case menu.FieldAuthority:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthority(v)
		return nil
	case menu.FieldAffixTab:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAffixTab(v)
		return nil
	case menu.FieldAffixTabOrder:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAffixTabOrder(v)
		return nil
	case menu.FieldHideInMenu:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHideInMenu(v)
		return nil
	case menu.FieldHideInTab:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHideInTab(v)
		return nil
	case menu.FieldHideInBreadcrumb:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHideInBreadcrumb(v)
		return nil
	case menu.FieldHideChildrenInMenu:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHideChildrenInMenu(v)
		return nil
	case menu.FieldFullPathKey:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullPathKey(v)
		return nil
	case menu.FieldBadge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadge(v)
		return nil
	case menu.FieldBadgeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeType(v)
		return nil
	case menu.FieldBadgeVariants:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeVariants(v)
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuMutation) AddedFields() []string {
	var fields []string
	if m.addpid != nil {
		fields = append(fields, menu.FieldPid)
	}
	if m.add_order != nil {
		fields = append(fields, menu.FieldOrder)
	}
	if m.addmaxNumOfOpenTab != nil {
		fields = append(fields, menu.FieldMaxNumOfOpenTab)
	}
	if m.addaffixTabOrder != nil {
		fields = append(fields, menu.FieldAffixTabOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldPid:
		return m.AddedPid()
	case menu.FieldOrder:
		return m.AddedOrder()
	case menu.FieldMaxNumOfOpenTab:
		return m.AddedMaxNumOfOpenTab()
	case menu.FieldAffixTabOrder:
		return m.AddedAffixTabOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menu.FieldPid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPid(v)
		return nil
	case menu.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case menu.FieldMaxNumOfOpenTab:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxNumOfOpenTab(v)
		return nil
	case menu.FieldAffixTabOrder:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAffixTabOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Menu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Menu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuMutation) ResetField(name string) error {
	switch name {
	case menu.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case menu.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case menu.FieldPid:
		m.ResetPid()
		return nil
	case menu.FieldType:
		m.ResetType()
		return nil
	case menu.FieldStatus:
		m.ResetStatus()
		return nil
	case menu.FieldPath:
		m.ResetPath()
		return nil
	case menu.FieldRedirect:
		m.ResetRedirect()
		return nil
	case menu.FieldAlias:
		m.ResetAlias()
		return nil
	case menu.FieldName:
		m.ResetName()
		return nil
	case menu.FieldComponent:
		m.ResetComponent()
		return nil
	case menu.FieldIcon:
		m.ResetIcon()
		return nil
	case menu.FieldTitle:
		m.ResetTitle()
		return nil
	case menu.FieldOrder:
		m.ResetOrder()
		return nil
	case menu.FieldOpenInNewWindow:
		m.ResetOpenInNewWindow()
		return nil
	case menu.FieldNoBasicLayout:
		m.ResetNoBasicLayout()
		return nil
	case menu.FieldMenuVisibleWithForbidden:
		m.ResetMenuVisibleWithForbidden()
		return nil
	case menu.FieldLink:
		m.ResetLink()
		return nil
	case menu.FieldIframeSrc:
		m.ResetIframeSrc()
		return nil
	case menu.FieldActiveIcon:
		m.ResetActiveIcon()
		return nil
	case menu.FieldActivePath:
		m.ResetActivePath()
		return nil
	case menu.FieldMaxNumOfOpenTab:
		m.ResetMaxNumOfOpenTab()
		return nil
	case menu.FieldKeepalive:
		m.ResetKeepalive()
		return nil
	case menu.FieldIgnoreAccess:
		m.ResetIgnoreAccess()
		return nil
	case menu.FieldAuthority:
		m.ResetAuthority()
		return nil
	case menu.FieldAffixTab:
		m.ResetAffixTab()
		return nil
	case menu.FieldAffixTabOrder:
		m.ResetAffixTabOrder()
		return nil
	case menu.FieldHideInMenu:
		m.ResetHideInMenu()
		return nil
	case menu.FieldHideInTab:
		m.ResetHideInTab()
		return nil
	case menu.FieldHideInBreadcrumb:
		m.ResetHideInBreadcrumb()
		return nil
	case menu.FieldHideChildrenInMenu:
		m.ResetHideChildrenInMenu()
		return nil
	case menu.FieldFullPathKey:
		m.ResetFullPathKey()
		return nil
	case menu.FieldBadge:
		m.ResetBadge()
		return nil
	case menu.FieldBadgeType:
		m.ResetBadgeType()
		return nil
	case menu.FieldBadgeVariants:
		m.ResetBadgeVariants()
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Menu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Menu edge %s", name)
}

// ResourceMutation represents an operation that mutates the Resource nodes in the graph.
type ResourceMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	_type         *string
	value         *string
	method        *string
	description   *string
	clearedFields map[string]struct{}
	roles         map[int64]struct{}
	removedroles  map[int64]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*Resource, error)
	predicates    []predicate.Resource
}

var _ ent.Mutation = (*ResourceMutation)(nil)

// resourceOption allows management of the mutation configuration using functional options.
type resourceOption func(*ResourceMutation)

// newResourceMutation creates new mutation for the Resource entity.
func newResourceMutation(c config, op Op, opts ...resourceOption) *ResourceMutation {
	m := &ResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResourceID sets the ID field of the mutation.
func withResourceID(id string) resourceOption {
	return func(m *ResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Resource
		)
		m.oldValue = func(ctx context.Context) (*Resource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResource sets the old Resource of the mutation.
func withResource(node *Resource) resourceOption {
	return func(m *ResourceMutation) {
		m.oldValue = func(context.Context) (*Resource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Resource entities.
func (m *ResourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Resource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ResourceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ResourceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ResourceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ResourceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ResourceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ResourceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ResourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ResourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ResourceMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ResourceMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ResourceMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ResourceMutation) ResetType() {
	m._type = nil
}

// SetValue sets the "value" field.
func (m *ResourceMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ResourceMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ResourceMutation) ResetValue() {
	m.value = nil
}

// SetMethod sets the "method" field.
func (m *ResourceMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *ResourceMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *ResourceMutation) ResetMethod() {
	m.method = nil
}

// SetDescription sets the "description" field.
func (m *ResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ResourceMutation) ResetDescription() {
	m.description = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *ResourceMutation) AddRoleIDs(ids ...int64) {
	if m.roles == nil {
		m.roles = make(map[int64]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *ResourceMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *ResourceMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *ResourceMutation) RemoveRoleIDs(ids ...int64) {
	if m.removedroles == nil {
		m.removedroles = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *ResourceMutation) RemovedRolesIDs() (ids []int64) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *ResourceMutation) RolesIDs() (ids []int64) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *ResourceMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the ResourceMutation builder.
func (m *ResourceMutation) Where(ps ...predicate.Resource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Resource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Resource).
func (m *ResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResourceMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, resource.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, resource.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, resource.FieldName)
	}
	if m._type != nil {
		fields = append(fields, resource.FieldType)
	}
	if m.value != nil {
		fields = append(fields, resource.FieldValue)
	}
	if m.method != nil {
		fields = append(fields, resource.FieldMethod)
	}
	if m.description != nil {
		fields = append(fields, resource.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldCreateTime:
		return m.CreateTime()
	case resource.FieldUpdateTime:
		return m.UpdateTime()
	case resource.FieldName:
		return m.Name()
	case resource.FieldType:
		return m.GetType()
	case resource.FieldValue:
		return m.Value()
	case resource.FieldMethod:
		return m.Method()
	case resource.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resource.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case resource.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case resource.FieldName:
		return m.OldName(ctx)
	case resource.FieldType:
		return m.OldType(ctx)
	case resource.FieldValue:
		return m.OldValue(ctx)
	case resource.FieldMethod:
		return m.OldMethod(ctx)
	case resource.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Resource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resource.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case resource.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case resource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case resource.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case resource.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case resource.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case resource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Resource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResourceMutation) ResetField(name string) error {
	switch name {
	case resource.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case resource.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case resource.FieldName:
		m.ResetName()
		return nil
	case resource.FieldType:
		m.ResetType()
		return nil
	case resource.FieldValue:
		m.ResetValue()
		return nil
	case resource.FieldMethod:
		m.ResetMethod()
		return nil
	case resource.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, resource.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, resource.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, resource.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case resource.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResourceMutation) ResetEdge(name string) error {
	switch name {
	case resource.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Resource edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	value           *string
	status          *bool
	desc            *string
	menus           *[]int32
	appendmenus     []int32
	clearedFields   map[string]struct{}
	users           map[uuid.UUID]struct{}
	removedusers    map[uuid.UUID]struct{}
	clearedusers    bool
	dept            map[int64]struct{}
	removeddept     map[int64]struct{}
	cleareddept     bool
	api             map[string]struct{}
	removedapi      map[string]struct{}
	clearedapi      bool
	resource        map[string]struct{}
	removedresource map[string]struct{}
	clearedresource bool
	done            bool
	oldValue        func(context.Context) (*Role, error)
	predicates      []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id int64) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RoleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RoleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RoleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *RoleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RoleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RoleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *RoleMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *RoleMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *RoleMutation) ResetValue() {
	m.value = nil
}

// SetStatus sets the "status" field.
func (m *RoleMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *RoleMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *RoleMutation) ResetStatus() {
	m.status = nil
}

// SetDesc sets the "desc" field.
func (m *RoleMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *RoleMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *RoleMutation) ResetDesc() {
	m.desc = nil
}

// SetMenus sets the "menus" field.
func (m *RoleMutation) SetMenus(i []int32) {
	m.menus = &i
	m.appendmenus = nil
}

// Menus returns the value of the "menus" field in the mutation.
func (m *RoleMutation) Menus() (r []int32, exists bool) {
	v := m.menus
	if v == nil {
		return
	}
	return *v, true
}

// OldMenus returns the old "menus" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldMenus(ctx context.Context) (v []int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenus: %w", err)
	}
	return oldValue.Menus, nil
}

// AppendMenus adds i to the "menus" field.
func (m *RoleMutation) AppendMenus(i []int32) {
	m.appendmenus = append(m.appendmenus, i...)
}

// AppendedMenus returns the list of values that were appended to the "menus" field in this mutation.
func (m *RoleMutation) AppendedMenus() ([]int32, bool) {
	if len(m.appendmenus) == 0 {
		return nil, false
	}
	return m.appendmenus, true
}

// ResetMenus resets all changes to the "menus" field.
func (m *RoleMutation) ResetMenus() {
	m.menus = nil
	m.appendmenus = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *RoleMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *RoleMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *RoleMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *RoleMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *RoleMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *RoleMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *RoleMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddDeptIDs adds the "dept" edge to the Dept entity by ids.
func (m *RoleMutation) AddDeptIDs(ids ...int64) {
	if m.dept == nil {
		m.dept = make(map[int64]struct{})
	}
	for i := range ids {
		m.dept[ids[i]] = struct{}{}
	}
}

// ClearDept clears the "dept" edge to the Dept entity.
func (m *RoleMutation) ClearDept() {
	m.cleareddept = true
}

// DeptCleared reports if the "dept" edge to the Dept entity was cleared.
func (m *RoleMutation) DeptCleared() bool {
	return m.cleareddept
}

// RemoveDeptIDs removes the "dept" edge to the Dept entity by IDs.
func (m *RoleMutation) RemoveDeptIDs(ids ...int64) {
	if m.removeddept == nil {
		m.removeddept = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.dept, ids[i])
		m.removeddept[ids[i]] = struct{}{}
	}
}

// RemovedDept returns the removed IDs of the "dept" edge to the Dept entity.
func (m *RoleMutation) RemovedDeptIDs() (ids []int64) {
	for id := range m.removeddept {
		ids = append(ids, id)
	}
	return
}

// DeptIDs returns the "dept" edge IDs in the mutation.
func (m *RoleMutation) DeptIDs() (ids []int64) {
	for id := range m.dept {
		ids = append(ids, id)
	}
	return
}

// ResetDept resets all changes to the "dept" edge.
func (m *RoleMutation) ResetDept() {
	m.dept = nil
	m.cleareddept = false
	m.removeddept = nil
}

// AddAPIIDs adds the "api" edge to the ApiResources entity by ids.
func (m *RoleMutation) AddAPIIDs(ids ...string) {
	if m.api == nil {
		m.api = make(map[string]struct{})
	}
	for i := range ids {
		m.api[ids[i]] = struct{}{}
	}
}

// ClearAPI clears the "api" edge to the ApiResources entity.
func (m *RoleMutation) ClearAPI() {
	m.clearedapi = true
}

// APICleared reports if the "api" edge to the ApiResources entity was cleared.
func (m *RoleMutation) APICleared() bool {
	return m.clearedapi
}

// RemoveAPIIDs removes the "api" edge to the ApiResources entity by IDs.
func (m *RoleMutation) RemoveAPIIDs(ids ...string) {
	if m.removedapi == nil {
		m.removedapi = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.api, ids[i])
		m.removedapi[ids[i]] = struct{}{}
	}
}

// RemovedAPI returns the removed IDs of the "api" edge to the ApiResources entity.
func (m *RoleMutation) RemovedAPIIDs() (ids []string) {
	for id := range m.removedapi {
		ids = append(ids, id)
	}
	return
}

// APIIDs returns the "api" edge IDs in the mutation.
func (m *RoleMutation) APIIDs() (ids []string) {
	for id := range m.api {
		ids = append(ids, id)
	}
	return
}

// ResetAPI resets all changes to the "api" edge.
func (m *RoleMutation) ResetAPI() {
	m.api = nil
	m.clearedapi = false
	m.removedapi = nil
}

// AddResourceIDs adds the "resource" edge to the Resource entity by ids.
func (m *RoleMutation) AddResourceIDs(ids ...string) {
	if m.resource == nil {
		m.resource = make(map[string]struct{})
	}
	for i := range ids {
		m.resource[ids[i]] = struct{}{}
	}
}

// ClearResource clears the "resource" edge to the Resource entity.
func (m *RoleMutation) ClearResource() {
	m.clearedresource = true
}

// ResourceCleared reports if the "resource" edge to the Resource entity was cleared.
func (m *RoleMutation) ResourceCleared() bool {
	return m.clearedresource
}

// RemoveResourceIDs removes the "resource" edge to the Resource entity by IDs.
func (m *RoleMutation) RemoveResourceIDs(ids ...string) {
	if m.removedresource == nil {
		m.removedresource = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.resource, ids[i])
		m.removedresource[ids[i]] = struct{}{}
	}
}

// RemovedResource returns the removed IDs of the "resource" edge to the Resource entity.
func (m *RoleMutation) RemovedResourceIDs() (ids []string) {
	for id := range m.removedresource {
		ids = append(ids, id)
	}
	return
}

// ResourceIDs returns the "resource" edge IDs in the mutation.
func (m *RoleMutation) ResourceIDs() (ids []string) {
	for id := range m.resource {
		ids = append(ids, id)
	}
	return
}

// ResetResource resets all changes to the "resource" edge.
func (m *RoleMutation) ResetResource() {
	m.resource = nil
	m.clearedresource = false
	m.removedresource = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, role.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, role.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.value != nil {
		fields = append(fields, role.FieldValue)
	}
	if m.status != nil {
		fields = append(fields, role.FieldStatus)
	}
	if m.desc != nil {
		fields = append(fields, role.FieldDesc)
	}
	if m.menus != nil {
		fields = append(fields, role.FieldMenus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreateTime:
		return m.CreateTime()
	case role.FieldUpdateTime:
		return m.UpdateTime()
	case role.FieldName:
		return m.Name()
	case role.FieldValue:
		return m.Value()
	case role.FieldStatus:
		return m.Status()
	case role.FieldDesc:
		return m.Desc()
	case role.FieldMenus:
		return m.Menus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case role.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldValue:
		return m.OldValue(ctx)
	case role.FieldStatus:
		return m.OldStatus(ctx)
	case role.FieldDesc:
		return m.OldDesc(ctx)
	case role.FieldMenus:
		return m.OldMenus(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case role.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case role.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case role.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case role.FieldMenus:
		v, ok := value.([]int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenus(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case role.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldValue:
		m.ResetValue()
		return nil
	case role.FieldStatus:
		m.ResetStatus()
		return nil
	case role.FieldDesc:
		m.ResetDesc()
		return nil
	case role.FieldMenus:
		m.ResetMenus()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.users != nil {
		edges = append(edges, role.EdgeUsers)
	}
	if m.dept != nil {
		edges = append(edges, role.EdgeDept)
	}
	if m.api != nil {
		edges = append(edges, role.EdgeAPI)
	}
	if m.resource != nil {
		edges = append(edges, role.EdgeResource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeDept:
		ids := make([]ent.Value, 0, len(m.dept))
		for id := range m.dept {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeAPI:
		ids := make([]ent.Value, 0, len(m.api))
		for id := range m.api {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeResource:
		ids := make([]ent.Value, 0, len(m.resource))
		for id := range m.resource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedusers != nil {
		edges = append(edges, role.EdgeUsers)
	}
	if m.removeddept != nil {
		edges = append(edges, role.EdgeDept)
	}
	if m.removedapi != nil {
		edges = append(edges, role.EdgeAPI)
	}
	if m.removedresource != nil {
		edges = append(edges, role.EdgeResource)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeDept:
		ids := make([]ent.Value, 0, len(m.removeddept))
		for id := range m.removeddept {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeAPI:
		ids := make([]ent.Value, 0, len(m.removedapi))
		for id := range m.removedapi {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeResource:
		ids := make([]ent.Value, 0, len(m.removedresource))
		for id := range m.removedresource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedusers {
		edges = append(edges, role.EdgeUsers)
	}
	if m.cleareddept {
		edges = append(edges, role.EdgeDept)
	}
	if m.clearedapi {
		edges = append(edges, role.EdgeAPI)
	}
	if m.clearedresource {
		edges = append(edges, role.EdgeResource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeUsers:
		return m.clearedusers
	case role.EdgeDept:
		return m.cleareddept
	case role.EdgeAPI:
		return m.clearedapi
	case role.EdgeResource:
		return m.clearedresource
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeUsers:
		m.ResetUsers()
		return nil
	case role.EdgeDept:
		m.ResetDept()
		return nil
	case role.EdgeAPI:
		m.ResetAPI()
		return nil
	case role.EdgeResource:
		m.ResetResource()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// SysLogRecordMutation represents an operation that mutates the SysLogRecord nodes in the graph.
type SysLogRecordMutation struct {
	config
	op            Op
	typ           string
	id            *string
	user_id       *string
	user_name     *string
	is_login      *bool
	session_id    *string
	method        *string
	_path         *string
	request_time  *time.Time
	ip_address    *string
	ip_location   *string
	latency       *int64
	addlatency    *int64
	os            *string
	browser       *string
	user_agent    *string
	header        *string
	get_params    *string
	post_data     *string
	res_code      *int32
	addres_code   *int32
	reason        *string
	res_status    *bool
	stack         *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysLogRecord, error)
	predicates    []predicate.SysLogRecord
}

var _ ent.Mutation = (*SysLogRecordMutation)(nil)

// syslogrecordOption allows management of the mutation configuration using functional options.
type syslogrecordOption func(*SysLogRecordMutation)

// newSysLogRecordMutation creates new mutation for the SysLogRecord entity.
func newSysLogRecordMutation(c config, op Op, opts ...syslogrecordOption) *SysLogRecordMutation {
	m := &SysLogRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeSysLogRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysLogRecordID sets the ID field of the mutation.
func withSysLogRecordID(id string) syslogrecordOption {
	return func(m *SysLogRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *SysLogRecord
		)
		m.oldValue = func(ctx context.Context) (*SysLogRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysLogRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysLogRecord sets the old SysLogRecord of the mutation.
func withSysLogRecord(node *SysLogRecord) syslogrecordOption {
	return func(m *SysLogRecordMutation) {
		m.oldValue = func(context.Context) (*SysLogRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysLogRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysLogRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysLogRecord entities.
func (m *SysLogRecordMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysLogRecordMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysLogRecordMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysLogRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *SysLogRecordMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysLogRecordMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysLogRecordMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserName sets the "user_name" field.
func (m *SysLogRecordMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *SysLogRecordMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *SysLogRecordMutation) ResetUserName() {
	m.user_name = nil
}

// SetIsLogin sets the "is_login" field.
func (m *SysLogRecordMutation) SetIsLogin(b bool) {
	m.is_login = &b
}

// IsLogin returns the value of the "is_login" field in the mutation.
func (m *SysLogRecordMutation) IsLogin() (r bool, exists bool) {
	v := m.is_login
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLogin returns the old "is_login" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldIsLogin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLogin: %w", err)
	}
	return oldValue.IsLogin, nil
}

// ResetIsLogin resets all changes to the "is_login" field.
func (m *SysLogRecordMutation) ResetIsLogin() {
	m.is_login = nil
}

// SetSessionID sets the "session_id" field.
func (m *SysLogRecordMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *SysLogRecordMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *SysLogRecordMutation) ResetSessionID() {
	m.session_id = nil
}

// SetMethod sets the "method" field.
func (m *SysLogRecordMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *SysLogRecordMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *SysLogRecordMutation) ResetMethod() {
	m.method = nil
}

// SetPath sets the "path" field.
func (m *SysLogRecordMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysLogRecordMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *SysLogRecordMutation) ResetPath() {
	m._path = nil
}

// SetRequestTime sets the "request_time" field.
func (m *SysLogRecordMutation) SetRequestTime(t time.Time) {
	m.request_time = &t
}

// RequestTime returns the value of the "request_time" field in the mutation.
func (m *SysLogRecordMutation) RequestTime() (r time.Time, exists bool) {
	v := m.request_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestTime returns the old "request_time" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldRequestTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestTime: %w", err)
	}
	return oldValue.RequestTime, nil
}

// ResetRequestTime resets all changes to the "request_time" field.
func (m *SysLogRecordMutation) ResetRequestTime() {
	m.request_time = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *SysLogRecordMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *SysLogRecordMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *SysLogRecordMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetIPLocation sets the "ip_location" field.
func (m *SysLogRecordMutation) SetIPLocation(s string) {
	m.ip_location = &s
}

// IPLocation returns the value of the "ip_location" field in the mutation.
func (m *SysLogRecordMutation) IPLocation() (r string, exists bool) {
	v := m.ip_location
	if v == nil {
		return
	}
	return *v, true
}

// OldIPLocation returns the old "ip_location" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldIPLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPLocation: %w", err)
	}
	return oldValue.IPLocation, nil
}

// ResetIPLocation resets all changes to the "ip_location" field.
func (m *SysLogRecordMutation) ResetIPLocation() {
	m.ip_location = nil
}

// SetLatency sets the "latency" field.
func (m *SysLogRecordMutation) SetLatency(i int64) {
	m.latency = &i
	m.addlatency = nil
}

// Latency returns the value of the "latency" field in the mutation.
func (m *SysLogRecordMutation) Latency() (r int64, exists bool) {
	v := m.latency
	if v == nil {
		return
	}
	return *v, true
}

// OldLatency returns the old "latency" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldLatency(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatency: %w", err)
	}
	return oldValue.Latency, nil
}

// AddLatency adds i to the "latency" field.
func (m *SysLogRecordMutation) AddLatency(i int64) {
	if m.addlatency != nil {
		*m.addlatency += i
	} else {
		m.addlatency = &i
	}
}

// AddedLatency returns the value that was added to the "latency" field in this mutation.
func (m *SysLogRecordMutation) AddedLatency() (r int64, exists bool) {
	v := m.addlatency
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatency resets all changes to the "latency" field.
func (m *SysLogRecordMutation) ResetLatency() {
	m.latency = nil
	m.addlatency = nil
}

// SetOs sets the "os" field.
func (m *SysLogRecordMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *SysLogRecordMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *SysLogRecordMutation) ResetOs() {
	m.os = nil
}

// SetBrowser sets the "browser" field.
func (m *SysLogRecordMutation) SetBrowser(s string) {
	m.browser = &s
}

// Browser returns the value of the "browser" field in the mutation.
func (m *SysLogRecordMutation) Browser() (r string, exists bool) {
	v := m.browser
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowser returns the old "browser" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldBrowser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowser: %w", err)
	}
	return oldValue.Browser, nil
}

// ResetBrowser resets all changes to the "browser" field.
func (m *SysLogRecordMutation) ResetBrowser() {
	m.browser = nil
}

// SetUserAgent sets the "user_agent" field.
func (m *SysLogRecordMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *SysLogRecordMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *SysLogRecordMutation) ResetUserAgent() {
	m.user_agent = nil
}

// SetHeader sets the "header" field.
func (m *SysLogRecordMutation) SetHeader(s string) {
	m.header = &s
}

// Header returns the value of the "header" field in the mutation.
func (m *SysLogRecordMutation) Header() (r string, exists bool) {
	v := m.header
	if v == nil {
		return
	}
	return *v, true
}

// OldHeader returns the old "header" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldHeader(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeader: %w", err)
	}
	return oldValue.Header, nil
}

// ResetHeader resets all changes to the "header" field.
func (m *SysLogRecordMutation) ResetHeader() {
	m.header = nil
}

// SetGetParams sets the "get_params" field.
func (m *SysLogRecordMutation) SetGetParams(s string) {
	m.get_params = &s
}

// GetParams returns the value of the "get_params" field in the mutation.
func (m *SysLogRecordMutation) GetParams() (r string, exists bool) {
	v := m.get_params
	if v == nil {
		return
	}
	return *v, true
}

// OldGetParams returns the old "get_params" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldGetParams(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGetParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGetParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGetParams: %w", err)
	}
	return oldValue.GetParams, nil
}

// ResetGetParams resets all changes to the "get_params" field.
func (m *SysLogRecordMutation) ResetGetParams() {
	m.get_params = nil
}

// SetPostData sets the "post_data" field.
func (m *SysLogRecordMutation) SetPostData(s string) {
	m.post_data = &s
}

// PostData returns the value of the "post_data" field in the mutation.
func (m *SysLogRecordMutation) PostData() (r string, exists bool) {
	v := m.post_data
	if v == nil {
		return
	}
	return *v, true
}

// OldPostData returns the old "post_data" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldPostData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostData: %w", err)
	}
	return oldValue.PostData, nil
}

// ResetPostData resets all changes to the "post_data" field.
func (m *SysLogRecordMutation) ResetPostData() {
	m.post_data = nil
}

// SetResCode sets the "res_code" field.
func (m *SysLogRecordMutation) SetResCode(i int32) {
	m.res_code = &i
	m.addres_code = nil
}

// ResCode returns the value of the "res_code" field in the mutation.
func (m *SysLogRecordMutation) ResCode() (r int32, exists bool) {
	v := m.res_code
	if v == nil {
		return
	}
	return *v, true
}

// OldResCode returns the old "res_code" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldResCode(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResCode: %w", err)
	}
	return oldValue.ResCode, nil
}

// AddResCode adds i to the "res_code" field.
func (m *SysLogRecordMutation) AddResCode(i int32) {
	if m.addres_code != nil {
		*m.addres_code += i
	} else {
		m.addres_code = &i
	}
}

// AddedResCode returns the value that was added to the "res_code" field in this mutation.
func (m *SysLogRecordMutation) AddedResCode() (r int32, exists bool) {
	v := m.addres_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetResCode resets all changes to the "res_code" field.
func (m *SysLogRecordMutation) ResetResCode() {
	m.res_code = nil
	m.addres_code = nil
}

// SetReason sets the "reason" field.
func (m *SysLogRecordMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *SysLogRecordMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *SysLogRecordMutation) ResetReason() {
	m.reason = nil
}

// SetResStatus sets the "res_status" field.
func (m *SysLogRecordMutation) SetResStatus(b bool) {
	m.res_status = &b
}

// ResStatus returns the value of the "res_status" field in the mutation.
func (m *SysLogRecordMutation) ResStatus() (r bool, exists bool) {
	v := m.res_status
	if v == nil {
		return
	}
	return *v, true
}

// OldResStatus returns the old "res_status" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldResStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResStatus: %w", err)
	}
	return oldValue.ResStatus, nil
}

// ResetResStatus resets all changes to the "res_status" field.
func (m *SysLogRecordMutation) ResetResStatus() {
	m.res_status = nil
}

// SetStack sets the "stack" field.
func (m *SysLogRecordMutation) SetStack(s string) {
	m.stack = &s
}

// Stack returns the value of the "stack" field in the mutation.
func (m *SysLogRecordMutation) Stack() (r string, exists bool) {
	v := m.stack
	if v == nil {
		return
	}
	return *v, true
}

// OldStack returns the old "stack" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldStack(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStack: %w", err)
	}
	return oldValue.Stack, nil
}

// ResetStack resets all changes to the "stack" field.
func (m *SysLogRecordMutation) ResetStack() {
	m.stack = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysLogRecordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysLogRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysLogRecord entity.
// If the SysLogRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLogRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysLogRecordMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the SysLogRecordMutation builder.
func (m *SysLogRecordMutation) Where(ps ...predicate.SysLogRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysLogRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysLogRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysLogRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysLogRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysLogRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysLogRecord).
func (m *SysLogRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysLogRecordMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.user_id != nil {
		fields = append(fields, syslogrecord.FieldUserID)
	}
	if m.user_name != nil {
		fields = append(fields, syslogrecord.FieldUserName)
	}
	if m.is_login != nil {
		fields = append(fields, syslogrecord.FieldIsLogin)
	}
	if m.session_id != nil {
		fields = append(fields, syslogrecord.FieldSessionID)
	}
	if m.method != nil {
		fields = append(fields, syslogrecord.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, syslogrecord.FieldPath)
	}
	if m.request_time != nil {
		fields = append(fields, syslogrecord.FieldRequestTime)
	}
	if m.ip_address != nil {
		fields = append(fields, syslogrecord.FieldIPAddress)
	}
	if m.ip_location != nil {
		fields = append(fields, syslogrecord.FieldIPLocation)
	}
	if m.latency != nil {
		fields = append(fields, syslogrecord.FieldLatency)
	}
	if m.os != nil {
		fields = append(fields, syslogrecord.FieldOs)
	}
	if m.browser != nil {
		fields = append(fields, syslogrecord.FieldBrowser)
	}
	if m.user_agent != nil {
		fields = append(fields, syslogrecord.FieldUserAgent)
	}
	if m.header != nil {
		fields = append(fields, syslogrecord.FieldHeader)
	}
	if m.get_params != nil {
		fields = append(fields, syslogrecord.FieldGetParams)
	}
	if m.post_data != nil {
		fields = append(fields, syslogrecord.FieldPostData)
	}
	if m.res_code != nil {
		fields = append(fields, syslogrecord.FieldResCode)
	}
	if m.reason != nil {
		fields = append(fields, syslogrecord.FieldReason)
	}
	if m.res_status != nil {
		fields = append(fields, syslogrecord.FieldResStatus)
	}
	if m.stack != nil {
		fields = append(fields, syslogrecord.FieldStack)
	}
	if m.create_time != nil {
		fields = append(fields, syslogrecord.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysLogRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syslogrecord.FieldUserID:
		return m.UserID()
	case syslogrecord.FieldUserName:
		return m.UserName()
	case syslogrecord.FieldIsLogin:
		return m.IsLogin()
	case syslogrecord.FieldSessionID:
		return m.SessionID()
	case syslogrecord.FieldMethod:
		return m.Method()
	case syslogrecord.FieldPath:
		return m.Path()
	case syslogrecord.FieldRequestTime:
		return m.RequestTime()
	case syslogrecord.FieldIPAddress:
		return m.IPAddress()
	case syslogrecord.FieldIPLocation:
		return m.IPLocation()
	case syslogrecord.FieldLatency:
		return m.Latency()
	case syslogrecord.FieldOs:
		return m.Os()
	case syslogrecord.FieldBrowser:
		return m.Browser()
	case syslogrecord.FieldUserAgent:
		return m.UserAgent()
	case syslogrecord.FieldHeader:
		return m.Header()
	case syslogrecord.FieldGetParams:
		return m.GetParams()
	case syslogrecord.FieldPostData:
		return m.PostData()
	case syslogrecord.FieldResCode:
		return m.ResCode()
	case syslogrecord.FieldReason:
		return m.Reason()
	case syslogrecord.FieldResStatus:
		return m.ResStatus()
	case syslogrecord.FieldStack:
		return m.Stack()
	case syslogrecord.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysLogRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syslogrecord.FieldUserID:
		return m.OldUserID(ctx)
	case syslogrecord.FieldUserName:
		return m.OldUserName(ctx)
	case syslogrecord.FieldIsLogin:
		return m.OldIsLogin(ctx)
	case syslogrecord.FieldSessionID:
		return m.OldSessionID(ctx)
	case syslogrecord.FieldMethod:
		return m.OldMethod(ctx)
	case syslogrecord.FieldPath:
		return m.OldPath(ctx)
	case syslogrecord.FieldRequestTime:
		return m.OldRequestTime(ctx)
	case syslogrecord.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case syslogrecord.FieldIPLocation:
		return m.OldIPLocation(ctx)
	case syslogrecord.FieldLatency:
		return m.OldLatency(ctx)
	case syslogrecord.FieldOs:
		return m.OldOs(ctx)
	case syslogrecord.FieldBrowser:
		return m.OldBrowser(ctx)
	case syslogrecord.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case syslogrecord.FieldHeader:
		return m.OldHeader(ctx)
	case syslogrecord.FieldGetParams:
		return m.OldGetParams(ctx)
	case syslogrecord.FieldPostData:
		return m.OldPostData(ctx)
	case syslogrecord.FieldResCode:
		return m.OldResCode(ctx)
	case syslogrecord.FieldReason:
		return m.OldReason(ctx)
	case syslogrecord.FieldResStatus:
		return m.OldResStatus(ctx)
	case syslogrecord.FieldStack:
		return m.OldStack(ctx)
	case syslogrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysLogRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLogRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syslogrecord.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case syslogrecord.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case syslogrecord.FieldIsLogin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLogin(v)
		return nil
	case syslogrecord.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case syslogrecord.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case syslogrecord.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case syslogrecord.FieldRequestTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestTime(v)
		return nil
	case syslogrecord.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case syslogrecord.FieldIPLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPLocation(v)
		return nil
	case syslogrecord.FieldLatency:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatency(v)
		return nil
	case syslogrecord.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case syslogrecord.FieldBrowser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowser(v)
		return nil
	case syslogrecord.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case syslogrecord.FieldHeader:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeader(v)
		return nil
	case syslogrecord.FieldGetParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGetParams(v)
		return nil
	case syslogrecord.FieldPostData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostData(v)
		return nil
	case syslogrecord.FieldResCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResCode(v)
		return nil
	case syslogrecord.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case syslogrecord.FieldResStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResStatus(v)
		return nil
	case syslogrecord.FieldStack:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStack(v)
		return nil
	case syslogrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysLogRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysLogRecordMutation) AddedFields() []string {
	var fields []string
	if m.addlatency != nil {
		fields = append(fields, syslogrecord.FieldLatency)
	}
	if m.addres_code != nil {
		fields = append(fields, syslogrecord.FieldResCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysLogRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case syslogrecord.FieldLatency:
		return m.AddedLatency()
	case syslogrecord.FieldResCode:
		return m.AddedResCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLogRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case syslogrecord.FieldLatency:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatency(v)
		return nil
	case syslogrecord.FieldResCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResCode(v)
		return nil
	}
	return fmt.Errorf("unknown SysLogRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysLogRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysLogRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysLogRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysLogRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysLogRecordMutation) ResetField(name string) error {
	switch name {
	case syslogrecord.FieldUserID:
		m.ResetUserID()
		return nil
	case syslogrecord.FieldUserName:
		m.ResetUserName()
		return nil
	case syslogrecord.FieldIsLogin:
		m.ResetIsLogin()
		return nil
	case syslogrecord.FieldSessionID:
		m.ResetSessionID()
		return nil
	case syslogrecord.FieldMethod:
		m.ResetMethod()
		return nil
	case syslogrecord.FieldPath:
		m.ResetPath()
		return nil
	case syslogrecord.FieldRequestTime:
		m.ResetRequestTime()
		return nil
	case syslogrecord.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case syslogrecord.FieldIPLocation:
		m.ResetIPLocation()
		return nil
	case syslogrecord.FieldLatency:
		m.ResetLatency()
		return nil
	case syslogrecord.FieldOs:
		m.ResetOs()
		return nil
	case syslogrecord.FieldBrowser:
		m.ResetBrowser()
		return nil
	case syslogrecord.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case syslogrecord.FieldHeader:
		m.ResetHeader()
		return nil
	case syslogrecord.FieldGetParams:
		m.ResetGetParams()
		return nil
	case syslogrecord.FieldPostData:
		m.ResetPostData()
		return nil
	case syslogrecord.FieldResCode:
		m.ResetResCode()
		return nil
	case syslogrecord.FieldReason:
		m.ResetReason()
		return nil
	case syslogrecord.FieldResStatus:
		m.ResetResStatus()
		return nil
	case syslogrecord.FieldStack:
		m.ResetStack()
		return nil
	case syslogrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown SysLogRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysLogRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysLogRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysLogRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysLogRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysLogRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysLogRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysLogRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysLogRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysLogRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysLogRecord edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	username      *string
	password      *string
	nickname      *string
	status        *int8
	addstatus     *int8
	avatar        *string
	desc          *string
	extension     *string
	clearedFields map[string]struct{}
	dept          map[int64]struct{}
	removeddept   map[int64]struct{}
	cleareddept   bool
	roles         map[int64]struct{}
	removedroles  map[int64]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetDesc sets the "desc" field.
func (m *UserMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *UserMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *UserMutation) ResetDesc() {
	m.desc = nil
}

// SetExtension sets the "extension" field.
func (m *UserMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *UserMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *UserMutation) ResetExtension() {
	m.extension = nil
}

// AddDeptIDs adds the "dept" edge to the Dept entity by ids.
func (m *UserMutation) AddDeptIDs(ids ...int64) {
	if m.dept == nil {
		m.dept = make(map[int64]struct{})
	}
	for i := range ids {
		m.dept[ids[i]] = struct{}{}
	}
}

// ClearDept clears the "dept" edge to the Dept entity.
func (m *UserMutation) ClearDept() {
	m.cleareddept = true
}

// DeptCleared reports if the "dept" edge to the Dept entity was cleared.
func (m *UserMutation) DeptCleared() bool {
	return m.cleareddept
}

// RemoveDeptIDs removes the "dept" edge to the Dept entity by IDs.
func (m *UserMutation) RemoveDeptIDs(ids ...int64) {
	if m.removeddept == nil {
		m.removeddept = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.dept, ids[i])
		m.removeddept[ids[i]] = struct{}{}
	}
}

// RemovedDept returns the removed IDs of the "dept" edge to the Dept entity.
func (m *UserMutation) RemovedDeptIDs() (ids []int64) {
	for id := range m.removeddept {
		ids = append(ids, id)
	}
	return
}

// DeptIDs returns the "dept" edge IDs in the mutation.
func (m *UserMutation) DeptIDs() (ids []int64) {
	for id := range m.dept {
		ids = append(ids, id)
	}
	return
}

// ResetDept resets all changes to the "dept" edge.
func (m *UserMutation) ResetDept() {
	m.dept = nil
	m.cleareddept = false
	m.removeddept = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *UserMutation) AddRoleIDs(ids ...int64) {
	if m.roles == nil {
		m.roles = make(map[int64]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *UserMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *UserMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *UserMutation) RemoveRoleIDs(ids ...int64) {
	if m.removedroles == nil {
		m.removedroles = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *UserMutation) RemovedRolesIDs() (ids []int64) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *UserMutation) RolesIDs() (ids []int64) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *UserMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.desc != nil {
		fields = append(fields, user.FieldDesc)
	}
	if m.extension != nil {
		fields = append(fields, user.FieldExtension)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldStatus:
		return m.Status()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldDesc:
		return m.Desc()
	case user.FieldExtension:
		return m.Extension()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldDesc:
		return m.OldDesc(ctx)
	case user.FieldExtension:
		return m.OldExtension(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case user.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldDesc:
		m.ResetDesc()
		return nil
	case user.FieldExtension:
		m.ResetExtension()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.dept != nil {
		edges = append(edges, user.EdgeDept)
	}
	if m.roles != nil {
		edges = append(edges, user.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDept:
		ids := make([]ent.Value, 0, len(m.dept))
		for id := range m.dept {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddept != nil {
		edges = append(edges, user.EdgeDept)
	}
	if m.removedroles != nil {
		edges = append(edges, user.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDept:
		ids := make([]ent.Value, 0, len(m.removeddept))
		for id := range m.removeddept {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddept {
		edges = append(edges, user.EdgeDept)
	}
	if m.clearedroles {
		edges = append(edges, user.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeDept:
		return m.cleareddept
	case user.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDept:
		m.ResetDept()
		return nil
	case user.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
