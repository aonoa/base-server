// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/predicate"
	"base-server/internal/data/ent/resource"
	"base-server/internal/data/ent/role"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks     []Hook
	mutation  *ResourceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *ResourceUpdate) SetUpdateTime(t time.Time) *ResourceUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetName sets the "name" field.
func (ru *ResourceUpdate) SetName(s string) *ResourceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableName(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *ResourceUpdate) SetType(s string) *ResourceUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableType(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// SetValue sets the "value" field.
func (ru *ResourceUpdate) SetValue(s string) *ResourceUpdate {
	ru.mutation.SetValue(s)
	return ru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableValue(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetValue(*s)
	}
	return ru
}

// SetMethod sets the "method" field.
func (ru *ResourceUpdate) SetMethod(s string) *ResourceUpdate {
	ru.mutation.SetMethod(s)
	return ru
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableMethod(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetMethod(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *ResourceUpdate) SetDescription(s string) *ResourceUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableDescription(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (ru *ResourceUpdate) AddRoleIDs(ids ...int64) *ResourceUpdate {
	ru.mutation.AddRoleIDs(ids...)
	return ru
}

// AddRoles adds the "roles" edges to the Role entity.
func (ru *ResourceUpdate) AddRoles(r ...*Role) *ResourceUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoleIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (ru *ResourceUpdate) ClearRoles() *ResourceUpdate {
	ru.mutation.ClearRoles()
	return ru
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (ru *ResourceUpdate) RemoveRoleIDs(ids ...int64) *ResourceUpdate {
	ru.mutation.RemoveRoleIDs(ids...)
	return ru
}

// RemoveRoles removes "roles" edges to Role entities.
func (ru *ResourceUpdate) RemoveRoles(r ...*Role) *ResourceUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourceUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := resource.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ResourceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.Value(); ok {
		_spec.SetField(resource.FieldValue, field.TypeString, value)
	}
	if value, ok := ru.mutation.Method(); ok {
		_spec.SetField(resource.FieldMethod, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResourceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (ruo *ResourceUpdateOne) SetUpdateTime(t time.Time) *ResourceUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *ResourceUpdateOne) SetName(s string) *ResourceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableName(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *ResourceUpdateOne) SetType(s string) *ResourceUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableType(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// SetValue sets the "value" field.
func (ruo *ResourceUpdateOne) SetValue(s string) *ResourceUpdateOne {
	ruo.mutation.SetValue(s)
	return ruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableValue(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetValue(*s)
	}
	return ruo
}

// SetMethod sets the "method" field.
func (ruo *ResourceUpdateOne) SetMethod(s string) *ResourceUpdateOne {
	ruo.mutation.SetMethod(s)
	return ruo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableMethod(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetMethod(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *ResourceUpdateOne) SetDescription(s string) *ResourceUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableDescription(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (ruo *ResourceUpdateOne) AddRoleIDs(ids ...int64) *ResourceUpdateOne {
	ruo.mutation.AddRoleIDs(ids...)
	return ruo
}

// AddRoles adds the "roles" edges to the Role entity.
func (ruo *ResourceUpdateOne) AddRoles(r ...*Role) *ResourceUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoleIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (ruo *ResourceUpdateOne) ClearRoles() *ResourceUpdateOne {
	ruo.mutation.ClearRoles()
	return ruo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (ruo *ResourceUpdateOne) RemoveRoleIDs(ids ...int64) *ResourceUpdateOne {
	ruo.mutation.RemoveRoleIDs(ids...)
	return ruo
}

// RemoveRoles removes "roles" edges to Role entities.
func (ruo *ResourceUpdateOne) RemoveRoles(r ...*Role) *ResourceUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ruo *ResourceUpdateOne) Where(ps ...predicate.Resource) *ResourceUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourceUpdateOne) Select(field string, fields ...string) *ResourceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resource entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourceUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := resource.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ResourceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for _, f := range fields {
			if !resource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Value(); ok {
		_spec.SetField(resource.FieldValue, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Method(); ok {
		_spec.SetField(resource.FieldMethod, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RolesTable,
			Columns: resource.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
