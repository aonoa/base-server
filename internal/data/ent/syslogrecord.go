// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/syslogrecord"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 系统日志表
type SysLogRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 数据唯一标识
	ID string `json:"id,omitempty"`
	// 用户id
	UserID string `json:"user_id,omitempty"`
	// 用户名
	UserName string `json:"user_name,omitempty"`
	// 是否登录日志
	IsLogin bool `json:"is_login,omitempty"`
	// 会话ID
	SessionID string `json:"session_id,omitempty"`
	// 请求方式GET|POST|PUT|DELETE|OPTIONS...
	Method string `json:"method,omitempty"`
	// 请求地址
	Path string `json:"path,omitempty"`
	// 请求时间
	RequestTime time.Time `json:"request_time,omitempty"`
	// IP地址
	IPAddress string `json:"ip_address,omitempty"`
	// IP归属地
	IPLocation string `json:"ip_location,omitempty"`
	// 响应耗时ms
	Latency int64 `json:"latency,omitempty"`
	// 平台
	Os string `json:"os,omitempty"`
	// 浏览器
	Browser string `json:"browser,omitempty"`
	// 访问代理
	UserAgent string `json:"user_agent,omitempty"`
	// 请求头
	Header string `json:"header,omitempty"`
	// Get参数
	GetParams string `json:"get_params,omitempty"`
	// Post数据
	PostData string `json:"post_data,omitempty"`
	// 响应状态码
	ResCode int32 `json:"res_code,omitempty"`
	// 错误原因
	Reason string `json:"reason,omitempty"`
	// 请求状态
	ResStatus bool `json:"res_status,omitempty"`
	// 错误堆栈
	Stack string `json:"stack,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysLogRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syslogrecord.FieldIsLogin, syslogrecord.FieldResStatus:
			values[i] = new(sql.NullBool)
		case syslogrecord.FieldLatency, syslogrecord.FieldResCode:
			values[i] = new(sql.NullInt64)
		case syslogrecord.FieldID, syslogrecord.FieldUserID, syslogrecord.FieldUserName, syslogrecord.FieldSessionID, syslogrecord.FieldMethod, syslogrecord.FieldPath, syslogrecord.FieldIPAddress, syslogrecord.FieldIPLocation, syslogrecord.FieldOs, syslogrecord.FieldBrowser, syslogrecord.FieldUserAgent, syslogrecord.FieldHeader, syslogrecord.FieldGetParams, syslogrecord.FieldPostData, syslogrecord.FieldReason, syslogrecord.FieldStack:
			values[i] = new(sql.NullString)
		case syslogrecord.FieldRequestTime, syslogrecord.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysLogRecord fields.
func (slr *SysLogRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syslogrecord.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				slr.ID = value.String
			}
		case syslogrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				slr.UserID = value.String
			}
		case syslogrecord.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				slr.UserName = value.String
			}
		case syslogrecord.FieldIsLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_login", values[i])
			} else if value.Valid {
				slr.IsLogin = value.Bool
			}
		case syslogrecord.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				slr.SessionID = value.String
			}
		case syslogrecord.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				slr.Method = value.String
			}
		case syslogrecord.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				slr.Path = value.String
			}
		case syslogrecord.FieldRequestTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field request_time", values[i])
			} else if value.Valid {
				slr.RequestTime = value.Time
			}
		case syslogrecord.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				slr.IPAddress = value.String
			}
		case syslogrecord.FieldIPLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_location", values[i])
			} else if value.Valid {
				slr.IPLocation = value.String
			}
		case syslogrecord.FieldLatency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field latency", values[i])
			} else if value.Valid {
				slr.Latency = value.Int64
			}
		case syslogrecord.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				slr.Os = value.String
			}
		case syslogrecord.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				slr.Browser = value.String
			}
		case syslogrecord.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				slr.UserAgent = value.String
			}
		case syslogrecord.FieldHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value.Valid {
				slr.Header = value.String
			}
		case syslogrecord.FieldGetParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field get_params", values[i])
			} else if value.Valid {
				slr.GetParams = value.String
			}
		case syslogrecord.FieldPostData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_data", values[i])
			} else if value.Valid {
				slr.PostData = value.String
			}
		case syslogrecord.FieldResCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field res_code", values[i])
			} else if value.Valid {
				slr.ResCode = int32(value.Int64)
			}
		case syslogrecord.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				slr.Reason = value.String
			}
		case syslogrecord.FieldResStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field res_status", values[i])
			} else if value.Valid {
				slr.ResStatus = value.Bool
			}
		case syslogrecord.FieldStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stack", values[i])
			} else if value.Valid {
				slr.Stack = value.String
			}
		case syslogrecord.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				slr.CreateTime = value.Time
			}
		default:
			slr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysLogRecord.
// This includes values selected through modifiers, order, etc.
func (slr *SysLogRecord) Value(name string) (ent.Value, error) {
	return slr.selectValues.Get(name)
}

// Update returns a builder for updating this SysLogRecord.
// Note that you need to call SysLogRecord.Unwrap() before calling this method if this SysLogRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (slr *SysLogRecord) Update() *SysLogRecordUpdateOne {
	return NewSysLogRecordClient(slr.config).UpdateOne(slr)
}

// Unwrap unwraps the SysLogRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (slr *SysLogRecord) Unwrap() *SysLogRecord {
	_tx, ok := slr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysLogRecord is not a transactional entity")
	}
	slr.config.driver = _tx.drv
	return slr
}

// String implements the fmt.Stringer.
func (slr *SysLogRecord) String() string {
	var builder strings.Builder
	builder.WriteString("SysLogRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", slr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(slr.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(slr.UserName)
	builder.WriteString(", ")
	builder.WriteString("is_login=")
	builder.WriteString(fmt.Sprintf("%v", slr.IsLogin))
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(slr.SessionID)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(slr.Method)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(slr.Path)
	builder.WriteString(", ")
	builder.WriteString("request_time=")
	builder.WriteString(slr.RequestTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(slr.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("ip_location=")
	builder.WriteString(slr.IPLocation)
	builder.WriteString(", ")
	builder.WriteString("latency=")
	builder.WriteString(fmt.Sprintf("%v", slr.Latency))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(slr.Os)
	builder.WriteString(", ")
	builder.WriteString("browser=")
	builder.WriteString(slr.Browser)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(slr.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("header=")
	builder.WriteString(slr.Header)
	builder.WriteString(", ")
	builder.WriteString("get_params=")
	builder.WriteString(slr.GetParams)
	builder.WriteString(", ")
	builder.WriteString("post_data=")
	builder.WriteString(slr.PostData)
	builder.WriteString(", ")
	builder.WriteString("res_code=")
	builder.WriteString(fmt.Sprintf("%v", slr.ResCode))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(slr.Reason)
	builder.WriteString(", ")
	builder.WriteString("res_status=")
	builder.WriteString(fmt.Sprintf("%v", slr.ResStatus))
	builder.WriteString(", ")
	builder.WriteString("stack=")
	builder.WriteString(slr.Stack)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(slr.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SysLogRecords is a parsable slice of SysLogRecord.
type SysLogRecords []*SysLogRecord
