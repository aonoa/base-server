// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/apiresources"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApiResources is the model entity for the ApiResources schema.
type ApiResources struct {
	config `json:"-"`
	// ID of the ent.
	// 数据唯一标识
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 路径
	Path string `json:"path,omitempty"`
	// 方法
	Method string `json:"method,omitempty"`
	// 模块
	Module string `json:"module,omitempty"`
	// 模块描述
	ModuleDescription string `json:"module_description,omitempty"`
	// 资源组
	ResourcesGroup string `json:"resources_group,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApiResourcesQuery when eager-loading is set.
	Edges        ApiResourcesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApiResourcesEdges holds the relations/edges for other nodes in the graph.
type ApiResourcesEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e ApiResourcesEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiResources) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apiresources.FieldID, apiresources.FieldDescription, apiresources.FieldPath, apiresources.FieldMethod, apiresources.FieldModule, apiresources.FieldModuleDescription, apiresources.FieldResourcesGroup:
			values[i] = new(sql.NullString)
		case apiresources.FieldCreateTime, apiresources.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiResources fields.
func (ar *ApiResources) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apiresources.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ar.ID = value.String
			}
		case apiresources.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ar.CreateTime = value.Time
			}
		case apiresources.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ar.UpdateTime = value.Time
			}
		case apiresources.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ar.Description = value.String
			}
		case apiresources.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				ar.Path = value.String
			}
		case apiresources.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ar.Method = value.String
			}
		case apiresources.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				ar.Module = value.String
			}
		case apiresources.FieldModuleDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_description", values[i])
			} else if value.Valid {
				ar.ModuleDescription = value.String
			}
		case apiresources.FieldResourcesGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resources_group", values[i])
			} else if value.Valid {
				ar.ResourcesGroup = value.String
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiResources.
// This includes values selected through modifiers, order, etc.
func (ar *ApiResources) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the ApiResources entity.
func (ar *ApiResources) QueryRoles() *RoleQuery {
	return NewApiResourcesClient(ar.config).QueryRoles(ar)
}

// Update returns a builder for updating this ApiResources.
// Note that you need to call ApiResources.Unwrap() before calling this method if this ApiResources
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *ApiResources) Update() *ApiResourcesUpdateOne {
	return NewApiResourcesClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the ApiResources entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *ApiResources) Unwrap() *ApiResources {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiResources is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *ApiResources) String() string {
	var builder strings.Builder
	builder.WriteString("ApiResources(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ar.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ar.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ar.Description)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(ar.Path)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(ar.Method)
	builder.WriteString(", ")
	builder.WriteString("module=")
	builder.WriteString(ar.Module)
	builder.WriteString(", ")
	builder.WriteString("module_description=")
	builder.WriteString(ar.ModuleDescription)
	builder.WriteString(", ")
	builder.WriteString("resources_group=")
	builder.WriteString(ar.ResourcesGroup)
	builder.WriteByte(')')
	return builder.String()
}

// ApiResourcesSlice is a parsable slice of ApiResources.
type ApiResourcesSlice []*ApiResources
