// Code generated by entgo-template. DO NOT EDIT.

package ent

// UpdateAll updates all fields of the Dept entity (excluding create_time and update_time).
func (u *DeptUpdateOne) UpdateAll(Dept *Dept) *DeptUpdateOne {
	update := u
	update = update.SetName(Dept.Name)
	update = update.SetSort(Dept.Sort)
	update = update.SetStatus(Dept.Status)
	update = update.SetDesc(Dept.Desc)
	update = update.SetExtension(Dept.Extension)
	update = update.SetDom(Dept.Dom)
	update = update.SetPid(Dept.Pid)
	return update
}

// UpdateAll updates all fields of the Menu entity (excluding create_time and update_time).
func (u *MenuUpdateOne) UpdateAll(Menu *Menu) *MenuUpdateOne {
	update := u
	update = update.SetPid(Menu.Pid)
	update = update.SetType(Menu.Type)
	update = update.SetStatus(Menu.Status)
	update = update.SetPath(Menu.Path)
	update = update.SetRedirect(Menu.Redirect)
	update = update.SetAlias(Menu.Alias)
	update = update.SetName(Menu.Name)
	update = update.SetComponent(Menu.Component)
	update = update.SetIcon(Menu.Icon)
	update = update.SetTitle(Menu.Title)
	update = update.SetOrder(Menu.Order)
	update = update.SetOpenInNewWindow(Menu.OpenInNewWindow)
	update = update.SetNoBasicLayout(Menu.NoBasicLayout)
	update = update.SetMenuVisibleWithForbidden(Menu.MenuVisibleWithForbidden)
	update = update.SetLink(Menu.Link)
	update = update.SetIframeSrc(Menu.IframeSrc)
	update = update.SetActiveIcon(Menu.ActiveIcon)
	update = update.SetActivePath(Menu.ActivePath)
	update = update.SetMaxNumOfOpenTab(Menu.MaxNumOfOpenTab)
	update = update.SetKeepalive(Menu.Keepalive)
	update = update.SetIgnoreAccess(Menu.IgnoreAccess)
	update = update.SetAuthority(Menu.Authority)
	update = update.SetAffixTab(Menu.AffixTab)
	update = update.SetAffixTabOrder(Menu.AffixTabOrder)
	update = update.SetHideInMenu(Menu.HideInMenu)
	update = update.SetHideInTab(Menu.HideInTab)
	update = update.SetHideInBreadcrumb(Menu.HideInBreadcrumb)
	update = update.SetHideChildrenInMenu(Menu.HideChildrenInMenu)
	update = update.SetFullPathKey(Menu.FullPathKey)
	update = update.SetBadge(Menu.Badge)
	update = update.SetBadgeType(Menu.BadgeType)
	update = update.SetBadgeVariants(Menu.BadgeVariants)
	return update
}

// UpdateAll updates all fields of the Role entity (excluding create_time and update_time).
func (u *RoleUpdateOne) UpdateAll(Role *Role) *RoleUpdateOne {
	update := u
	update = update.SetName(Role.Name)
	update = update.SetValue(Role.Value)
	update = update.SetStatus(Role.Status)
	update = update.SetDesc(Role.Desc)
	update = update.SetMenus(Role.Menus)
	return update
}

// UpdateAll updates all fields of the Rule entity (excluding create_time and update_time).
func (u *RuleUpdateOne) UpdateAll(Rule *Rule) *RuleUpdateOne {
	update := u
	update = update.SetPtype(Rule.Ptype)
	update = update.SetV0(Rule.V0)
	update = update.SetV1(Rule.V1)
	update = update.SetV2(Rule.V2)
	update = update.SetV3(Rule.V3)
	update = update.SetV4(Rule.V4)
	update = update.SetV5(Rule.V5)
	return update
}

// UpdateAll updates all fields of the User entity (excluding create_time and update_time).
func (u *UserUpdateOne) UpdateAll(User *User) *UserUpdateOne {
	update := u
	update = update.SetUsername(User.Username)
	update = update.SetPassword(User.Password)
	update = update.SetNickname(User.Nickname)
	update = update.SetStatus(User.Status)
	update = update.SetAvatar(User.Avatar)
	update = update.SetDesc(User.Desc)
	update = update.SetExtension(User.Extension)
	return update
}
