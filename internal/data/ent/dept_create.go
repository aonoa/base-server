// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/dept"
	"base-server/internal/data/ent/role"
	"base-server/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DeptCreate is the builder for creating a Dept entity.
type DeptCreate struct {
	config
	mutation *DeptMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DeptCreate) SetCreateTime(t time.Time) *DeptCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DeptCreate) SetNillableCreateTime(t *time.Time) *DeptCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DeptCreate) SetUpdateTime(t time.Time) *DeptCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DeptCreate) SetNillableUpdateTime(t *time.Time) *DeptCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DeptCreate) SetName(s string) *DeptCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetSort sets the "sort" field.
func (dc *DeptCreate) SetSort(i int32) *DeptCreate {
	dc.mutation.SetSort(i)
	return dc
}

// SetStatus sets the "status" field.
func (dc *DeptCreate) SetStatus(b bool) *DeptCreate {
	dc.mutation.SetStatus(b)
	return dc
}

// SetDesc sets the "desc" field.
func (dc *DeptCreate) SetDesc(s string) *DeptCreate {
	dc.mutation.SetDesc(s)
	return dc
}

// SetExtension sets the "extension" field.
func (dc *DeptCreate) SetExtension(s string) *DeptCreate {
	dc.mutation.SetExtension(s)
	return dc
}

// SetDom sets the "dom" field.
func (dc *DeptCreate) SetDom(i int64) *DeptCreate {
	dc.mutation.SetDom(i)
	return dc
}

// SetPid sets the "pid" field.
func (dc *DeptCreate) SetPid(i int64) *DeptCreate {
	dc.mutation.SetPid(i)
	return dc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (dc *DeptCreate) SetNillablePid(i *int64) *DeptCreate {
	if i != nil {
		dc.SetPid(*i)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeptCreate) SetID(i int64) *DeptCreate {
	dc.mutation.SetID(i)
	return dc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (dc *DeptCreate) AddUserIDs(ids ...uuid.UUID) *DeptCreate {
	dc.mutation.AddUserIDs(ids...)
	return dc
}

// AddUsers adds the "users" edges to the User entity.
func (dc *DeptCreate) AddUsers(u ...*User) *DeptCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dc.AddUserIDs(ids...)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (dc *DeptCreate) SetRolesID(id int64) *DeptCreate {
	dc.mutation.SetRolesID(id)
	return dc
}

// SetNillableRolesID sets the "roles" edge to the Role entity by ID if the given value is not nil.
func (dc *DeptCreate) SetNillableRolesID(id *int64) *DeptCreate {
	if id != nil {
		dc = dc.SetRolesID(*id)
	}
	return dc
}

// SetRoles sets the "roles" edge to the Role entity.
func (dc *DeptCreate) SetRoles(r *Role) *DeptCreate {
	return dc.SetRolesID(r.ID)
}

// SetParentID sets the "parent" edge to the Dept entity by ID.
func (dc *DeptCreate) SetParentID(id int64) *DeptCreate {
	dc.mutation.SetParentID(id)
	return dc
}

// SetNillableParentID sets the "parent" edge to the Dept entity by ID if the given value is not nil.
func (dc *DeptCreate) SetNillableParentID(id *int64) *DeptCreate {
	if id != nil {
		dc = dc.SetParentID(*id)
	}
	return dc
}

// SetParent sets the "parent" edge to the Dept entity.
func (dc *DeptCreate) SetParent(d *Dept) *DeptCreate {
	return dc.SetParentID(d.ID)
}

// AddChildIDs adds the "children" edge to the Dept entity by IDs.
func (dc *DeptCreate) AddChildIDs(ids ...int64) *DeptCreate {
	dc.mutation.AddChildIDs(ids...)
	return dc
}

// AddChildren adds the "children" edges to the Dept entity.
func (dc *DeptCreate) AddChildren(d ...*Dept) *DeptCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddChildIDs(ids...)
}

// Mutation returns the DeptMutation object of the builder.
func (dc *DeptCreate) Mutation() *DeptMutation {
	return dc.mutation
}

// Save creates the Dept in the database.
func (dc *DeptCreate) Save(ctx context.Context) (*Dept, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeptCreate) SaveX(ctx context.Context) *Dept {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeptCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeptCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeptCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := dept.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := dept.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeptCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Dept.create_time"`)}
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Dept.update_time"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Dept.name"`)}
	}
	if _, ok := dc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Dept.sort"`)}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Dept.status"`)}
	}
	if _, ok := dc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Dept.desc"`)}
	}
	if _, ok := dc.mutation.Extension(); !ok {
		return &ValidationError{Name: "extension", err: errors.New(`ent: missing required field "Dept.extension"`)}
	}
	if _, ok := dc.mutation.Dom(); !ok {
		return &ValidationError{Name: "dom", err: errors.New(`ent: missing required field "Dept.dom"`)}
	}
	return nil
}

func (dc *DeptCreate) sqlSave(ctx context.Context) (*Dept, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeptCreate) createSpec() (*Dept, *sqlgraph.CreateSpec) {
	var (
		_node = &Dept{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dept.Table, sqlgraph.NewFieldSpec(dept.FieldID, field.TypeInt64))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(dept.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.SetField(dept.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(dept.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Sort(); ok {
		_spec.SetField(dept.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(dept.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.Desc(); ok {
		_spec.SetField(dept.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := dc.mutation.Extension(); ok {
		_spec.SetField(dept.FieldExtension, field.TypeString, value)
		_node.Extension = value
	}
	if value, ok := dc.mutation.Dom(); ok {
		_spec.SetField(dept.FieldDom, field.TypeInt64, value)
		_node.Dom = value
	}
	if nodes := dc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dept.UsersTable,
			Columns: dept.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dept.RolesTable,
			Columns: []string{dept.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dept_roles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeptCreateBulk is the builder for creating many Dept entities in bulk.
type DeptCreateBulk struct {
	config
	err      error
	builders []*DeptCreate
}

// Save creates the Dept entities in the database.
func (dcb *DeptCreateBulk) Save(ctx context.Context) ([]*Dept, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dept, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeptCreateBulk) SaveX(ctx context.Context) []*Dept {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeptCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeptCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
