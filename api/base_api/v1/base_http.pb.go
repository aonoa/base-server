// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.1
// source: base_api/v1/base.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBaseAddDept = "/api.base_api.v1.Base/AddDept"
const OperationBaseAddRole = "/api.base_api.v1.Base/AddRole"
const OperationBaseAddUser = "/api.base_api.v1.Base/AddUser"
const OperationBaseChangePassword = "/api.base_api.v1.Base/ChangePassword"
const OperationBaseCreateMenu = "/api.base_api.v1.Base/CreateMenu"
const OperationBaseDelDept = "/api.base_api.v1.Base/DelDept"
const OperationBaseDelRole = "/api.base_api.v1.Base/DelRole"
const OperationBaseDelUser = "/api.base_api.v1.Base/DelUser"
const OperationBaseDeleteMenu = "/api.base_api.v1.Base/DeleteMenu"
const OperationBaseGetAccessCodes = "/api.base_api.v1.Base/GetAccessCodes"
const OperationBaseGetAccountList = "/api.base_api.v1.Base/GetAccountList"
const OperationBaseGetAllRoleList = "/api.base_api.v1.Base/GetAllRoleList"
const OperationBaseGetDeptList = "/api.base_api.v1.Base/GetDeptList"
const OperationBaseGetMenuList = "/api.base_api.v1.Base/GetMenuList"
const OperationBaseGetRoleListByPage = "/api.base_api.v1.Base/GetRoleListByPage"
const OperationBaseGetSysMenuList = "/api.base_api.v1.Base/GetSysMenuList"
const OperationBaseGetUserInfo = "/api.base_api.v1.Base/GetUserInfo"
const OperationBaseIsAccountExist = "/api.base_api.v1.Base/IsAccountExist"
const OperationBaseIsMenuNameExists = "/api.base_api.v1.Base/IsMenuNameExists"
const OperationBaseIsMenuPathExists = "/api.base_api.v1.Base/IsMenuPathExists"
const OperationBaseLogin = "/api.base_api.v1.Base/Login"
const OperationBaseLogout = "/api.base_api.v1.Base/Logout"
const OperationBaseReLoadPolicy = "/api.base_api.v1.Base/ReLoadPolicy"
const OperationBaseRefreshToken = "/api.base_api.v1.Base/RefreshToken"
const OperationBaseSetRoleStatus = "/api.base_api.v1.Base/SetRoleStatus"
const OperationBaseUpdateDept = "/api.base_api.v1.Base/UpdateDept"
const OperationBaseUpdateMenu = "/api.base_api.v1.Base/UpdateMenu"
const OperationBaseUpdateRole = "/api.base_api.v1.Base/UpdateRole"

type BaseHTTPServer interface {
	// AddDept 新增部门
	AddDept(context.Context, *DeptListItem) (*DeptListItem, error)
	// AddRole 新增角色
	AddRole(context.Context, *RoleListItem) (*RoleListItem, error)
	// AddUser 新增用户
	AddUser(context.Context, *AccountListItem) (*AccountListItem, error)
	// ChangePassword 改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	// CreateMenu 创建菜单 （未实现）
	CreateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error)
	// DelDept 删除部门
	DelDept(context.Context, *DeleteDept) (*emptypb.Empty, error)
	// DelRole 删除角色
	DelRole(context.Context, *DeleteRole) (*emptypb.Empty, error)
	// DelUser 删除用户
	DelUser(context.Context, *DeleteUser) (*emptypb.Empty, error)
	// DeleteMenu 删除菜单 （未实现）
	DeleteMenu(context.Context, *DeleteMenuRequest) (*emptypb.Empty, error)
	// GetAccessCodes 获取权限code
	GetAccessCodes(context.Context, *emptypb.Empty) (*GetAccessCodesReply, error)
	// GetAccountList 获取账户列表
	GetAccountList(context.Context, *AccountParams) (*GetAccountListReply, error)
	// GetAllRoleList 获取角色信息
	GetAllRoleList(context.Context, *RoleParams) (*GetRoleListByPageReply, error)
	// GetDeptList 获取部门列表
	GetDeptList(context.Context, *emptypb.Empty) (*GetDeptListReply, error)
	// GetMenuList 获取路由菜单列表
	//	rpc GetMenuList (google.protobuf.Empty) returns (GetMenuListReply) {
	GetMenuList(context.Context, *emptypb.Empty) (*GetSysMenuListReply, error)
	// GetRoleListByPage 获取角色列表 (待重构)
	GetRoleListByPage(context.Context, *RolePageParams) (*GetRoleListByPageReply, error)
	// GetSysMenuList/////////////////////////////////////////////////// 系统菜单管理
	// 获取菜单列表
	GetSysMenuList(context.Context, *MenuParams) (*GetSysMenuListReply, error)
	// GetUserInfo 获取用户信息
	GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error)
	// IsAccountExist 检查用户是否存在 （未实现）
	IsAccountExist(context.Context, *IsAccountRequest) (*emptypb.Empty, error)
	// IsMenuNameExists 菜单名称是否存在
	IsMenuNameExists(context.Context, *IsMenuNameExistsRequest) (*IsMenuNameExistsReply, error)
	// IsMenuPathExists 路由地址是否存在
	IsMenuPathExists(context.Context, *IsMenuPathExistsRequest) (*IsMenuPathExistsReply, error)
	// Login 用户登陆
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// Logout 注销登陆 (仅靠jwt无法实现退出功能)(未实现，主要靠前端删凭证)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ReLoadPolicy////////////////////////////////////////////////// (重新加载casbin权限数据)
	ReLoadPolicy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// RefreshToken 使用refreshToken换取accessToken
	RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error)
	// SetRoleStatus 设置角色状态
	SetRoleStatus(context.Context, *SetRoleStatusRequest) (*emptypb.Empty, error)
	// UpdateDept 修改部门
	UpdateDept(context.Context, *DeptListItem) (*DeptListItem, error)
	// UpdateMenu 更新菜单 （未实现）
	UpdateMenu(context.Context, *SysMenuListItem) (*emptypb.Empty, error)
	// UpdateRole 修改角色
	UpdateRole(context.Context, *RoleListItem) (*RoleListItem, error)
}

func RegisterBaseHTTPServer(s *http.Server, srv BaseHTTPServer) {
	r := s.Route("/")
	r.POST("/basic-api/auth/login", _Base_Login0_HTTP_Handler(srv))
	r.GET("/basic-api/user/info", _Base_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/basic-api/auth/codes", _Base_GetAccessCodes0_HTTP_Handler(srv))
	r.POST("/basic-api/auth/logout", _Base_Logout0_HTTP_Handler(srv))
	r.GET("/basic-api/menu/all", _Base_GetMenuList0_HTTP_Handler(srv))
	r.POST("/basic-api/auth/refresh", _Base_RefreshToken0_HTTP_Handler(srv))
	r.POST("/basic-api/auth/reloadPolicy", _Base_ReLoadPolicy0_HTTP_Handler(srv))
	r.GET("/basic-api/system/getAccountList", _Base_GetAccountList0_HTTP_Handler(srv))
	r.POST("/basic-api/system/addUser", _Base_AddUser0_HTTP_Handler(srv))
	r.DELETE("/basic-api/system/delUser/{id}", _Base_DelUser0_HTTP_Handler(srv))
	r.GET("/basic-api/system/getRoleListByPage", _Base_GetRoleListByPage0_HTTP_Handler(srv))
	r.GET("/basic-api/system/menu/list", _Base_GetSysMenuList0_HTTP_Handler(srv))
	r.GET("/basic-api/system/menu/name-exists", _Base_IsMenuNameExists0_HTTP_Handler(srv))
	r.GET("/basic-api/system/menu/path-exists", _Base_IsMenuPathExists0_HTTP_Handler(srv))
	r.POST("/basic-api/system/menu", _Base_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/basic-api/system/menu/{id}", _Base_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/basic-api/system/menu/{id}", _Base_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/basic-api/system/getDeptList", _Base_GetDeptList0_HTTP_Handler(srv))
	r.POST("/basic-api/system/addDept", _Base_AddDept0_HTTP_Handler(srv))
	r.POST("/basic-api/system/updateDept", _Base_UpdateDept0_HTTP_Handler(srv))
	r.DELETE("/basic-api/system/delDept/{id}", _Base_DelDept0_HTTP_Handler(srv))
	r.POST("/basic-api/system/addRole", _Base_AddRole0_HTTP_Handler(srv))
	r.DELETE("/basic-api/system/delRole/{id}", _Base_DelRole0_HTTP_Handler(srv))
	r.POST("/basic-api/system/updateRole", _Base_UpdateRole0_HTTP_Handler(srv))
	r.GET("/basic-api/system/getAllRoleList", _Base_GetAllRoleList0_HTTP_Handler(srv))
	r.POST("/basic-api/system/setRoleStatus", _Base_SetRoleStatus0_HTTP_Handler(srv))
	r.POST("/basic-api/system/accountExist", _Base_IsAccountExist0_HTTP_Handler(srv))
	r.POST("/basic-api/system/changePassword", _Base_ChangePassword0_HTTP_Handler(srv))
}

func _Base_Login0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Base_GetUserInfo0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Base_GetAccessCodes0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetAccessCodes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccessCodes(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccessCodesReply)
		return ctx.Result(200, reply.AccessCodeList)
	}
}

func _Base_Logout0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_GetMenuList0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetMenuList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSysMenuListReply)
		return ctx.Result(200, reply.Items)
	}
}

func _Base_RefreshToken0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Base_ReLoadPolicy0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseReLoadPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReLoadPolicy(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_GetAccountList0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountParams
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetAccountList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountList(ctx, req.(*AccountParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountListReply)
		return ctx.Result(200, reply)
	}
}

func _Base_AddUser0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseAddUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUser(ctx, req.(*AccountListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountListItem)
		return ctx.Result(200, reply)
	}
}

func _Base_DelUser0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUser
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseDelUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUser(ctx, req.(*DeleteUser))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_GetRoleListByPage0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RolePageParams
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetRoleListByPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleListByPage(ctx, req.(*RolePageParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleListByPageReply)
		return ctx.Result(200, reply)
	}
}

func _Base_GetSysMenuList0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MenuParams
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetSysMenuList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysMenuList(ctx, req.(*MenuParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSysMenuListReply)
		return ctx.Result(200, reply)
	}
}

func _Base_IsMenuNameExists0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IsMenuNameExistsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseIsMenuNameExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IsMenuNameExists(ctx, req.(*IsMenuNameExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IsMenuNameExistsReply)
		return ctx.Result(200, reply.Data)
	}
}

func _Base_IsMenuPathExists0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IsMenuPathExistsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseIsMenuPathExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IsMenuPathExists(ctx, req.(*IsMenuPathExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IsMenuPathExistsReply)
		return ctx.Result(200, reply.Data)
	}
}

func _Base_CreateMenu0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysMenuListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*SysMenuListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_UpdateMenu0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysMenuListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*SysMenuListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_DeleteMenu0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_GetDeptList0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetDeptList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeptList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeptListReply)
		return ctx.Result(200, reply.Items)
	}
}

func _Base_AddDept0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseAddDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddDept(ctx, req.(*DeptListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptListItem)
		return ctx.Result(200, reply)
	}
}

func _Base_UpdateDept0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDept(ctx, req.(*DeptListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptListItem)
		return ctx.Result(200, reply)
	}
}

func _Base_DelDept0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDept
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseDelDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelDept(ctx, req.(*DeleteDept))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_AddRole0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseAddRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRole(ctx, req.(*RoleListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleListItem)
		return ctx.Result(200, reply)
	}
}

func _Base_DelRole0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRole
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseDelRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelRole(ctx, req.(*DeleteRole))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_UpdateRole0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleListItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*RoleListItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleListItem)
		return ctx.Result(200, reply)
	}
}

func _Base_GetAllRoleList0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleParams
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseGetAllRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllRoleList(ctx, req.(*RoleParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleListByPageReply)
		return ctx.Result(200, reply.Items)
	}
}

func _Base_SetRoleStatus0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoleStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseSetRoleStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRoleStatus(ctx, req.(*SetRoleStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_IsAccountExist0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IsAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseIsAccountExist)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IsAccountExist(ctx, req.(*IsAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Base_ChangePassword0_HTTP_Handler(srv BaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBaseChangePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangePassword(ctx, req.(*ChangePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BaseHTTPClient interface {
	AddDept(ctx context.Context, req *DeptListItem, opts ...http.CallOption) (rsp *DeptListItem, err error)
	AddRole(ctx context.Context, req *RoleListItem, opts ...http.CallOption) (rsp *RoleListItem, err error)
	AddUser(ctx context.Context, req *AccountListItem, opts ...http.CallOption) (rsp *AccountListItem, err error)
	ChangePassword(ctx context.Context, req *ChangePasswordRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateMenu(ctx context.Context, req *SysMenuListItem, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DelDept(ctx context.Context, req *DeleteDept, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DelRole(ctx context.Context, req *DeleteRole, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DelUser(ctx context.Context, req *DeleteUser, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccessCodes(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAccessCodesReply, err error)
	GetAccountList(ctx context.Context, req *AccountParams, opts ...http.CallOption) (rsp *GetAccountListReply, err error)
	GetAllRoleList(ctx context.Context, req *RoleParams, opts ...http.CallOption) (rsp *GetRoleListByPageReply, err error)
	GetDeptList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetDeptListReply, err error)
	GetMenuList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetSysMenuListReply, err error)
	GetRoleListByPage(ctx context.Context, req *RolePageParams, opts ...http.CallOption) (rsp *GetRoleListByPageReply, err error)
	GetSysMenuList(ctx context.Context, req *MenuParams, opts ...http.CallOption) (rsp *GetSysMenuListReply, err error)
	GetUserInfo(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	IsAccountExist(ctx context.Context, req *IsAccountRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	IsMenuNameExists(ctx context.Context, req *IsMenuNameExistsRequest, opts ...http.CallOption) (rsp *IsMenuNameExistsReply, err error)
	IsMenuPathExists(ctx context.Context, req *IsMenuPathExistsRequest, opts ...http.CallOption) (rsp *IsMenuPathExistsReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ReLoadPolicy(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	RefreshToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LoginReply, err error)
	SetRoleStatus(ctx context.Context, req *SetRoleStatusRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateDept(ctx context.Context, req *DeptListItem, opts ...http.CallOption) (rsp *DeptListItem, err error)
	UpdateMenu(ctx context.Context, req *SysMenuListItem, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateRole(ctx context.Context, req *RoleListItem, opts ...http.CallOption) (rsp *RoleListItem, err error)
}

type BaseHTTPClientImpl struct {
	cc *http.Client
}

func NewBaseHTTPClient(client *http.Client) BaseHTTPClient {
	return &BaseHTTPClientImpl{client}
}

func (c *BaseHTTPClientImpl) AddDept(ctx context.Context, in *DeptListItem, opts ...http.CallOption) (*DeptListItem, error) {
	var out DeptListItem
	pattern := "/basic-api/system/addDept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseAddDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) AddRole(ctx context.Context, in *RoleListItem, opts ...http.CallOption) (*RoleListItem, error) {
	var out RoleListItem
	pattern := "/basic-api/system/addRole"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseAddRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) AddUser(ctx context.Context, in *AccountListItem, opts ...http.CallOption) (*AccountListItem, error) {
	var out AccountListItem
	pattern := "/basic-api/system/addUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/changePassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseChangePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) CreateMenu(ctx context.Context, in *SysMenuListItem, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) DelDept(ctx context.Context, in *DeleteDept, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/delDept/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseDelDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) DelRole(ctx context.Context, in *DeleteRole, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/delRole/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseDelRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) DelUser(ctx context.Context, in *DeleteUser, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/delUser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseDelUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetAccessCodes(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAccessCodesReply, error) {
	var out GetAccessCodesReply
	pattern := "/basic-api/auth/codes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetAccessCodes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.AccessCodeList, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetAccountList(ctx context.Context, in *AccountParams, opts ...http.CallOption) (*GetAccountListReply, error) {
	var out GetAccountListReply
	pattern := "/basic-api/system/getAccountList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetAccountList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetAllRoleList(ctx context.Context, in *RoleParams, opts ...http.CallOption) (*GetRoleListByPageReply, error) {
	var out GetRoleListByPageReply
	pattern := "/basic-api/system/getAllRoleList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetAllRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Items, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetDeptList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetDeptListReply, error) {
	var out GetDeptListReply
	pattern := "/basic-api/system/getDeptList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetDeptList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Items, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetMenuList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetSysMenuListReply, error) {
	var out GetSysMenuListReply
	pattern := "/basic-api/menu/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetMenuList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Items, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetRoleListByPage(ctx context.Context, in *RolePageParams, opts ...http.CallOption) (*GetRoleListByPageReply, error) {
	var out GetRoleListByPageReply
	pattern := "/basic-api/system/getRoleListByPage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetRoleListByPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetSysMenuList(ctx context.Context, in *MenuParams, opts ...http.CallOption) (*GetSysMenuListReply, error) {
	var out GetSysMenuListReply
	pattern := "/basic-api/system/menu/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetSysMenuList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/basic-api/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) IsAccountExist(ctx context.Context, in *IsAccountRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/accountExist"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseIsAccountExist))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) IsMenuNameExists(ctx context.Context, in *IsMenuNameExistsRequest, opts ...http.CallOption) (*IsMenuNameExistsReply, error) {
	var out IsMenuNameExistsReply
	pattern := "/basic-api/system/menu/name-exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseIsMenuNameExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) IsMenuPathExists(ctx context.Context, in *IsMenuPathExistsRequest, opts ...http.CallOption) (*IsMenuPathExistsReply, error) {
	var out IsMenuPathExistsReply
	pattern := "/basic-api/system/menu/path-exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBaseIsMenuPathExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/basic-api/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) Logout(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) ReLoadPolicy(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/auth/reloadPolicy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseReLoadPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/basic-api/auth/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) SetRoleStatus(ctx context.Context, in *SetRoleStatusRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/setRoleStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseSetRoleStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) UpdateDept(ctx context.Context, in *DeptListItem, opts ...http.CallOption) (*DeptListItem, error) {
	var out DeptListItem
	pattern := "/basic-api/system/updateDept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) UpdateMenu(ctx context.Context, in *SysMenuListItem, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/basic-api/system/menu/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BaseHTTPClientImpl) UpdateRole(ctx context.Context, in *RoleListItem, opts ...http.CallOption) (*RoleListItem, error) {
	var out RoleListItem
	pattern := "/basic-api/system/updateRole"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBaseUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
