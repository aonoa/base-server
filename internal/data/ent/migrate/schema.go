// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DeptsColumns holds the columns for the "depts" table.
	DeptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Comment: "部门名称"},
		{Name: "sort", Type: field.TypeInt, Comment: "排序"},
		{Name: "status", Type: field.TypeBool, Comment: "0-锁定，1-正常"},
		{Name: "desc", Type: field.TypeString, Comment: "备注"},
		{Name: "extension", Type: field.TypeString, Comment: "扩展信息"},
		{Name: "dom", Type: field.TypeInt64, Comment: "域"},
		{Name: "dept_roles", Type: field.TypeInt64, Nullable: true},
		{Name: "pid", Type: field.TypeInt64, Nullable: true, Comment: "父节点id"},
	}
	// DeptsTable holds the schema information for the "depts" table.
	DeptsTable = &schema.Table{
		Name:       "depts",
		Columns:    DeptsColumns,
		PrimaryKey: []*schema.Column{DeptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "depts_roles_roles",
				Columns:    []*schema.Column{DeptsColumns[9]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "depts_depts_children",
				Columns:    []*schema.Column{DeptsColumns[10]},
				RefColumns: []*schema.Column{DeptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MenusColumns holds the columns for the "menus" table.
	MenusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "pid", Type: field.TypeInt64, Comment: "上一级ID"},
		{Name: "type", Type: field.TypeInt8, Comment: "菜单类型,0-目录,1-菜单,2-按钮"},
		{Name: "status", Type: field.TypeBool, Comment: "状态,0-禁用，1-启用"},
		{Name: "name", Type: field.TypeString, Comment: "组件名"},
		{Name: "title", Type: field.TypeString, Comment: "显示名称"},
		{Name: "icon", Type: field.TypeString, Comment: "图标"},
		{Name: "order", Type: field.TypeInt32, Comment: "排序(越小越前)"},
		{Name: "path", Type: field.TypeString, Comment: "路由path"},
		{Name: "component", Type: field.TypeString, Comment: "组件路径"},
		{Name: "redirect", Type: field.TypeString, Comment: "重定向path"},
		{Name: "link", Type: field.TypeString, Comment: "外链-跳转路径"},
		{Name: "iframe_src", Type: field.TypeString, Comment: "iframe地址"},
		{Name: "active_icon", Type: field.TypeString, Comment: "激活图标"},
		{Name: "active_path", Type: field.TypeString, Comment: "当前激活的菜单，有时候不想激活现有菜单，需要激活父级菜单时使用"},
		{Name: "max_num_of_open_tab", Type: field.TypeInt16, Comment: "标签页最大打开数量"},
		{Name: "ignore_auth", Type: field.TypeBool, Comment: "忽略权限,0-否，1-是"},
		{Name: "keepalive", Type: field.TypeBool, Comment: "缓存,0-否，1-是"},
		{Name: "permission", Type: field.TypeString, Comment: "权限标识"},
		{Name: "affix_tab", Type: field.TypeBool, Comment: "固钉,0-否，1-是"},
		{Name: "affix_tab_order", Type: field.TypeInt64, Comment: "固定标签页的顺序"},
		{Name: "hide_in_menu", Type: field.TypeBool, Comment: "隐藏在菜单,0-否，1-是", Default: false},
		{Name: "hide_in_tab", Type: field.TypeBool, Comment: "隐藏在标签页,0-否，1-是", Default: false},
		{Name: "hide_in_breadcrumb", Type: field.TypeBool, Comment: "隐藏在面包屑,0-否，1-是", Default: false},
		{Name: "hide_children_in_menu", Type: field.TypeBool, Comment: "子页面隐藏在菜单中,0-否，1-是", Default: false},
	}
	// MenusTable holds the schema information for the "menus" table.
	MenusTable = &schema.Table{
		Name:       "menus",
		Columns:    MenusColumns,
		PrimaryKey: []*schema.Column{MenusColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Comment: "角色名称"},
		{Name: "value", Type: field.TypeString, Comment: "角色值"},
		{Name: "status", Type: field.TypeBool, Comment: "0-禁用，1-启用"},
		{Name: "desc", Type: field.TypeString, Comment: "简介"},
		{Name: "menu", Type: field.TypeString, Comment: "权限菜单ID列表"},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// RulesColumns holds the columns for the "rules" table.
	RulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "ptype", Type: field.TypeString},
		{Name: "v0", Type: field.TypeString},
		{Name: "v1", Type: field.TypeString},
		{Name: "v2", Type: field.TypeString},
		{Name: "v3", Type: field.TypeString},
		{Name: "v4", Type: field.TypeString},
		{Name: "v5", Type: field.TypeString},
	}
	// RulesTable holds the schema information for the "rules" table.
	RulesTable = &schema.Table{
		Name:       "rules",
		Columns:    RulesColumns,
		PrimaryKey: []*schema.Column{RulesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Comment: "用户名"},
		{Name: "password", Type: field.TypeString, Comment: "密码"},
		{Name: "nickname", Type: field.TypeString, Comment: "昵称"},
		{Name: "status", Type: field.TypeInt8, Comment: "0-锁定，1-正常"},
		{Name: "avatar", Type: field.TypeString, Comment: "头像"},
		{Name: "desc", Type: field.TypeString, Comment: "备注"},
		{Name: "extension", Type: field.TypeString, Comment: "扩展信息"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Comment:    "Comment that appears in both the schema and the generated code",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// DeptUsersColumns holds the columns for the "dept_users" table.
	DeptUsersColumns = []*schema.Column{
		{Name: "dept_id", Type: field.TypeInt64},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// DeptUsersTable holds the schema information for the "dept_users" table.
	DeptUsersTable = &schema.Table{
		Name:       "dept_users",
		Columns:    DeptUsersColumns,
		PrimaryKey: []*schema.Column{DeptUsersColumns[0], DeptUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dept_users_dept_id",
				Columns:    []*schema.Column{DeptUsersColumns[0]},
				RefColumns: []*schema.Column{DeptsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dept_users_user_id",
				Columns:    []*schema.Column{DeptUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeInt64},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0], UserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_user_id",
				Columns:    []*schema.Column{UserRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_roles_role_id",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DeptsTable,
		MenusTable,
		RolesTable,
		RulesTable,
		UsersTable,
		DeptUsersTable,
		UserRolesTable,
	}
)

func init() {
	DeptsTable.ForeignKeys[0].RefTable = RolesTable
	DeptsTable.ForeignKeys[1].RefTable = DeptsTable
	DeptsTable.Annotation = &entsql.Annotation{}
	MenusTable.Annotation = &entsql.Annotation{}
	RolesTable.Annotation = &entsql.Annotation{}
	UsersTable.Annotation = &entsql.Annotation{}
	DeptUsersTable.ForeignKeys[0].RefTable = DeptsTable
	DeptUsersTable.ForeignKeys[1].RefTable = UsersTable
	UserRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserRolesTable.ForeignKeys[1].RefTable = RolesTable
}
