syntax = "proto3";

package api.base_api.v1;
import "options/options.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "base-server/api/base_api/v1;v1";
option java_multiple_files = true;
option java_package = "api.base_api.v1";

enum MenuType {
	option (options.default_type) = "default";
	catalog = 0 [(options.menu_type) = "catalog"];			// 目录
	menu = 1 [(options.menu_type) = "menu"];						// 菜单
	embedded = 2 [(options.menu_type) = "embedded"];		// 内嵌
	link = 3 [(options.menu_type) = "link"];						// 外链
	button = 4 [(options.menu_type) = "button"];				// 按钮
}

service Base {
	// 用户登陆
	rpc Login (LoginRequest) returns (LoginReply) {
		option (google.api.http) = {
			post: "/basic-api/auth/login",
			body: "*"
		};
	}

	// 获取用户信息
	rpc GetUserInfo (google.protobuf.Empty) returns (GetUserInfoReply) {
		option (google.api.http) = {
			get: "/basic-api/user/info"
		};
	}

	// 获取权限code
	rpc GetAccessCodes (google.protobuf.Empty) returns (GetAccessCodesReply) {
		option (google.api.http) = {
			get: "/basic-api/auth/codes",
			response_body: "accessCodeList"
		};
	}

	// 注销登陆 (仅靠jwt无法实现退出功能)(未实现，主要靠前端删凭证)
	rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/basic-api/auth/logout"
			body: "*"
		};
	}

	// 获取路由菜单列表
//	rpc GetMenuList (google.protobuf.Empty) returns (GetMenuListReply) {
	rpc GetMenuList (google.protobuf.Empty) returns (GetSysMenuListReply) {
		option (google.api.http) = {
			get: "/basic-api/menu/all",
			response_body: "items"
		};
	}

	// 使用refreshToken换取accessToken
	rpc RefreshToken (google.protobuf.Empty) returns (LoginReply) {
		option (google.api.http) = {
			post: "/basic-api/auth/refresh",
			body: "*"
		};
	}

	//////////////////////////////////////////////////// (重新加载casbin权限数据)
	rpc ReLoadPolicy (google.protobuf.Empty) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/basic-api/auth/reloadPolicy",
			body: "*"
		};
	}

	///////////////////////////////////////////////////// 系统用户管理

	// 获取账户列表
	rpc GetUserList (GetUserParams) returns (GetUserListReply) {
		option (google.api.http) = {
			get: "/basic-api/system/user/list"
		};
	}

	// 新增用户
	rpc AddUser (UserListItem) returns (UserListItem) {
		option (google.api.http) = {
			post: "/basic-api/system/user"
			body: "*"
		};
	}

	// 更新用户
	rpc UpdateUser (UserListItem) returns (UserListItem) {
		option (google.api.http) = {
			put: "/basic-api/system/user/{id}"
			body: "*"
		};
	}

	// 删除用户
	rpc DelUser (DeleteUser) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/user/{id}"
		};
	}

	// 检查用户是否存在
	rpc IsUserExist (IsUserExistsRequest) returns (IsUserExistsReply) {
		option (google.api.http) = {
			post: "/basic-api/system/user/user-exists"
			body: "*"
		};
	}

	///////////////////////////////////////////////////// 系统菜单管理
	// 获取菜单列表
	rpc GetSysMenuList (MenuParams) returns (GetSysMenuListReply) {
		option (google.api.http) = {
			get: "/basic-api/system/menu/list"
			response_body: "items"
		};
	}

	// 菜单名称是否存在
	rpc IsMenuNameExists (IsMenuNameExistsRequest) returns (IsMenuNameExistsReply) {
		option (google.api.http) = {
			get: "/basic-api/system/menu/name-exists"
			response_body: "data"
		};
	}

	// 路由地址是否存在
	rpc IsMenuPathExists (IsMenuPathExistsRequest) returns (IsMenuPathExistsReply) {
		option (google.api.http) = {
			get: "/basic-api/system/menu/path-exists"
			response_body: "data"
		};
	}

	// 创建菜单
	rpc CreateMenu (SysMenuListItem) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/basic-api/system/menu"
			body: "*"
		};
	}
	// 更新菜单
	rpc UpdateMenu (SysMenuListItem) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/basic-api/system/menu/{id}"
			body: "*"
		};
	}
	// 删除菜单
	rpc DeleteMenu (DeleteMenuRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/menu/{id}"
		};
	}

	///////////////////////////////////////////////////// 系统部门管理

	// 获取部门列表
	rpc GetDeptList (google.protobuf.Empty) returns (GetDeptListReply) {
		option (google.api.http) = {
			get: "/basic-api/system/dept/list"
		};
	}

	// 新增部门
	rpc AddDept (DeptListItem) returns (DeptListItem) {
		option (google.api.http) = {
			post: "/basic-api/system/dept"
			body: "*"
		};
	}
	// 修改部门
	rpc UpdateDept (DeptListItem) returns (DeptListItem) {
		option (google.api.http) = {
			put: "/basic-api/system/dept/{id}"
			body: "*"
		};
	}
	// 删除部门
	rpc DelDept (DeleteDept) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/dept/{id}"
		};
	}

	////////////////////////////////////////////////// 系统角色管理

	// 获取角色列表
	rpc GetRoleList (RolePageParams) returns (GetRoleListByPageReply) {
		option (google.api.http) = {
			get: "/basic-api/system/role/list"
		};
	}

	// 新增角色
	rpc AddRole (RoleListItem) returns (RoleListItem) {
		option (google.api.http) = {
			post: "/basic-api/system/role"
			body: "*"
		};
	}
	// 修改角色
	rpc UpdateRole (RoleListItem) returns (RoleListItem) {
		option (google.api.http) = {
			put: "/basic-api/system/role/{id}"
			body: "*"
		};
	}
	// 删除角色
	rpc DelRole (DeleteRole) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/role/{id}"
		};
	}

	// 设置角色状态 (未使用)
	rpc SetRoleStatus (SetRoleStatusRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/basic-api/system/setRoleStatus"
			body: "*"
		};
	}

	///////////////////////////////////////////////////

	// 改密码
	rpc ChangePassword (ChangePasswordRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/basic-api/system/changePassword",
			body: "*"
		};
	}

	///////////////////////////////////////////////////
	// 获取系统所有 api
	rpc GetWalkRoute (google.protobuf.Empty) returns (GetWalkRouteReply) {
		option (google.api.http) = {
			get: "/basic-api/system/getWalkRoute",
		};
	}

	////////////////////////////////// api资源管理
	// 获取api资源
	rpc GetApiList (GetApiPageParams) returns (GetApiListByPageReply) {
		option (google.api.http) = {
			get: "/basic-api/system/api/list"
		};
	}

	// 添加api资源
	rpc AddApi (ApiListItem) returns (ApiListItem) {
		option (google.api.http) = {
			post: "/basic-api/system/api"
			body: "*"
		};
	}
	// 修改api资源
	rpc UpdateApi (ApiListItem) returns (ApiListItem) {
		option (google.api.http) = {
			put: "/basic-api/system/api/{id}"
			body: "*"
		};
	}
	// 删除api资源
	rpc DelApi (DeleteApi) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/api/{id}"
		};
	}

	////////////////////////////////// resource 资源管理
	// 获取resource资源
	rpc GetResourceList (GetResourcePageParams) returns (GetResourceListByPageReply) {
		option (google.api.http) = {
			get: "/basic-api/system/resource/list"
		};
	}

	// 添加resource资源
	rpc AddResource (ResourceListItem) returns (ResourceListItem) {
		option (google.api.http) = {
			post: "/basic-api/system/resource"
			body: "*"
		};
	}
	// 修改resource资源
	rpc UpdateResource (ResourceListItem) returns (ResourceListItem) {
		option (google.api.http) = {
			put: "/basic-api/system/resource/{id}"
			body: "*"
		};
	}
	// 删除resource资源
	rpc DelResource (DeleteResource) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/basic-api/system/resource/{id}"
		};
	}

	//////////////////////////////////////////////// 日志
	// 获取系统日志列表
	rpc GetSysLogList (GetSysLogListParams) returns (GetSysLogListReply) {
		option (google.api.http) = {
			get: "/basic-api/system/log/list"
		};
	}
	// 获取单条日志详情
	rpc GetSysLogInfo (GetSysLogInfoParams) returns (GetSysLogInfoReply) {
		option (google.api.http) = {
			get: "/basic-api/system/log/{id}"
		};
	}
}


message LoginRequest {
	string username = 1;
	string password = 2;
}
message LoginReply {
	string userId = 1;
	string accessToken = 2;
	string refreshToken = 3;
}

message GetUserInfoReply {
	string userId = 1;
	string username = 2;
	string realName = 3;
	string avatar = 4;
	string desc = 5;
	string homePath = 6;
	string token = 7;
	RoleInfo roles = 8;
}

message UserRole {
	string dom = 1;
	string role = 2;
	string menu = 3;
}

message UserExtension {
	repeated UserRole userRole = 1;
	string email = 2;
}

message GetAccessCodesReply {
	repeated string accessCodeList = 1;
}

message GetMenuListReply {
	repeated RouteItem items = 1;
}


message RoleInfo {
	string roleName = 1;
	string value = 2;
}

message RouteItem {
	int64 id = 1;
	string name = 2;							// 路径的名称，必须是唯一的
	string path = 3;							// 路径
	string component = 4;					// 组件路径
	RouteMeta meta = 5;						// 附加到记录的任意数据

	repeated string alias = 6;		// 路径的别名
	string redirect = 7;					// 如果路由直接匹配，则重定向到何处。重定向发生在任何导航保护之前，并触发具有新目标位置的新导航。
	repeated RouteItem children = 8;	// 嵌套路由的数组
	int64 pid = 9;					// 父级ID
}

message RouteMeta {
	string title = 1;								// 标题
	string icon = 2;								// 图标名

	int64 order = 3;								// 排序号
	string link = 4;								// 外链-跳转路径
	string iframeSrc = 5;						// iframe 地址
	bool ignoreAccess = 6;					// 是否忽略权限
	bool keepAlive = 7;							// 是否缓存

	string badge = 8;								// 徽标
	string badgeType = 9;						// 徽标类型	'dot' | 'normal'
	string badgeVariants = 10;			// 徽标颜色	'default' | 'destructive' | 'primary' | 'success' | 'warning' | string

	string activePath = 11;					// 当前激活的菜单
	int64 maxNumOfOpenTab = 12;			// 标签页最大打开数量

	bool hideChildrenInMenu = 13;		// 隐藏子项路径
	bool hideInBreadcrumb = 14;			// 当前路由在面包屑中不展现
	bool hideInMenu = 15;						// 当前路由在菜单中不展现
	bool hideInTab = 16;						// 从不显示在选项卡中

	repeated string authority = 17;				// 需要特定的角色标识才可以访问
}

////////////////////////////////////////////////////////////

message DeptListItem {
	string id = 1;			// id
	string pid = 2;			// pid 上级部门的id
	string name = 3;		// 部门名称
	int32 orderNo = 4;			// 排序
	string remark = 5;			// 备注
	int32 status = 6;				// 状态
	string createTime = 7;	// 创建时间
	int64 dom = 9;			// 域
	repeated DeptListItem children = 10;
}

message DeleteDept {
	string id = 1;
}

message GetDeptListReply {
	repeated DeptListItem items = 1;
	int64	total = 2;
}

message RolePageParams {
	int64 currentPage = 1;
	int64 pageSize = 2;
	string name = 3;
	int64 status = 4;
	string deptId = 5;
}

message RoleListItem {
	string id = 1;			// id
	string name = 2;			// 角色名
	string value = 3;			// 角色值
	int32 status = 4;				// 状态
	string orderNo = 5;			// 排序
	string createTime = 6;	// 创建时间
	string remark = 7;			// 备注
	repeated int32 permissions = 8; // 菜单列表
	string dept = 9;				// 部门
	repeated string api_permissions = 10; // api资源权限
}

message GetRoleListByPageReply {
	repeated RoleListItem items = 1;
	int64	total = 2;
}

message DeleteRole {
	string id = 1;
}

message MenuParams {
	string menuName = 1;
	string status = 2;
}

message Meta {
	int64 order = 1;			// 排序
	string icon = 2;				// 图标
	string title = 3;				// 菜单标题

	optional string activeIcon = 4;				// 激活时显示的图标
	optional string activePath = 5;				// 作为路由时，需要激活的菜单的Path
	optional bool affixTab = 6;				// 固定在标签栏
	optional int64 affixTabOrder = 7;				// 在标签栏固定的顺序

	optional string badge = 8;				// 徽标内容(当徽标类型为normal时有效)
	optional string badgeType = 9;				// 徽标类型
	optional string badgeVariants = 10;				// 徽标颜色

	optional bool hideChildrenInMenu = 11;				// 在菜单中隐藏下级
	optional bool hideInBreadcrumb = 12;				// 在面包屑中隐藏
	optional bool hideInMenu = 13;				// 在菜单中隐藏
	optional bool hideInTab = 14;				// 在标签栏中隐藏

	optional string iframeSrc = 15;				// 内嵌Iframe的URL
	optional string link = 16;						// 外链页面的URL
	optional bool keepAlive = 17;				// 是否缓存页面

	optional int64 maxNumOfOpenTab = 18;				// 同一个路由最大打开的标签数
	optional bool noBasicLayout = 19;				// 无需基础布局
	optional bool openInNewWindow = 20;				// 是否在新窗口打开

	bool ignoreAccess = 21;					// 是否忽略权限
	repeated string authority = 22;				// 需要特定的角色标识才可以访问

	//		/** 额外的路由参数 */
	//			query?: Recordable<any>;
}

message SysMenuListItem {
	int64 id = 1;					// 菜单ID
	string component = 2;		// 组件
	optional int32 status = 3;				// 状态(这里使用optional是因为默认为0不返回)
	string authCode = 4;	// 后端权限标识

	string name = 5;					// 菜单名称
	string path = 6;					// 路由路径
	int64 pid = 7;					// 父级ID
	optional string redirect = 8;		// 重定向
	string type = 9;

	Meta meta = 10;		// 菜单元数据
	repeated SysMenuListItem children = 11;		// 子级

	string createTime = 12;	// 创建时间
}

message GetSysMenuListReply {
	repeated SysMenuListItem items = 1;
	int64	total = 2;
}

message GetUserParams {
	int64 currentPage = 1;
	int64 pageSize = 2;
	string username = 3;
	string nickname = 4;
	string deptId = 5;
	int64 role = 6;
	int32 status = 7;
}

message UserListItem {
	string id = 1;
	string username = 2;		// 账号
	string password = 11;		// 密码
	string email = 3;				// 邮箱
	string nickname = 4;		// 昵称
	int64 role = 5;					// 角色
	string createTime = 6;	// 创建时间
	string remark = 7;			// 备注
	int32 status = 8;				// 状态
	string dept = 9;				// 部门
	string avatar = 10;			// 头像
}

message GetUserListReply {
	repeated UserListItem items = 1;
	int64	total = 2;
}

message DeleteUser {
	string id = 1;
}

message RoleParams {
	string roleName = 1;
	int64 status = 2;
}

message SetRoleStatusRequest {
	int64 id = 1;
	string status = 2;
}

message IsUserExistsRequest {
	string id = 1;
	string username = 2;
}

message IsUserExistsReply {
	bool data = 1;
}

message	IsMenuNameExistsRequest {
	int64 id = 1;
	string name = 2;
}
message	IsMenuNameExistsReply {
	bool data = 1;
}
message	IsMenuPathExistsRequest {
	int64 id = 1;
	string path = 2;
}
message	IsMenuPathExistsReply {
	bool data = 1;
}

message DeleteMenuRequest {
	int64 id = 1;
}

message ChangePasswordRequest {
	string passwordOld = 1;
	string passwordNew = 2;
}

message WalkRouteItem {
	string url = 1;
	string method = 2;
}

message GetWalkRouteReply {
	repeated WalkRouteItem items = 1;
}

message GetApiPageParams {
	int64 currentPage = 1;
	int64 pageSize = 2;
	string path = 3;	// api 路径
	string description = 4; // api 描述
	string method = 5;	// api 方法（GET|PUT|POST|DELETE）
	string resources_group = 6; // 资源组
}

message ApiListItem {
	string id = 1;
	string path = 2;	// api 路径
	string method = 3;	// api 方法（GET|PUT|POST|DELETE）
	string description = 4; // api 描述
	string module = 5; // api 所属模块
	string module_description = 6; // 模块描述
	string resources_group = 7; // 资源组
}

message GetApiListByPageReply {
	repeated ApiListItem items = 1;
	int64 total = 2;
}

message DeleteApi {
	string id = 1;
}

message GetResourcePageParams {
	int64 currentPage = 7;
	int64 pageSize = 8;
	string name = 2;	// 资源名称
	string type = 3; // 资源类型
	string value = 4; // 资源值
	string method = 5;	// 对资源的操作
	string description = 6; // 资源的描述
}

message ResourceListItem {
	string id = 1;
	string name = 2;	// 资源名称
	string type = 3; // 资源类型
	string value = 4; // 资源值
	string method = 5;	// 对资源的操作
	string description = 6; // 资源的描述
}

message GetResourceListByPageReply {
	repeated ResourceListItem items = 1;
	int64 total = 2;
}

message DeleteResource {
	string id = 1;
}

////////////////////////////////////////// 日志

message GetSysLogListParams {
	int64 currentPage = 20;
	int64 pageSize = 21;
	string user_id = 2;
	string user_name = 3;
	bool is_login = 4;
	string session_id = 5;
	string method = 6;
	string path = 7;
	string request_time = 8;
	string ip_address = 9;
	int64 latency = 10;
	int32 res_code = 17;
	bool res_status = 19;
}
message SysLogItem {
	string id = 1;
	string user_id = 2;
	string user_name = 3;
	string method = 5;
	string path = 6;
	string request_time = 7;
	string ip_address = 8;
	string ip_location = 9;
	int64 latency = 10;
	string os = 11;
	string browser = 12;
	int32 res_code = 17;
	bool res_status = 19;
}
message GetSysLogListReply {
	repeated SysLogItem items = 1;
	int64	total = 2;
}
message GetSysLogInfoParams {
	string id = 1;
}
message GetSysLogInfoReply {
	string id = 1;
	string user_id = 2;
	string user_name = 3;
	bool is_login = 4;
	string session_id = 5;
	string method = 6;
	string path = 7;
	string request_time = 8;
	string ip_address = 9;
	string ip_location = 10;
	int64 latency = 11;
	string os = 12;
	string browser = 13;
	string user_agent = 14;
	string header = 15;
	string get_params = 16;
	string post_data = 17;
	int32 res_code = 18;
	string reason = 19;
	bool res_status = 20;
	string stack = 21;
	string create_time = 22;
}
