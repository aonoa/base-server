// Code generated by ent, DO NOT EDIT.

package apiresources

import (
	"base-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldUpdateTime, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldDescription, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldPath, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldMethod, v))
}

// Module applies equality check predicate on the "module" field. It's identical to ModuleEQ.
func Module(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldModule, v))
}

// ModuleDescription applies equality check predicate on the "module_description" field. It's identical to ModuleDescriptionEQ.
func ModuleDescription(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldModuleDescription, v))
}

// ResourcesGroup applies equality check predicate on the "resources_group" field. It's identical to ResourcesGroupEQ.
func ResourcesGroup(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldResourcesGroup, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldUpdateTime, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldDescription, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldPath, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldMethod, v))
}

// ModuleEQ applies the EQ predicate on the "module" field.
func ModuleEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldModule, v))
}

// ModuleNEQ applies the NEQ predicate on the "module" field.
func ModuleNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldModule, v))
}

// ModuleIn applies the In predicate on the "module" field.
func ModuleIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldModule, vs...))
}

// ModuleNotIn applies the NotIn predicate on the "module" field.
func ModuleNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldModule, vs...))
}

// ModuleGT applies the GT predicate on the "module" field.
func ModuleGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldModule, v))
}

// ModuleGTE applies the GTE predicate on the "module" field.
func ModuleGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldModule, v))
}

// ModuleLT applies the LT predicate on the "module" field.
func ModuleLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldModule, v))
}

// ModuleLTE applies the LTE predicate on the "module" field.
func ModuleLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldModule, v))
}

// ModuleContains applies the Contains predicate on the "module" field.
func ModuleContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldModule, v))
}

// ModuleHasPrefix applies the HasPrefix predicate on the "module" field.
func ModuleHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldModule, v))
}

// ModuleHasSuffix applies the HasSuffix predicate on the "module" field.
func ModuleHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldModule, v))
}

// ModuleEqualFold applies the EqualFold predicate on the "module" field.
func ModuleEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldModule, v))
}

// ModuleContainsFold applies the ContainsFold predicate on the "module" field.
func ModuleContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldModule, v))
}

// ModuleDescriptionEQ applies the EQ predicate on the "module_description" field.
func ModuleDescriptionEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldModuleDescription, v))
}

// ModuleDescriptionNEQ applies the NEQ predicate on the "module_description" field.
func ModuleDescriptionNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldModuleDescription, v))
}

// ModuleDescriptionIn applies the In predicate on the "module_description" field.
func ModuleDescriptionIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldModuleDescription, vs...))
}

// ModuleDescriptionNotIn applies the NotIn predicate on the "module_description" field.
func ModuleDescriptionNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldModuleDescription, vs...))
}

// ModuleDescriptionGT applies the GT predicate on the "module_description" field.
func ModuleDescriptionGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldModuleDescription, v))
}

// ModuleDescriptionGTE applies the GTE predicate on the "module_description" field.
func ModuleDescriptionGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldModuleDescription, v))
}

// ModuleDescriptionLT applies the LT predicate on the "module_description" field.
func ModuleDescriptionLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldModuleDescription, v))
}

// ModuleDescriptionLTE applies the LTE predicate on the "module_description" field.
func ModuleDescriptionLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldModuleDescription, v))
}

// ModuleDescriptionContains applies the Contains predicate on the "module_description" field.
func ModuleDescriptionContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldModuleDescription, v))
}

// ModuleDescriptionHasPrefix applies the HasPrefix predicate on the "module_description" field.
func ModuleDescriptionHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldModuleDescription, v))
}

// ModuleDescriptionHasSuffix applies the HasSuffix predicate on the "module_description" field.
func ModuleDescriptionHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldModuleDescription, v))
}

// ModuleDescriptionEqualFold applies the EqualFold predicate on the "module_description" field.
func ModuleDescriptionEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldModuleDescription, v))
}

// ModuleDescriptionContainsFold applies the ContainsFold predicate on the "module_description" field.
func ModuleDescriptionContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldModuleDescription, v))
}

// ResourcesGroupEQ applies the EQ predicate on the "resources_group" field.
func ResourcesGroupEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEQ(FieldResourcesGroup, v))
}

// ResourcesGroupNEQ applies the NEQ predicate on the "resources_group" field.
func ResourcesGroupNEQ(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNEQ(FieldResourcesGroup, v))
}

// ResourcesGroupIn applies the In predicate on the "resources_group" field.
func ResourcesGroupIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldIn(FieldResourcesGroup, vs...))
}

// ResourcesGroupNotIn applies the NotIn predicate on the "resources_group" field.
func ResourcesGroupNotIn(vs ...string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldNotIn(FieldResourcesGroup, vs...))
}

// ResourcesGroupGT applies the GT predicate on the "resources_group" field.
func ResourcesGroupGT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGT(FieldResourcesGroup, v))
}

// ResourcesGroupGTE applies the GTE predicate on the "resources_group" field.
func ResourcesGroupGTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldGTE(FieldResourcesGroup, v))
}

// ResourcesGroupLT applies the LT predicate on the "resources_group" field.
func ResourcesGroupLT(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLT(FieldResourcesGroup, v))
}

// ResourcesGroupLTE applies the LTE predicate on the "resources_group" field.
func ResourcesGroupLTE(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldLTE(FieldResourcesGroup, v))
}

// ResourcesGroupContains applies the Contains predicate on the "resources_group" field.
func ResourcesGroupContains(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContains(FieldResourcesGroup, v))
}

// ResourcesGroupHasPrefix applies the HasPrefix predicate on the "resources_group" field.
func ResourcesGroupHasPrefix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasPrefix(FieldResourcesGroup, v))
}

// ResourcesGroupHasSuffix applies the HasSuffix predicate on the "resources_group" field.
func ResourcesGroupHasSuffix(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldHasSuffix(FieldResourcesGroup, v))
}

// ResourcesGroupEqualFold applies the EqualFold predicate on the "resources_group" field.
func ResourcesGroupEqualFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldEqualFold(FieldResourcesGroup, v))
}

// ResourcesGroupContainsFold applies the ContainsFold predicate on the "resources_group" field.
func ResourcesGroupContainsFold(v string) predicate.ApiResources {
	return predicate.ApiResources(sql.FieldContainsFold(FieldResourcesGroup, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.ApiResources {
	return predicate.ApiResources(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.ApiResources {
	return predicate.ApiResources(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiResources) predicate.ApiResources {
	return predicate.ApiResources(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiResources) predicate.ApiResources {
	return predicate.ApiResources(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiResources) predicate.ApiResources {
	return predicate.ApiResources(sql.NotPredicates(p))
}
