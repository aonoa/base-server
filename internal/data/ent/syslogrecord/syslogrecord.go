// Code generated by ent, DO NOT EDIT.

package syslogrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the syslogrecord type in the database.
	Label = "sys_log_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldIsLogin holds the string denoting the is_login field in the database.
	FieldIsLogin = "is_login"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldRequestTime holds the string denoting the request_time field in the database.
	FieldRequestTime = "request_time"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldIPLocation holds the string denoting the ip_location field in the database.
	FieldIPLocation = "ip_location"
	// FieldLatency holds the string denoting the latency field in the database.
	FieldLatency = "latency"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldBrowser holds the string denoting the browser field in the database.
	FieldBrowser = "browser"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldHeader holds the string denoting the header field in the database.
	FieldHeader = "header"
	// FieldGetParams holds the string denoting the get_params field in the database.
	FieldGetParams = "get_params"
	// FieldPostData holds the string denoting the post_data field in the database.
	FieldPostData = "post_data"
	// FieldResCode holds the string denoting the res_code field in the database.
	FieldResCode = "res_code"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldResStatus holds the string denoting the res_status field in the database.
	FieldResStatus = "res_status"
	// FieldStack holds the string denoting the stack field in the database.
	FieldStack = "stack"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the syslogrecord in the database.
	Table = "sys_log"
)

// Columns holds all SQL columns for syslogrecord fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUserName,
	FieldIsLogin,
	FieldSessionID,
	FieldMethod,
	FieldPath,
	FieldRequestTime,
	FieldIPAddress,
	FieldIPLocation,
	FieldLatency,
	FieldOs,
	FieldBrowser,
	FieldUserAgent,
	FieldHeader,
	FieldGetParams,
	FieldPostData,
	FieldResCode,
	FieldReason,
	FieldResStatus,
	FieldStack,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SysLogRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByIsLogin orders the results by the is_login field.
func ByIsLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLogin, opts...).ToFunc()
}

// BySessionID orders the results by the session_id field.
func BySessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionID, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByRequestTime orders the results by the request_time field.
func ByRequestTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestTime, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByIPLocation orders the results by the ip_location field.
func ByIPLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPLocation, opts...).ToFunc()
}

// ByLatency orders the results by the latency field.
func ByLatency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatency, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByBrowser orders the results by the browser field.
func ByBrowser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowser, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByHeader orders the results by the header field.
func ByHeader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeader, opts...).ToFunc()
}

// ByGetParams orders the results by the get_params field.
func ByGetParams(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGetParams, opts...).ToFunc()
}

// ByPostData orders the results by the post_data field.
func ByPostData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostData, opts...).ToFunc()
}

// ByResCode orders the results by the res_code field.
func ByResCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResCode, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByResStatus orders the results by the res_status field.
func ByResStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResStatus, opts...).ToFunc()
}

// ByStack orders the results by the stack field.
func ByStack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStack, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
