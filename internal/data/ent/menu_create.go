// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/menu"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mc *MenuCreate) SetCreateTime(t time.Time) *MenuCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreateTime(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MenuCreate) SetUpdateTime(t time.Time) *MenuCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdateTime(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetPid sets the "pid" field.
func (mc *MenuCreate) SetPid(i int64) *MenuCreate {
	mc.mutation.SetPid(i)
	return mc
}

// SetType sets the "type" field.
func (mc *MenuCreate) SetType(s string) *MenuCreate {
	mc.mutation.SetType(s)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MenuCreate) SetStatus(b bool) *MenuCreate {
	mc.mutation.SetStatus(b)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MenuCreate) SetNillableStatus(b *bool) *MenuCreate {
	if b != nil {
		mc.SetStatus(*b)
	}
	return mc
}

// SetPath sets the "path" field.
func (mc *MenuCreate) SetPath(s string) *MenuCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetRedirect sets the "redirect" field.
func (mc *MenuCreate) SetRedirect(s string) *MenuCreate {
	mc.mutation.SetRedirect(s)
	return mc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (mc *MenuCreate) SetNillableRedirect(s *string) *MenuCreate {
	if s != nil {
		mc.SetRedirect(*s)
	}
	return mc
}

// SetAlias sets the "alias" field.
func (mc *MenuCreate) SetAlias(s string) *MenuCreate {
	mc.mutation.SetAlias(s)
	return mc
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (mc *MenuCreate) SetNillableAlias(s *string) *MenuCreate {
	if s != nil {
		mc.SetAlias(*s)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetComponent sets the "component" field.
func (mc *MenuCreate) SetComponent(s string) *MenuCreate {
	mc.mutation.SetComponent(s)
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *MenuCreate) SetTitle(s string) *MenuCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetOrder sets the "order" field.
func (mc *MenuCreate) SetOrder(i int32) *MenuCreate {
	mc.mutation.SetOrder(i)
	return mc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mc *MenuCreate) SetNillableOrder(i *int32) *MenuCreate {
	if i != nil {
		mc.SetOrder(*i)
	}
	return mc
}

// SetOpenInNewWindow sets the "openInNewWindow" field.
func (mc *MenuCreate) SetOpenInNewWindow(b bool) *MenuCreate {
	mc.mutation.SetOpenInNewWindow(b)
	return mc
}

// SetNillableOpenInNewWindow sets the "openInNewWindow" field if the given value is not nil.
func (mc *MenuCreate) SetNillableOpenInNewWindow(b *bool) *MenuCreate {
	if b != nil {
		mc.SetOpenInNewWindow(*b)
	}
	return mc
}

// SetNoBasicLayout sets the "noBasicLayout" field.
func (mc *MenuCreate) SetNoBasicLayout(b bool) *MenuCreate {
	mc.mutation.SetNoBasicLayout(b)
	return mc
}

// SetNillableNoBasicLayout sets the "noBasicLayout" field if the given value is not nil.
func (mc *MenuCreate) SetNillableNoBasicLayout(b *bool) *MenuCreate {
	if b != nil {
		mc.SetNoBasicLayout(*b)
	}
	return mc
}

// SetMenuVisibleWithForbidden sets the "menuVisibleWithForbidden" field.
func (mc *MenuCreate) SetMenuVisibleWithForbidden(b bool) *MenuCreate {
	mc.mutation.SetMenuVisibleWithForbidden(b)
	return mc
}

// SetNillableMenuVisibleWithForbidden sets the "menuVisibleWithForbidden" field if the given value is not nil.
func (mc *MenuCreate) SetNillableMenuVisibleWithForbidden(b *bool) *MenuCreate {
	if b != nil {
		mc.SetMenuVisibleWithForbidden(*b)
	}
	return mc
}

// SetLink sets the "link" field.
func (mc *MenuCreate) SetLink(s string) *MenuCreate {
	mc.mutation.SetLink(s)
	return mc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (mc *MenuCreate) SetNillableLink(s *string) *MenuCreate {
	if s != nil {
		mc.SetLink(*s)
	}
	return mc
}

// SetIframeSrc sets the "iframeSrc" field.
func (mc *MenuCreate) SetIframeSrc(s string) *MenuCreate {
	mc.mutation.SetIframeSrc(s)
	return mc
}

// SetNillableIframeSrc sets the "iframeSrc" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIframeSrc(s *string) *MenuCreate {
	if s != nil {
		mc.SetIframeSrc(*s)
	}
	return mc
}

// SetActiveIcon sets the "activeIcon" field.
func (mc *MenuCreate) SetActiveIcon(s string) *MenuCreate {
	mc.mutation.SetActiveIcon(s)
	return mc
}

// SetNillableActiveIcon sets the "activeIcon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableActiveIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetActiveIcon(*s)
	}
	return mc
}

// SetActivePath sets the "activePath" field.
func (mc *MenuCreate) SetActivePath(s string) *MenuCreate {
	mc.mutation.SetActivePath(s)
	return mc
}

// SetNillableActivePath sets the "activePath" field if the given value is not nil.
func (mc *MenuCreate) SetNillableActivePath(s *string) *MenuCreate {
	if s != nil {
		mc.SetActivePath(*s)
	}
	return mc
}

// SetMaxNumOfOpenTab sets the "maxNumOfOpenTab" field.
func (mc *MenuCreate) SetMaxNumOfOpenTab(i int16) *MenuCreate {
	mc.mutation.SetMaxNumOfOpenTab(i)
	return mc
}

// SetNillableMaxNumOfOpenTab sets the "maxNumOfOpenTab" field if the given value is not nil.
func (mc *MenuCreate) SetNillableMaxNumOfOpenTab(i *int16) *MenuCreate {
	if i != nil {
		mc.SetMaxNumOfOpenTab(*i)
	}
	return mc
}

// SetKeepalive sets the "keepalive" field.
func (mc *MenuCreate) SetKeepalive(b bool) *MenuCreate {
	mc.mutation.SetKeepalive(b)
	return mc
}

// SetNillableKeepalive sets the "keepalive" field if the given value is not nil.
func (mc *MenuCreate) SetNillableKeepalive(b *bool) *MenuCreate {
	if b != nil {
		mc.SetKeepalive(*b)
	}
	return mc
}

// SetIgnoreAccess sets the "ignoreAccess" field.
func (mc *MenuCreate) SetIgnoreAccess(b bool) *MenuCreate {
	mc.mutation.SetIgnoreAccess(b)
	return mc
}

// SetNillableIgnoreAccess sets the "ignoreAccess" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIgnoreAccess(b *bool) *MenuCreate {
	if b != nil {
		mc.SetIgnoreAccess(*b)
	}
	return mc
}

// SetAuthority sets the "authority" field.
func (mc *MenuCreate) SetAuthority(s string) *MenuCreate {
	mc.mutation.SetAuthority(s)
	return mc
}

// SetNillableAuthority sets the "authority" field if the given value is not nil.
func (mc *MenuCreate) SetNillableAuthority(s *string) *MenuCreate {
	if s != nil {
		mc.SetAuthority(*s)
	}
	return mc
}

// SetAffixTab sets the "affixTab" field.
func (mc *MenuCreate) SetAffixTab(b bool) *MenuCreate {
	mc.mutation.SetAffixTab(b)
	return mc
}

// SetNillableAffixTab sets the "affixTab" field if the given value is not nil.
func (mc *MenuCreate) SetNillableAffixTab(b *bool) *MenuCreate {
	if b != nil {
		mc.SetAffixTab(*b)
	}
	return mc
}

// SetAffixTabOrder sets the "affixTabOrder" field.
func (mc *MenuCreate) SetAffixTabOrder(i int16) *MenuCreate {
	mc.mutation.SetAffixTabOrder(i)
	return mc
}

// SetNillableAffixTabOrder sets the "affixTabOrder" field if the given value is not nil.
func (mc *MenuCreate) SetNillableAffixTabOrder(i *int16) *MenuCreate {
	if i != nil {
		mc.SetAffixTabOrder(*i)
	}
	return mc
}

// SetHideInMenu sets the "hideInMenu" field.
func (mc *MenuCreate) SetHideInMenu(b bool) *MenuCreate {
	mc.mutation.SetHideInMenu(b)
	return mc
}

// SetNillableHideInMenu sets the "hideInMenu" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideInMenu(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideInMenu(*b)
	}
	return mc
}

// SetHideInTab sets the "hideInTab" field.
func (mc *MenuCreate) SetHideInTab(b bool) *MenuCreate {
	mc.mutation.SetHideInTab(b)
	return mc
}

// SetNillableHideInTab sets the "hideInTab" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideInTab(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideInTab(*b)
	}
	return mc
}

// SetHideInBreadcrumb sets the "hideInBreadcrumb" field.
func (mc *MenuCreate) SetHideInBreadcrumb(b bool) *MenuCreate {
	mc.mutation.SetHideInBreadcrumb(b)
	return mc
}

// SetNillableHideInBreadcrumb sets the "hideInBreadcrumb" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideInBreadcrumb(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideInBreadcrumb(*b)
	}
	return mc
}

// SetHideChildrenInMenu sets the "hideChildrenInMenu" field.
func (mc *MenuCreate) SetHideChildrenInMenu(b bool) *MenuCreate {
	mc.mutation.SetHideChildrenInMenu(b)
	return mc
}

// SetNillableHideChildrenInMenu sets the "hideChildrenInMenu" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideChildrenInMenu(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideChildrenInMenu(*b)
	}
	return mc
}

// SetFullPathKey sets the "fullPathKey" field.
func (mc *MenuCreate) SetFullPathKey(b bool) *MenuCreate {
	mc.mutation.SetFullPathKey(b)
	return mc
}

// SetNillableFullPathKey sets the "fullPathKey" field if the given value is not nil.
func (mc *MenuCreate) SetNillableFullPathKey(b *bool) *MenuCreate {
	if b != nil {
		mc.SetFullPathKey(*b)
	}
	return mc
}

// SetBadge sets the "badge" field.
func (mc *MenuCreate) SetBadge(s string) *MenuCreate {
	mc.mutation.SetBadge(s)
	return mc
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (mc *MenuCreate) SetNillableBadge(s *string) *MenuCreate {
	if s != nil {
		mc.SetBadge(*s)
	}
	return mc
}

// SetBadgeType sets the "badgeType" field.
func (mc *MenuCreate) SetBadgeType(s string) *MenuCreate {
	mc.mutation.SetBadgeType(s)
	return mc
}

// SetNillableBadgeType sets the "badgeType" field if the given value is not nil.
func (mc *MenuCreate) SetNillableBadgeType(s *string) *MenuCreate {
	if s != nil {
		mc.SetBadgeType(*s)
	}
	return mc
}

// SetBadgeVariants sets the "badgeVariants" field.
func (mc *MenuCreate) SetBadgeVariants(s string) *MenuCreate {
	mc.mutation.SetBadgeVariants(s)
	return mc
}

// SetNillableBadgeVariants sets the "badgeVariants" field if the given value is not nil.
func (mc *MenuCreate) SetNillableBadgeVariants(s *string) *MenuCreate {
	if s != nil {
		mc.SetBadgeVariants(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(i int64) *MenuCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := menu.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := menu.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := menu.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Redirect(); !ok {
		v := menu.DefaultRedirect
		mc.mutation.SetRedirect(v)
	}
	if _, ok := mc.mutation.Alias(); !ok {
		v := menu.DefaultAlias
		mc.mutation.SetAlias(v)
	}
	if _, ok := mc.mutation.Icon(); !ok {
		v := menu.DefaultIcon
		mc.mutation.SetIcon(v)
	}
	if _, ok := mc.mutation.Order(); !ok {
		v := menu.DefaultOrder
		mc.mutation.SetOrder(v)
	}
	if _, ok := mc.mutation.OpenInNewWindow(); !ok {
		v := menu.DefaultOpenInNewWindow
		mc.mutation.SetOpenInNewWindow(v)
	}
	if _, ok := mc.mutation.NoBasicLayout(); !ok {
		v := menu.DefaultNoBasicLayout
		mc.mutation.SetNoBasicLayout(v)
	}
	if _, ok := mc.mutation.MenuVisibleWithForbidden(); !ok {
		v := menu.DefaultMenuVisibleWithForbidden
		mc.mutation.SetMenuVisibleWithForbidden(v)
	}
	if _, ok := mc.mutation.Link(); !ok {
		v := menu.DefaultLink
		mc.mutation.SetLink(v)
	}
	if _, ok := mc.mutation.IframeSrc(); !ok {
		v := menu.DefaultIframeSrc
		mc.mutation.SetIframeSrc(v)
	}
	if _, ok := mc.mutation.ActiveIcon(); !ok {
		v := menu.DefaultActiveIcon
		mc.mutation.SetActiveIcon(v)
	}
	if _, ok := mc.mutation.ActivePath(); !ok {
		v := menu.DefaultActivePath
		mc.mutation.SetActivePath(v)
	}
	if _, ok := mc.mutation.MaxNumOfOpenTab(); !ok {
		v := menu.DefaultMaxNumOfOpenTab
		mc.mutation.SetMaxNumOfOpenTab(v)
	}
	if _, ok := mc.mutation.Keepalive(); !ok {
		v := menu.DefaultKeepalive
		mc.mutation.SetKeepalive(v)
	}
	if _, ok := mc.mutation.IgnoreAccess(); !ok {
		v := menu.DefaultIgnoreAccess
		mc.mutation.SetIgnoreAccess(v)
	}
	if _, ok := mc.mutation.Authority(); !ok {
		v := menu.DefaultAuthority
		mc.mutation.SetAuthority(v)
	}
	if _, ok := mc.mutation.AffixTab(); !ok {
		v := menu.DefaultAffixTab
		mc.mutation.SetAffixTab(v)
	}
	if _, ok := mc.mutation.AffixTabOrder(); !ok {
		v := menu.DefaultAffixTabOrder
		mc.mutation.SetAffixTabOrder(v)
	}
	if _, ok := mc.mutation.HideInMenu(); !ok {
		v := menu.DefaultHideInMenu
		mc.mutation.SetHideInMenu(v)
	}
	if _, ok := mc.mutation.HideInTab(); !ok {
		v := menu.DefaultHideInTab
		mc.mutation.SetHideInTab(v)
	}
	if _, ok := mc.mutation.HideInBreadcrumb(); !ok {
		v := menu.DefaultHideInBreadcrumb
		mc.mutation.SetHideInBreadcrumb(v)
	}
	if _, ok := mc.mutation.HideChildrenInMenu(); !ok {
		v := menu.DefaultHideChildrenInMenu
		mc.mutation.SetHideChildrenInMenu(v)
	}
	if _, ok := mc.mutation.FullPathKey(); !ok {
		v := menu.DefaultFullPathKey
		mc.mutation.SetFullPathKey(v)
	}
	if _, ok := mc.mutation.Badge(); !ok {
		v := menu.DefaultBadge
		mc.mutation.SetBadge(v)
	}
	if _, ok := mc.mutation.BadgeType(); !ok {
		v := menu.DefaultBadgeType
		mc.mutation.SetBadgeType(v)
	}
	if _, ok := mc.mutation.BadgeVariants(); !ok {
		v := menu.DefaultBadgeVariants
		mc.mutation.SetBadgeVariants(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Menu.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Menu.update_time"`)}
	}
	if _, ok := mc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "Menu.pid"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Menu.type"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Menu.status"`)}
	}
	if _, ok := mc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Menu.path"`)}
	}
	if _, ok := mc.mutation.Redirect(); !ok {
		return &ValidationError{Name: "redirect", err: errors.New(`ent: missing required field "Menu.redirect"`)}
	}
	if _, ok := mc.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`ent: missing required field "Menu.alias"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Menu.name"`)}
	}
	if _, ok := mc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "Menu.component"`)}
	}
	if _, ok := mc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "Menu.icon"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Menu.title"`)}
	}
	if _, ok := mc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Menu.order"`)}
	}
	if _, ok := mc.mutation.OpenInNewWindow(); !ok {
		return &ValidationError{Name: "openInNewWindow", err: errors.New(`ent: missing required field "Menu.openInNewWindow"`)}
	}
	if _, ok := mc.mutation.NoBasicLayout(); !ok {
		return &ValidationError{Name: "noBasicLayout", err: errors.New(`ent: missing required field "Menu.noBasicLayout"`)}
	}
	if _, ok := mc.mutation.MenuVisibleWithForbidden(); !ok {
		return &ValidationError{Name: "menuVisibleWithForbidden", err: errors.New(`ent: missing required field "Menu.menuVisibleWithForbidden"`)}
	}
	if _, ok := mc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Menu.link"`)}
	}
	if _, ok := mc.mutation.IframeSrc(); !ok {
		return &ValidationError{Name: "iframeSrc", err: errors.New(`ent: missing required field "Menu.iframeSrc"`)}
	}
	if _, ok := mc.mutation.ActiveIcon(); !ok {
		return &ValidationError{Name: "activeIcon", err: errors.New(`ent: missing required field "Menu.activeIcon"`)}
	}
	if _, ok := mc.mutation.ActivePath(); !ok {
		return &ValidationError{Name: "activePath", err: errors.New(`ent: missing required field "Menu.activePath"`)}
	}
	if _, ok := mc.mutation.MaxNumOfOpenTab(); !ok {
		return &ValidationError{Name: "maxNumOfOpenTab", err: errors.New(`ent: missing required field "Menu.maxNumOfOpenTab"`)}
	}
	if _, ok := mc.mutation.Keepalive(); !ok {
		return &ValidationError{Name: "keepalive", err: errors.New(`ent: missing required field "Menu.keepalive"`)}
	}
	if _, ok := mc.mutation.IgnoreAccess(); !ok {
		return &ValidationError{Name: "ignoreAccess", err: errors.New(`ent: missing required field "Menu.ignoreAccess"`)}
	}
	if _, ok := mc.mutation.Authority(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`ent: missing required field "Menu.authority"`)}
	}
	if _, ok := mc.mutation.AffixTab(); !ok {
		return &ValidationError{Name: "affixTab", err: errors.New(`ent: missing required field "Menu.affixTab"`)}
	}
	if _, ok := mc.mutation.AffixTabOrder(); !ok {
		return &ValidationError{Name: "affixTabOrder", err: errors.New(`ent: missing required field "Menu.affixTabOrder"`)}
	}
	if _, ok := mc.mutation.HideInMenu(); !ok {
		return &ValidationError{Name: "hideInMenu", err: errors.New(`ent: missing required field "Menu.hideInMenu"`)}
	}
	if _, ok := mc.mutation.HideInTab(); !ok {
		return &ValidationError{Name: "hideInTab", err: errors.New(`ent: missing required field "Menu.hideInTab"`)}
	}
	if _, ok := mc.mutation.HideInBreadcrumb(); !ok {
		return &ValidationError{Name: "hideInBreadcrumb", err: errors.New(`ent: missing required field "Menu.hideInBreadcrumb"`)}
	}
	if _, ok := mc.mutation.HideChildrenInMenu(); !ok {
		return &ValidationError{Name: "hideChildrenInMenu", err: errors.New(`ent: missing required field "Menu.hideChildrenInMenu"`)}
	}
	if _, ok := mc.mutation.FullPathKey(); !ok {
		return &ValidationError{Name: "fullPathKey", err: errors.New(`ent: missing required field "Menu.fullPathKey"`)}
	}
	if _, ok := mc.mutation.Badge(); !ok {
		return &ValidationError{Name: "badge", err: errors.New(`ent: missing required field "Menu.badge"`)}
	}
	if _, ok := mc.mutation.BadgeType(); !ok {
		return &ValidationError{Name: "badgeType", err: errors.New(`ent: missing required field "Menu.badgeType"`)}
	}
	if _, ok := mc.mutation.BadgeVariants(); !ok {
		return &ValidationError{Name: "badgeVariants", err: errors.New(`ent: missing required field "Menu.badgeVariants"`)}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(menu.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Pid(); ok {
		_spec.SetField(menu.FieldPid, field.TypeInt64, value)
		_node.Pid = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := mc.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
		_node.Redirect = value
	}
	if value, ok := mc.mutation.Alias(); ok {
		_spec.SetField(menu.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt32, value)
		_node.Order = value
	}
	if value, ok := mc.mutation.OpenInNewWindow(); ok {
		_spec.SetField(menu.FieldOpenInNewWindow, field.TypeBool, value)
		_node.OpenInNewWindow = value
	}
	if value, ok := mc.mutation.NoBasicLayout(); ok {
		_spec.SetField(menu.FieldNoBasicLayout, field.TypeBool, value)
		_node.NoBasicLayout = value
	}
	if value, ok := mc.mutation.MenuVisibleWithForbidden(); ok {
		_spec.SetField(menu.FieldMenuVisibleWithForbidden, field.TypeBool, value)
		_node.MenuVisibleWithForbidden = value
	}
	if value, ok := mc.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := mc.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
		_node.IframeSrc = value
	}
	if value, ok := mc.mutation.ActiveIcon(); ok {
		_spec.SetField(menu.FieldActiveIcon, field.TypeString, value)
		_node.ActiveIcon = value
	}
	if value, ok := mc.mutation.ActivePath(); ok {
		_spec.SetField(menu.FieldActivePath, field.TypeString, value)
		_node.ActivePath = value
	}
	if value, ok := mc.mutation.MaxNumOfOpenTab(); ok {
		_spec.SetField(menu.FieldMaxNumOfOpenTab, field.TypeInt16, value)
		_node.MaxNumOfOpenTab = value
	}
	if value, ok := mc.mutation.Keepalive(); ok {
		_spec.SetField(menu.FieldKeepalive, field.TypeBool, value)
		_node.Keepalive = value
	}
	if value, ok := mc.mutation.IgnoreAccess(); ok {
		_spec.SetField(menu.FieldIgnoreAccess, field.TypeBool, value)
		_node.IgnoreAccess = value
	}
	if value, ok := mc.mutation.Authority(); ok {
		_spec.SetField(menu.FieldAuthority, field.TypeString, value)
		_node.Authority = value
	}
	if value, ok := mc.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
		_node.AffixTab = value
	}
	if value, ok := mc.mutation.AffixTabOrder(); ok {
		_spec.SetField(menu.FieldAffixTabOrder, field.TypeInt16, value)
		_node.AffixTabOrder = value
	}
	if value, ok := mc.mutation.HideInMenu(); ok {
		_spec.SetField(menu.FieldHideInMenu, field.TypeBool, value)
		_node.HideInMenu = value
	}
	if value, ok := mc.mutation.HideInTab(); ok {
		_spec.SetField(menu.FieldHideInTab, field.TypeBool, value)
		_node.HideInTab = value
	}
	if value, ok := mc.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
		_node.HideInBreadcrumb = value
	}
	if value, ok := mc.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
		_node.HideChildrenInMenu = value
	}
	if value, ok := mc.mutation.FullPathKey(); ok {
		_spec.SetField(menu.FieldFullPathKey, field.TypeBool, value)
		_node.FullPathKey = value
	}
	if value, ok := mc.mutation.Badge(); ok {
		_spec.SetField(menu.FieldBadge, field.TypeString, value)
		_node.Badge = value
	}
	if value, ok := mc.mutation.BadgeType(); ok {
		_spec.SetField(menu.FieldBadgeType, field.TypeString, value)
		_node.BadgeType = value
	}
	if value, ok := mc.mutation.BadgeVariants(); ok {
		_spec.SetField(menu.FieldBadgeVariants, field.TypeString, value)
		_node.BadgeVariants = value
	}
	return _node, _spec
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
