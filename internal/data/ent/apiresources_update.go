// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/apiresources"
	"base-server/internal/data/ent/predicate"
	"base-server/internal/data/ent/role"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiResourcesUpdate is the builder for updating ApiResources entities.
type ApiResourcesUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiResourcesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiResourcesUpdate builder.
func (aru *ApiResourcesUpdate) Where(ps ...predicate.ApiResources) *ApiResourcesUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetUpdateTime sets the "update_time" field.
func (aru *ApiResourcesUpdate) SetUpdateTime(t time.Time) *ApiResourcesUpdate {
	aru.mutation.SetUpdateTime(t)
	return aru
}

// SetDescription sets the "description" field.
func (aru *ApiResourcesUpdate) SetDescription(s string) *ApiResourcesUpdate {
	aru.mutation.SetDescription(s)
	return aru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillableDescription(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetDescription(*s)
	}
	return aru
}

// SetPath sets the "path" field.
func (aru *ApiResourcesUpdate) SetPath(s string) *ApiResourcesUpdate {
	aru.mutation.SetPath(s)
	return aru
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillablePath(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetPath(*s)
	}
	return aru
}

// SetMethod sets the "method" field.
func (aru *ApiResourcesUpdate) SetMethod(s string) *ApiResourcesUpdate {
	aru.mutation.SetMethod(s)
	return aru
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillableMethod(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetMethod(*s)
	}
	return aru
}

// SetModule sets the "module" field.
func (aru *ApiResourcesUpdate) SetModule(s string) *ApiResourcesUpdate {
	aru.mutation.SetModule(s)
	return aru
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillableModule(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetModule(*s)
	}
	return aru
}

// SetModuleDescription sets the "module_description" field.
func (aru *ApiResourcesUpdate) SetModuleDescription(s string) *ApiResourcesUpdate {
	aru.mutation.SetModuleDescription(s)
	return aru
}

// SetNillableModuleDescription sets the "module_description" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillableModuleDescription(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetModuleDescription(*s)
	}
	return aru
}

// SetResourcesGroup sets the "resources_group" field.
func (aru *ApiResourcesUpdate) SetResourcesGroup(s string) *ApiResourcesUpdate {
	aru.mutation.SetResourcesGroup(s)
	return aru
}

// SetNillableResourcesGroup sets the "resources_group" field if the given value is not nil.
func (aru *ApiResourcesUpdate) SetNillableResourcesGroup(s *string) *ApiResourcesUpdate {
	if s != nil {
		aru.SetResourcesGroup(*s)
	}
	return aru
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (aru *ApiResourcesUpdate) AddRoleIDs(ids ...int64) *ApiResourcesUpdate {
	aru.mutation.AddRoleIDs(ids...)
	return aru
}

// AddRoles adds the "roles" edges to the Role entity.
func (aru *ApiResourcesUpdate) AddRoles(r ...*Role) *ApiResourcesUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return aru.AddRoleIDs(ids...)
}

// Mutation returns the ApiResourcesMutation object of the builder.
func (aru *ApiResourcesUpdate) Mutation() *ApiResourcesMutation {
	return aru.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (aru *ApiResourcesUpdate) ClearRoles() *ApiResourcesUpdate {
	aru.mutation.ClearRoles()
	return aru
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (aru *ApiResourcesUpdate) RemoveRoleIDs(ids ...int64) *ApiResourcesUpdate {
	aru.mutation.RemoveRoleIDs(ids...)
	return aru
}

// RemoveRoles removes "roles" edges to Role entities.
func (aru *ApiResourcesUpdate) RemoveRoles(r ...*Role) *ApiResourcesUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return aru.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *ApiResourcesUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *ApiResourcesUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *ApiResourcesUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *ApiResourcesUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *ApiResourcesUpdate) defaults() {
	if _, ok := aru.mutation.UpdateTime(); !ok {
		v := apiresources.UpdateDefaultUpdateTime()
		aru.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aru *ApiResourcesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiResourcesUpdate {
	aru.modifiers = append(aru.modifiers, modifiers...)
	return aru
}

func (aru *ApiResourcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apiresources.Table, apiresources.Columns, sqlgraph.NewFieldSpec(apiresources.FieldID, field.TypeString))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.UpdateTime(); ok {
		_spec.SetField(apiresources.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := aru.mutation.Description(); ok {
		_spec.SetField(apiresources.FieldDescription, field.TypeString, value)
	}
	if value, ok := aru.mutation.Path(); ok {
		_spec.SetField(apiresources.FieldPath, field.TypeString, value)
	}
	if value, ok := aru.mutation.Method(); ok {
		_spec.SetField(apiresources.FieldMethod, field.TypeString, value)
	}
	if value, ok := aru.mutation.Module(); ok {
		_spec.SetField(apiresources.FieldModule, field.TypeString, value)
	}
	if value, ok := aru.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresources.FieldModuleDescription, field.TypeString, value)
	}
	if value, ok := aru.mutation.ResourcesGroup(); ok {
		_spec.SetField(apiresources.FieldResourcesGroup, field.TypeString, value)
	}
	if aru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedRolesIDs(); len(nodes) > 0 && !aru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// ApiResourcesUpdateOne is the builder for updating a single ApiResources entity.
type ApiResourcesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiResourcesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (aruo *ApiResourcesUpdateOne) SetUpdateTime(t time.Time) *ApiResourcesUpdateOne {
	aruo.mutation.SetUpdateTime(t)
	return aruo
}

// SetDescription sets the "description" field.
func (aruo *ApiResourcesUpdateOne) SetDescription(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetDescription(s)
	return aruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillableDescription(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetDescription(*s)
	}
	return aruo
}

// SetPath sets the "path" field.
func (aruo *ApiResourcesUpdateOne) SetPath(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetPath(s)
	return aruo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillablePath(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetPath(*s)
	}
	return aruo
}

// SetMethod sets the "method" field.
func (aruo *ApiResourcesUpdateOne) SetMethod(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetMethod(s)
	return aruo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillableMethod(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetMethod(*s)
	}
	return aruo
}

// SetModule sets the "module" field.
func (aruo *ApiResourcesUpdateOne) SetModule(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetModule(s)
	return aruo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillableModule(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetModule(*s)
	}
	return aruo
}

// SetModuleDescription sets the "module_description" field.
func (aruo *ApiResourcesUpdateOne) SetModuleDescription(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetModuleDescription(s)
	return aruo
}

// SetNillableModuleDescription sets the "module_description" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillableModuleDescription(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetModuleDescription(*s)
	}
	return aruo
}

// SetResourcesGroup sets the "resources_group" field.
func (aruo *ApiResourcesUpdateOne) SetResourcesGroup(s string) *ApiResourcesUpdateOne {
	aruo.mutation.SetResourcesGroup(s)
	return aruo
}

// SetNillableResourcesGroup sets the "resources_group" field if the given value is not nil.
func (aruo *ApiResourcesUpdateOne) SetNillableResourcesGroup(s *string) *ApiResourcesUpdateOne {
	if s != nil {
		aruo.SetResourcesGroup(*s)
	}
	return aruo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (aruo *ApiResourcesUpdateOne) AddRoleIDs(ids ...int64) *ApiResourcesUpdateOne {
	aruo.mutation.AddRoleIDs(ids...)
	return aruo
}

// AddRoles adds the "roles" edges to the Role entity.
func (aruo *ApiResourcesUpdateOne) AddRoles(r ...*Role) *ApiResourcesUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return aruo.AddRoleIDs(ids...)
}

// Mutation returns the ApiResourcesMutation object of the builder.
func (aruo *ApiResourcesUpdateOne) Mutation() *ApiResourcesMutation {
	return aruo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (aruo *ApiResourcesUpdateOne) ClearRoles() *ApiResourcesUpdateOne {
	aruo.mutation.ClearRoles()
	return aruo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (aruo *ApiResourcesUpdateOne) RemoveRoleIDs(ids ...int64) *ApiResourcesUpdateOne {
	aruo.mutation.RemoveRoleIDs(ids...)
	return aruo
}

// RemoveRoles removes "roles" edges to Role entities.
func (aruo *ApiResourcesUpdateOne) RemoveRoles(r ...*Role) *ApiResourcesUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return aruo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the ApiResourcesUpdate builder.
func (aruo *ApiResourcesUpdateOne) Where(ps ...predicate.ApiResources) *ApiResourcesUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *ApiResourcesUpdateOne) Select(field string, fields ...string) *ApiResourcesUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated ApiResources entity.
func (aruo *ApiResourcesUpdateOne) Save(ctx context.Context) (*ApiResources, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *ApiResourcesUpdateOne) SaveX(ctx context.Context) *ApiResources {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *ApiResourcesUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *ApiResourcesUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *ApiResourcesUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdateTime(); !ok {
		v := apiresources.UpdateDefaultUpdateTime()
		aruo.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruo *ApiResourcesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiResourcesUpdateOne {
	aruo.modifiers = append(aruo.modifiers, modifiers...)
	return aruo
}

func (aruo *ApiResourcesUpdateOne) sqlSave(ctx context.Context) (_node *ApiResources, err error) {
	_spec := sqlgraph.NewUpdateSpec(apiresources.Table, apiresources.Columns, sqlgraph.NewFieldSpec(apiresources.FieldID, field.TypeString))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiResources.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apiresources.FieldID)
		for _, f := range fields {
			if !apiresources.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apiresources.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.UpdateTime(); ok {
		_spec.SetField(apiresources.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.Description(); ok {
		_spec.SetField(apiresources.FieldDescription, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Path(); ok {
		_spec.SetField(apiresources.FieldPath, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Method(); ok {
		_spec.SetField(apiresources.FieldMethod, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Module(); ok {
		_spec.SetField(apiresources.FieldModule, field.TypeString, value)
	}
	if value, ok := aruo.mutation.ModuleDescription(); ok {
		_spec.SetField(apiresources.FieldModuleDescription, field.TypeString, value)
	}
	if value, ok := aruo.mutation.ResourcesGroup(); ok {
		_spec.SetField(apiresources.FieldResourcesGroup, field.TypeString, value)
	}
	if aruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !aruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   apiresources.RolesTable,
			Columns: apiresources.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aruo.modifiers...)
	_node = &ApiResources{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
