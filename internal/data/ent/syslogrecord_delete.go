// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/predicate"
	"base-server/internal/data/ent/syslogrecord"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysLogRecordDelete is the builder for deleting a SysLogRecord entity.
type SysLogRecordDelete struct {
	config
	hooks    []Hook
	mutation *SysLogRecordMutation
}

// Where appends a list predicates to the SysLogRecordDelete builder.
func (slrd *SysLogRecordDelete) Where(ps ...predicate.SysLogRecord) *SysLogRecordDelete {
	slrd.mutation.Where(ps...)
	return slrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (slrd *SysLogRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, slrd.sqlExec, slrd.mutation, slrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (slrd *SysLogRecordDelete) ExecX(ctx context.Context) int {
	n, err := slrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (slrd *SysLogRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(syslogrecord.Table, sqlgraph.NewFieldSpec(syslogrecord.FieldID, field.TypeString))
	if ps := slrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, slrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	slrd.mutation.done = true
	return affected, err
}

// SysLogRecordDeleteOne is the builder for deleting a single SysLogRecord entity.
type SysLogRecordDeleteOne struct {
	slrd *SysLogRecordDelete
}

// Where appends a list predicates to the SysLogRecordDelete builder.
func (slrdo *SysLogRecordDeleteOne) Where(ps ...predicate.SysLogRecord) *SysLogRecordDeleteOne {
	slrdo.slrd.mutation.Where(ps...)
	return slrdo
}

// Exec executes the deletion query.
func (slrdo *SysLogRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := slrdo.slrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{syslogrecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (slrdo *SysLogRecordDeleteOne) ExecX(ctx context.Context) {
	if err := slrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
