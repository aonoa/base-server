// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/rule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleCreate is the builder for creating a Rule entity.
type RuleCreate struct {
	config
	mutation *RuleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rc *RuleCreate) SetCreateTime(t time.Time) *RuleCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RuleCreate) SetNillableCreateTime(t *time.Time) *RuleCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RuleCreate) SetUpdateTime(t time.Time) *RuleCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RuleCreate) SetNillableUpdateTime(t *time.Time) *RuleCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetPtype sets the "ptype" field.
func (rc *RuleCreate) SetPtype(s string) *RuleCreate {
	rc.mutation.SetPtype(s)
	return rc
}

// SetV0 sets the "v0" field.
func (rc *RuleCreate) SetV0(s string) *RuleCreate {
	rc.mutation.SetV0(s)
	return rc
}

// SetV1 sets the "v1" field.
func (rc *RuleCreate) SetV1(s string) *RuleCreate {
	rc.mutation.SetV1(s)
	return rc
}

// SetV2 sets the "v2" field.
func (rc *RuleCreate) SetV2(s string) *RuleCreate {
	rc.mutation.SetV2(s)
	return rc
}

// SetV3 sets the "v3" field.
func (rc *RuleCreate) SetV3(s string) *RuleCreate {
	rc.mutation.SetV3(s)
	return rc
}

// SetV4 sets the "v4" field.
func (rc *RuleCreate) SetV4(s string) *RuleCreate {
	rc.mutation.SetV4(s)
	return rc
}

// SetV5 sets the "v5" field.
func (rc *RuleCreate) SetV5(s string) *RuleCreate {
	rc.mutation.SetV5(s)
	return rc
}

// Mutation returns the RuleMutation object of the builder.
func (rc *RuleCreate) Mutation() *RuleMutation {
	return rc.mutation
}

// Save creates the Rule in the database.
func (rc *RuleCreate) Save(ctx context.Context) (*Rule, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RuleCreate) SaveX(ctx context.Context) *Rule {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RuleCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RuleCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RuleCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := rule.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := rule.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RuleCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Rule.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Rule.update_time"`)}
	}
	if _, ok := rc.mutation.Ptype(); !ok {
		return &ValidationError{Name: "ptype", err: errors.New(`ent: missing required field "Rule.ptype"`)}
	}
	if _, ok := rc.mutation.V0(); !ok {
		return &ValidationError{Name: "v0", err: errors.New(`ent: missing required field "Rule.v0"`)}
	}
	if _, ok := rc.mutation.V1(); !ok {
		return &ValidationError{Name: "v1", err: errors.New(`ent: missing required field "Rule.v1"`)}
	}
	if _, ok := rc.mutation.V2(); !ok {
		return &ValidationError{Name: "v2", err: errors.New(`ent: missing required field "Rule.v2"`)}
	}
	if _, ok := rc.mutation.V3(); !ok {
		return &ValidationError{Name: "v3", err: errors.New(`ent: missing required field "Rule.v3"`)}
	}
	if _, ok := rc.mutation.V4(); !ok {
		return &ValidationError{Name: "v4", err: errors.New(`ent: missing required field "Rule.v4"`)}
	}
	if _, ok := rc.mutation.V5(); !ok {
		return &ValidationError{Name: "v5", err: errors.New(`ent: missing required field "Rule.v5"`)}
	}
	return nil
}

func (rc *RuleCreate) sqlSave(ctx context.Context) (*Rule, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RuleCreate) createSpec() (*Rule, *sqlgraph.CreateSpec) {
	var (
		_node = &Rule{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rule.Table, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(rule.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(rule.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.Ptype(); ok {
		_spec.SetField(rule.FieldPtype, field.TypeString, value)
		_node.Ptype = value
	}
	if value, ok := rc.mutation.V0(); ok {
		_spec.SetField(rule.FieldV0, field.TypeString, value)
		_node.V0 = value
	}
	if value, ok := rc.mutation.V1(); ok {
		_spec.SetField(rule.FieldV1, field.TypeString, value)
		_node.V1 = value
	}
	if value, ok := rc.mutation.V2(); ok {
		_spec.SetField(rule.FieldV2, field.TypeString, value)
		_node.V2 = value
	}
	if value, ok := rc.mutation.V3(); ok {
		_spec.SetField(rule.FieldV3, field.TypeString, value)
		_node.V3 = value
	}
	if value, ok := rc.mutation.V4(); ok {
		_spec.SetField(rule.FieldV4, field.TypeString, value)
		_node.V4 = value
	}
	if value, ok := rc.mutation.V5(); ok {
		_spec.SetField(rule.FieldV5, field.TypeString, value)
		_node.V5 = value
	}
	return _node, _spec
}

// RuleCreateBulk is the builder for creating many Rule entities in bulk.
type RuleCreateBulk struct {
	config
	err      error
	builders []*RuleCreate
}

// Save creates the Rule entities in the database.
func (rcb *RuleCreateBulk) Save(ctx context.Context) ([]*Rule, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rule, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RuleCreateBulk) SaveX(ctx context.Context) []*Rule {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RuleCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RuleCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
