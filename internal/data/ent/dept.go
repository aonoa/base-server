// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/dept"
	"base-server/internal/data/ent/role"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Dept is the model entity for the Dept schema.
type Dept struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 部门名称
	Name string `json:"name,omitempty"`
	// 排序
	Sort int `json:"sort,omitempty"`
	// 0-锁定，1-正常
	Status bool `json:"status,omitempty"`
	// 备注
	Desc string `json:"desc,omitempty"`
	// 扩展信息
	Extension string `json:"extension,omitempty"`
	// 域
	Dom int64 `json:"dom,omitempty"`
	// 父节点id
	Pid int64 `json:"pid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeptQuery when eager-loading is set.
	Edges        DeptEdges `json:"edges"`
	dept_roles   *int64
	selectValues sql.SelectValues
}

// DeptEdges holds the relations/edges for other nodes in the graph.
type DeptEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Roles holds the value of the roles edge.
	Roles *Role `json:"roles,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Dept `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Dept `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DeptEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeptEdges) RolesOrErr() (*Role, error) {
	if e.loadedTypes[1] {
		if e.Roles == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeptEdges) ParentOrErr() (*Dept, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dept.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e DeptEdges) ChildrenOrErr() ([]*Dept, error) {
	if e.loadedTypes[3] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dept) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dept.FieldStatus:
			values[i] = new(sql.NullBool)
		case dept.FieldID, dept.FieldSort, dept.FieldDom, dept.FieldPid:
			values[i] = new(sql.NullInt64)
		case dept.FieldName, dept.FieldDesc, dept.FieldExtension:
			values[i] = new(sql.NullString)
		case dept.FieldCreateTime, dept.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case dept.ForeignKeys[0]: // dept_roles
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dept fields.
func (d *Dept) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dept.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case dept.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case dept.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case dept.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dept.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				d.Sort = int(value.Int64)
			}
		case dept.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.Bool
			}
		case dept.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				d.Desc = value.String
			}
		case dept.FieldExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extension", values[i])
			} else if value.Valid {
				d.Extension = value.String
			}
		case dept.FieldDom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dom", values[i])
			} else if value.Valid {
				d.Dom = value.Int64
			}
		case dept.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				d.Pid = value.Int64
			}
		case dept.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dept_roles", value)
			} else if value.Valid {
				d.dept_roles = new(int64)
				*d.dept_roles = int64(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dept.
// This includes values selected through modifiers, order, etc.
func (d *Dept) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Dept entity.
func (d *Dept) QueryUsers() *UserQuery {
	return NewDeptClient(d.config).QueryUsers(d)
}

// QueryRoles queries the "roles" edge of the Dept entity.
func (d *Dept) QueryRoles() *RoleQuery {
	return NewDeptClient(d.config).QueryRoles(d)
}

// QueryParent queries the "parent" edge of the Dept entity.
func (d *Dept) QueryParent() *DeptQuery {
	return NewDeptClient(d.config).QueryParent(d)
}

// QueryChildren queries the "children" edge of the Dept entity.
func (d *Dept) QueryChildren() *DeptQuery {
	return NewDeptClient(d.config).QueryChildren(d)
}

// Update returns a builder for updating this Dept.
// Note that you need to call Dept.Unwrap() before calling this method if this Dept
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dept) Update() *DeptUpdateOne {
	return NewDeptClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dept entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dept) Unwrap() *Dept {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dept is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dept) String() string {
	var builder strings.Builder
	builder.WriteString("Dept(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", d.Sort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(d.Desc)
	builder.WriteString(", ")
	builder.WriteString("extension=")
	builder.WriteString(d.Extension)
	builder.WriteString(", ")
	builder.WriteString("dom=")
	builder.WriteString(fmt.Sprintf("%v", d.Dom))
	builder.WriteString(", ")
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", d.Pid))
	builder.WriteByte(')')
	return builder.String()
}

// Depts is a parsable slice of Dept.
type Depts []*Dept
