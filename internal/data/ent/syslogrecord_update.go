// Code generated by ent, DO NOT EDIT.

package ent

import (
	"base-server/internal/data/ent/predicate"
	"base-server/internal/data/ent/syslogrecord"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysLogRecordUpdate is the builder for updating SysLogRecord entities.
type SysLogRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *SysLogRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysLogRecordUpdate builder.
func (slru *SysLogRecordUpdate) Where(ps ...predicate.SysLogRecord) *SysLogRecordUpdate {
	slru.mutation.Where(ps...)
	return slru
}

// SetUserID sets the "user_id" field.
func (slru *SysLogRecordUpdate) SetUserID(s string) *SysLogRecordUpdate {
	slru.mutation.SetUserID(s)
	return slru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableUserID(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetUserID(*s)
	}
	return slru
}

// SetUserName sets the "user_name" field.
func (slru *SysLogRecordUpdate) SetUserName(s string) *SysLogRecordUpdate {
	slru.mutation.SetUserName(s)
	return slru
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableUserName(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetUserName(*s)
	}
	return slru
}

// SetIsLogin sets the "is_login" field.
func (slru *SysLogRecordUpdate) SetIsLogin(b bool) *SysLogRecordUpdate {
	slru.mutation.SetIsLogin(b)
	return slru
}

// SetNillableIsLogin sets the "is_login" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableIsLogin(b *bool) *SysLogRecordUpdate {
	if b != nil {
		slru.SetIsLogin(*b)
	}
	return slru
}

// SetSessionID sets the "session_id" field.
func (slru *SysLogRecordUpdate) SetSessionID(s string) *SysLogRecordUpdate {
	slru.mutation.SetSessionID(s)
	return slru
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableSessionID(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetSessionID(*s)
	}
	return slru
}

// SetMethod sets the "method" field.
func (slru *SysLogRecordUpdate) SetMethod(s string) *SysLogRecordUpdate {
	slru.mutation.SetMethod(s)
	return slru
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableMethod(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetMethod(*s)
	}
	return slru
}

// SetPath sets the "path" field.
func (slru *SysLogRecordUpdate) SetPath(s string) *SysLogRecordUpdate {
	slru.mutation.SetPath(s)
	return slru
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillablePath(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetPath(*s)
	}
	return slru
}

// SetRequestTime sets the "request_time" field.
func (slru *SysLogRecordUpdate) SetRequestTime(t time.Time) *SysLogRecordUpdate {
	slru.mutation.SetRequestTime(t)
	return slru
}

// SetNillableRequestTime sets the "request_time" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableRequestTime(t *time.Time) *SysLogRecordUpdate {
	if t != nil {
		slru.SetRequestTime(*t)
	}
	return slru
}

// SetIPAddress sets the "ip_address" field.
func (slru *SysLogRecordUpdate) SetIPAddress(s string) *SysLogRecordUpdate {
	slru.mutation.SetIPAddress(s)
	return slru
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableIPAddress(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetIPAddress(*s)
	}
	return slru
}

// SetIPLocation sets the "ip_location" field.
func (slru *SysLogRecordUpdate) SetIPLocation(s string) *SysLogRecordUpdate {
	slru.mutation.SetIPLocation(s)
	return slru
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableIPLocation(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetIPLocation(*s)
	}
	return slru
}

// SetLatency sets the "latency" field.
func (slru *SysLogRecordUpdate) SetLatency(i int64) *SysLogRecordUpdate {
	slru.mutation.ResetLatency()
	slru.mutation.SetLatency(i)
	return slru
}

// SetNillableLatency sets the "latency" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableLatency(i *int64) *SysLogRecordUpdate {
	if i != nil {
		slru.SetLatency(*i)
	}
	return slru
}

// AddLatency adds i to the "latency" field.
func (slru *SysLogRecordUpdate) AddLatency(i int64) *SysLogRecordUpdate {
	slru.mutation.AddLatency(i)
	return slru
}

// SetOs sets the "os" field.
func (slru *SysLogRecordUpdate) SetOs(s string) *SysLogRecordUpdate {
	slru.mutation.SetOs(s)
	return slru
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableOs(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetOs(*s)
	}
	return slru
}

// SetBrowser sets the "browser" field.
func (slru *SysLogRecordUpdate) SetBrowser(s string) *SysLogRecordUpdate {
	slru.mutation.SetBrowser(s)
	return slru
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableBrowser(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetBrowser(*s)
	}
	return slru
}

// SetUserAgent sets the "user_agent" field.
func (slru *SysLogRecordUpdate) SetUserAgent(s string) *SysLogRecordUpdate {
	slru.mutation.SetUserAgent(s)
	return slru
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableUserAgent(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetUserAgent(*s)
	}
	return slru
}

// SetHeader sets the "header" field.
func (slru *SysLogRecordUpdate) SetHeader(s string) *SysLogRecordUpdate {
	slru.mutation.SetHeader(s)
	return slru
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableHeader(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetHeader(*s)
	}
	return slru
}

// SetGetParams sets the "get_params" field.
func (slru *SysLogRecordUpdate) SetGetParams(s string) *SysLogRecordUpdate {
	slru.mutation.SetGetParams(s)
	return slru
}

// SetNillableGetParams sets the "get_params" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableGetParams(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetGetParams(*s)
	}
	return slru
}

// SetPostData sets the "post_data" field.
func (slru *SysLogRecordUpdate) SetPostData(s string) *SysLogRecordUpdate {
	slru.mutation.SetPostData(s)
	return slru
}

// SetNillablePostData sets the "post_data" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillablePostData(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetPostData(*s)
	}
	return slru
}

// SetResCode sets the "res_code" field.
func (slru *SysLogRecordUpdate) SetResCode(i int32) *SysLogRecordUpdate {
	slru.mutation.ResetResCode()
	slru.mutation.SetResCode(i)
	return slru
}

// SetNillableResCode sets the "res_code" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableResCode(i *int32) *SysLogRecordUpdate {
	if i != nil {
		slru.SetResCode(*i)
	}
	return slru
}

// AddResCode adds i to the "res_code" field.
func (slru *SysLogRecordUpdate) AddResCode(i int32) *SysLogRecordUpdate {
	slru.mutation.AddResCode(i)
	return slru
}

// SetReason sets the "reason" field.
func (slru *SysLogRecordUpdate) SetReason(s string) *SysLogRecordUpdate {
	slru.mutation.SetReason(s)
	return slru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableReason(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetReason(*s)
	}
	return slru
}

// SetResStatus sets the "res_status" field.
func (slru *SysLogRecordUpdate) SetResStatus(b bool) *SysLogRecordUpdate {
	slru.mutation.SetResStatus(b)
	return slru
}

// SetNillableResStatus sets the "res_status" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableResStatus(b *bool) *SysLogRecordUpdate {
	if b != nil {
		slru.SetResStatus(*b)
	}
	return slru
}

// SetStack sets the "stack" field.
func (slru *SysLogRecordUpdate) SetStack(s string) *SysLogRecordUpdate {
	slru.mutation.SetStack(s)
	return slru
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (slru *SysLogRecordUpdate) SetNillableStack(s *string) *SysLogRecordUpdate {
	if s != nil {
		slru.SetStack(*s)
	}
	return slru
}

// Mutation returns the SysLogRecordMutation object of the builder.
func (slru *SysLogRecordUpdate) Mutation() *SysLogRecordMutation {
	return slru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slru *SysLogRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slru.sqlSave, slru.mutation, slru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slru *SysLogRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := slru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slru *SysLogRecordUpdate) Exec(ctx context.Context) error {
	_, err := slru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slru *SysLogRecordUpdate) ExecX(ctx context.Context) {
	if err := slru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (slru *SysLogRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysLogRecordUpdate {
	slru.modifiers = append(slru.modifiers, modifiers...)
	return slru
}

func (slru *SysLogRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(syslogrecord.Table, syslogrecord.Columns, sqlgraph.NewFieldSpec(syslogrecord.FieldID, field.TypeString))
	if ps := slru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slru.mutation.UserID(); ok {
		_spec.SetField(syslogrecord.FieldUserID, field.TypeString, value)
	}
	if value, ok := slru.mutation.UserName(); ok {
		_spec.SetField(syslogrecord.FieldUserName, field.TypeString, value)
	}
	if value, ok := slru.mutation.IsLogin(); ok {
		_spec.SetField(syslogrecord.FieldIsLogin, field.TypeBool, value)
	}
	if value, ok := slru.mutation.SessionID(); ok {
		_spec.SetField(syslogrecord.FieldSessionID, field.TypeString, value)
	}
	if value, ok := slru.mutation.Method(); ok {
		_spec.SetField(syslogrecord.FieldMethod, field.TypeString, value)
	}
	if value, ok := slru.mutation.Path(); ok {
		_spec.SetField(syslogrecord.FieldPath, field.TypeString, value)
	}
	if value, ok := slru.mutation.RequestTime(); ok {
		_spec.SetField(syslogrecord.FieldRequestTime, field.TypeTime, value)
	}
	if value, ok := slru.mutation.IPAddress(); ok {
		_spec.SetField(syslogrecord.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := slru.mutation.IPLocation(); ok {
		_spec.SetField(syslogrecord.FieldIPLocation, field.TypeString, value)
	}
	if value, ok := slru.mutation.Latency(); ok {
		_spec.SetField(syslogrecord.FieldLatency, field.TypeInt64, value)
	}
	if value, ok := slru.mutation.AddedLatency(); ok {
		_spec.AddField(syslogrecord.FieldLatency, field.TypeInt64, value)
	}
	if value, ok := slru.mutation.Os(); ok {
		_spec.SetField(syslogrecord.FieldOs, field.TypeString, value)
	}
	if value, ok := slru.mutation.Browser(); ok {
		_spec.SetField(syslogrecord.FieldBrowser, field.TypeString, value)
	}
	if value, ok := slru.mutation.UserAgent(); ok {
		_spec.SetField(syslogrecord.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := slru.mutation.Header(); ok {
		_spec.SetField(syslogrecord.FieldHeader, field.TypeString, value)
	}
	if value, ok := slru.mutation.GetParams(); ok {
		_spec.SetField(syslogrecord.FieldGetParams, field.TypeString, value)
	}
	if value, ok := slru.mutation.PostData(); ok {
		_spec.SetField(syslogrecord.FieldPostData, field.TypeString, value)
	}
	if value, ok := slru.mutation.ResCode(); ok {
		_spec.SetField(syslogrecord.FieldResCode, field.TypeInt32, value)
	}
	if value, ok := slru.mutation.AddedResCode(); ok {
		_spec.AddField(syslogrecord.FieldResCode, field.TypeInt32, value)
	}
	if value, ok := slru.mutation.Reason(); ok {
		_spec.SetField(syslogrecord.FieldReason, field.TypeString, value)
	}
	if value, ok := slru.mutation.ResStatus(); ok {
		_spec.SetField(syslogrecord.FieldResStatus, field.TypeBool, value)
	}
	if value, ok := slru.mutation.Stack(); ok {
		_spec.SetField(syslogrecord.FieldStack, field.TypeString, value)
	}
	_spec.AddModifiers(slru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, slru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syslogrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slru.mutation.done = true
	return n, nil
}

// SysLogRecordUpdateOne is the builder for updating a single SysLogRecord entity.
type SysLogRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysLogRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (slruo *SysLogRecordUpdateOne) SetUserID(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetUserID(s)
	return slruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableUserID(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetUserID(*s)
	}
	return slruo
}

// SetUserName sets the "user_name" field.
func (slruo *SysLogRecordUpdateOne) SetUserName(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetUserName(s)
	return slruo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableUserName(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetUserName(*s)
	}
	return slruo
}

// SetIsLogin sets the "is_login" field.
func (slruo *SysLogRecordUpdateOne) SetIsLogin(b bool) *SysLogRecordUpdateOne {
	slruo.mutation.SetIsLogin(b)
	return slruo
}

// SetNillableIsLogin sets the "is_login" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableIsLogin(b *bool) *SysLogRecordUpdateOne {
	if b != nil {
		slruo.SetIsLogin(*b)
	}
	return slruo
}

// SetSessionID sets the "session_id" field.
func (slruo *SysLogRecordUpdateOne) SetSessionID(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetSessionID(s)
	return slruo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableSessionID(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetSessionID(*s)
	}
	return slruo
}

// SetMethod sets the "method" field.
func (slruo *SysLogRecordUpdateOne) SetMethod(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetMethod(s)
	return slruo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableMethod(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetMethod(*s)
	}
	return slruo
}

// SetPath sets the "path" field.
func (slruo *SysLogRecordUpdateOne) SetPath(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetPath(s)
	return slruo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillablePath(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetPath(*s)
	}
	return slruo
}

// SetRequestTime sets the "request_time" field.
func (slruo *SysLogRecordUpdateOne) SetRequestTime(t time.Time) *SysLogRecordUpdateOne {
	slruo.mutation.SetRequestTime(t)
	return slruo
}

// SetNillableRequestTime sets the "request_time" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableRequestTime(t *time.Time) *SysLogRecordUpdateOne {
	if t != nil {
		slruo.SetRequestTime(*t)
	}
	return slruo
}

// SetIPAddress sets the "ip_address" field.
func (slruo *SysLogRecordUpdateOne) SetIPAddress(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetIPAddress(s)
	return slruo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableIPAddress(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetIPAddress(*s)
	}
	return slruo
}

// SetIPLocation sets the "ip_location" field.
func (slruo *SysLogRecordUpdateOne) SetIPLocation(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetIPLocation(s)
	return slruo
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableIPLocation(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetIPLocation(*s)
	}
	return slruo
}

// SetLatency sets the "latency" field.
func (slruo *SysLogRecordUpdateOne) SetLatency(i int64) *SysLogRecordUpdateOne {
	slruo.mutation.ResetLatency()
	slruo.mutation.SetLatency(i)
	return slruo
}

// SetNillableLatency sets the "latency" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableLatency(i *int64) *SysLogRecordUpdateOne {
	if i != nil {
		slruo.SetLatency(*i)
	}
	return slruo
}

// AddLatency adds i to the "latency" field.
func (slruo *SysLogRecordUpdateOne) AddLatency(i int64) *SysLogRecordUpdateOne {
	slruo.mutation.AddLatency(i)
	return slruo
}

// SetOs sets the "os" field.
func (slruo *SysLogRecordUpdateOne) SetOs(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetOs(s)
	return slruo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableOs(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetOs(*s)
	}
	return slruo
}

// SetBrowser sets the "browser" field.
func (slruo *SysLogRecordUpdateOne) SetBrowser(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetBrowser(s)
	return slruo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableBrowser(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetBrowser(*s)
	}
	return slruo
}

// SetUserAgent sets the "user_agent" field.
func (slruo *SysLogRecordUpdateOne) SetUserAgent(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetUserAgent(s)
	return slruo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableUserAgent(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetUserAgent(*s)
	}
	return slruo
}

// SetHeader sets the "header" field.
func (slruo *SysLogRecordUpdateOne) SetHeader(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetHeader(s)
	return slruo
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableHeader(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetHeader(*s)
	}
	return slruo
}

// SetGetParams sets the "get_params" field.
func (slruo *SysLogRecordUpdateOne) SetGetParams(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetGetParams(s)
	return slruo
}

// SetNillableGetParams sets the "get_params" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableGetParams(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetGetParams(*s)
	}
	return slruo
}

// SetPostData sets the "post_data" field.
func (slruo *SysLogRecordUpdateOne) SetPostData(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetPostData(s)
	return slruo
}

// SetNillablePostData sets the "post_data" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillablePostData(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetPostData(*s)
	}
	return slruo
}

// SetResCode sets the "res_code" field.
func (slruo *SysLogRecordUpdateOne) SetResCode(i int32) *SysLogRecordUpdateOne {
	slruo.mutation.ResetResCode()
	slruo.mutation.SetResCode(i)
	return slruo
}

// SetNillableResCode sets the "res_code" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableResCode(i *int32) *SysLogRecordUpdateOne {
	if i != nil {
		slruo.SetResCode(*i)
	}
	return slruo
}

// AddResCode adds i to the "res_code" field.
func (slruo *SysLogRecordUpdateOne) AddResCode(i int32) *SysLogRecordUpdateOne {
	slruo.mutation.AddResCode(i)
	return slruo
}

// SetReason sets the "reason" field.
func (slruo *SysLogRecordUpdateOne) SetReason(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetReason(s)
	return slruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableReason(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetReason(*s)
	}
	return slruo
}

// SetResStatus sets the "res_status" field.
func (slruo *SysLogRecordUpdateOne) SetResStatus(b bool) *SysLogRecordUpdateOne {
	slruo.mutation.SetResStatus(b)
	return slruo
}

// SetNillableResStatus sets the "res_status" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableResStatus(b *bool) *SysLogRecordUpdateOne {
	if b != nil {
		slruo.SetResStatus(*b)
	}
	return slruo
}

// SetStack sets the "stack" field.
func (slruo *SysLogRecordUpdateOne) SetStack(s string) *SysLogRecordUpdateOne {
	slruo.mutation.SetStack(s)
	return slruo
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (slruo *SysLogRecordUpdateOne) SetNillableStack(s *string) *SysLogRecordUpdateOne {
	if s != nil {
		slruo.SetStack(*s)
	}
	return slruo
}

// Mutation returns the SysLogRecordMutation object of the builder.
func (slruo *SysLogRecordUpdateOne) Mutation() *SysLogRecordMutation {
	return slruo.mutation
}

// Where appends a list predicates to the SysLogRecordUpdate builder.
func (slruo *SysLogRecordUpdateOne) Where(ps ...predicate.SysLogRecord) *SysLogRecordUpdateOne {
	slruo.mutation.Where(ps...)
	return slruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (slruo *SysLogRecordUpdateOne) Select(field string, fields ...string) *SysLogRecordUpdateOne {
	slruo.fields = append([]string{field}, fields...)
	return slruo
}

// Save executes the query and returns the updated SysLogRecord entity.
func (slruo *SysLogRecordUpdateOne) Save(ctx context.Context) (*SysLogRecord, error) {
	return withHooks(ctx, slruo.sqlSave, slruo.mutation, slruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slruo *SysLogRecordUpdateOne) SaveX(ctx context.Context) *SysLogRecord {
	node, err := slruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (slruo *SysLogRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := slruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slruo *SysLogRecordUpdateOne) ExecX(ctx context.Context) {
	if err := slruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (slruo *SysLogRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysLogRecordUpdateOne {
	slruo.modifiers = append(slruo.modifiers, modifiers...)
	return slruo
}

func (slruo *SysLogRecordUpdateOne) sqlSave(ctx context.Context) (_node *SysLogRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(syslogrecord.Table, syslogrecord.Columns, sqlgraph.NewFieldSpec(syslogrecord.FieldID, field.TypeString))
	id, ok := slruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysLogRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := slruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syslogrecord.FieldID)
		for _, f := range fields {
			if !syslogrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syslogrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := slruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slruo.mutation.UserID(); ok {
		_spec.SetField(syslogrecord.FieldUserID, field.TypeString, value)
	}
	if value, ok := slruo.mutation.UserName(); ok {
		_spec.SetField(syslogrecord.FieldUserName, field.TypeString, value)
	}
	if value, ok := slruo.mutation.IsLogin(); ok {
		_spec.SetField(syslogrecord.FieldIsLogin, field.TypeBool, value)
	}
	if value, ok := slruo.mutation.SessionID(); ok {
		_spec.SetField(syslogrecord.FieldSessionID, field.TypeString, value)
	}
	if value, ok := slruo.mutation.Method(); ok {
		_spec.SetField(syslogrecord.FieldMethod, field.TypeString, value)
	}
	if value, ok := slruo.mutation.Path(); ok {
		_spec.SetField(syslogrecord.FieldPath, field.TypeString, value)
	}
	if value, ok := slruo.mutation.RequestTime(); ok {
		_spec.SetField(syslogrecord.FieldRequestTime, field.TypeTime, value)
	}
	if value, ok := slruo.mutation.IPAddress(); ok {
		_spec.SetField(syslogrecord.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := slruo.mutation.IPLocation(); ok {
		_spec.SetField(syslogrecord.FieldIPLocation, field.TypeString, value)
	}
	if value, ok := slruo.mutation.Latency(); ok {
		_spec.SetField(syslogrecord.FieldLatency, field.TypeInt64, value)
	}
	if value, ok := slruo.mutation.AddedLatency(); ok {
		_spec.AddField(syslogrecord.FieldLatency, field.TypeInt64, value)
	}
	if value, ok := slruo.mutation.Os(); ok {
		_spec.SetField(syslogrecord.FieldOs, field.TypeString, value)
	}
	if value, ok := slruo.mutation.Browser(); ok {
		_spec.SetField(syslogrecord.FieldBrowser, field.TypeString, value)
	}
	if value, ok := slruo.mutation.UserAgent(); ok {
		_spec.SetField(syslogrecord.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := slruo.mutation.Header(); ok {
		_spec.SetField(syslogrecord.FieldHeader, field.TypeString, value)
	}
	if value, ok := slruo.mutation.GetParams(); ok {
		_spec.SetField(syslogrecord.FieldGetParams, field.TypeString, value)
	}
	if value, ok := slruo.mutation.PostData(); ok {
		_spec.SetField(syslogrecord.FieldPostData, field.TypeString, value)
	}
	if value, ok := slruo.mutation.ResCode(); ok {
		_spec.SetField(syslogrecord.FieldResCode, field.TypeInt32, value)
	}
	if value, ok := slruo.mutation.AddedResCode(); ok {
		_spec.AddField(syslogrecord.FieldResCode, field.TypeInt32, value)
	}
	if value, ok := slruo.mutation.Reason(); ok {
		_spec.SetField(syslogrecord.FieldReason, field.TypeString, value)
	}
	if value, ok := slruo.mutation.ResStatus(); ok {
		_spec.SetField(syslogrecord.FieldResStatus, field.TypeBool, value)
	}
	if value, ok := slruo.mutation.Stack(); ok {
		_spec.SetField(syslogrecord.FieldStack, field.TypeString, value)
	}
	_spec.AddModifiers(slruo.modifiers...)
	_node = &SysLogRecord{config: slruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, slruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syslogrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	slruo.mutation.done = true
	return _node, nil
}
